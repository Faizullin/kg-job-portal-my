/* tslint:disable */
/* eslint-disable */
/**
 * Master KG Job Portal API
 * Master KG Job Portal API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { type AxiosPromise, type AxiosInstance, type AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ActionResponse
 */
export interface ActionResponse {
    /**
     * 
     * @type {Status524Enum}
     * @memberof ActionResponse
     */
    'status': Status524Enum;
    /**
     * A message describing the result of the operation.
     * @type {string}
     * @memberof ActionResponse
     */
    'message': string;
    /**
     * 
     * @type {any}
     * @memberof ActionResponse
     */
    'data': any;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface AssignmentMaster
 */
export interface AssignmentMaster {
    /**
     * 
     * @type {number}
     * @memberof AssignmentMaster
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof AssignmentMaster
     */
    'user': AssignmentMasterUser;
}
/**
 * 
 * @export
 * @interface AssignmentMasterUser
 */
export interface AssignmentMasterUser {
    /**
     * 
     * @type {number}
     * @memberof AssignmentMasterUser
     */
    'id': number;
    /**
     * Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
     * @type {string}
     * @memberof AssignmentMasterUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentMasterUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentMasterUser
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentMasterUser
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentMasterUser
     */
    'photo_url': string | null;
}
/**
 * * `general` - Основная информация * `specialist` - Specialist * `reviews` - Reviews * `account` - Аккаунт * `search` - Найти * `safety` - Safety
 * @export
 * @enum {string}
 */

export enum CategoryEnum {
    general = 'general',
    specialist = 'specialist',
    reviews = 'reviews',
    account = 'account',
    search = 'search',
    safety = 'safety'
}


/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface Certificate
 */
export interface Certificate {
    /**
     * 
     * @type {number}
     * @memberof Certificate
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'issuing_organization': string;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'issue_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'expiry_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'certificate_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'certificate_file'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Certificate
     */
    'is_verified': boolean;
}
/**
 * Serializer for chat message attachments.
 * @export
 * @interface ChatAttachment
 */
export interface ChatAttachment {
    /**
     * 
     * @type {number}
     * @memberof ChatAttachment
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ChatAttachment
     */
    'original_filename': string;
    /**
     * 
     * @type {string}
     * @memberof ChatAttachment
     */
    'file_url': string;
    /**
     * 
     * @type {number}
     * @memberof ChatAttachment
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof ChatAttachment
     */
    'file_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatAttachment
     */
    'created_at': string;
}
/**
 * Serializer for chat participants.
 * @export
 * @interface ChatParticipant
 */
export interface ChatParticipant {
    /**
     * 
     * @type {number}
     * @memberof ChatParticipant
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof ChatParticipant
     */
    'user': AssignmentMasterUser;
    /**
     * 
     * @type {RoleEnum}
     * @memberof ChatParticipant
     */
    'role'?: RoleEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ChatParticipant
     */
    'is_online'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatParticipant
     */
    'last_seen'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ChatParticipant
     */
    'unread_count'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChatParticipant
     */
    'notifications_enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatParticipant
     */
    'mute_until'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChatParticipant
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ChatParticipant
     */
    'updated_at': string;
}
/**
 * Serializer for chat rooms.
 * @export
 * @interface ChatRoom
 */
export interface ChatRoom {
    /**
     * 
     * @type {number}
     * @memberof ChatRoom
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ChatRoom
     */
    'job'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ChatRoom
     */
    'title': string;
    /**
     * 
     * @type {boolean}
     * @memberof ChatRoom
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {ChatTypeEnum}
     * @memberof ChatRoom
     */
    'chat_type'?: ChatTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ChatRoom
     */
    'last_message_at': string | null;
    /**
     * 
     * @type {Array<ChatParticipant>}
     * @memberof ChatRoom
     */
    'participants': Array<ChatParticipant>;
    /**
     * 
     * @type {string}
     * @memberof ChatRoom
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ChatRoom
     */
    'updated_at': string;
}
/**
 * Serializer for creating chat rooms.
 * @export
 * @interface ChatRoomCreate
 */
export interface ChatRoomCreate {
    /**
     * 
     * @type {number}
     * @memberof ChatRoomCreate
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomCreate
     */
    'title': string;
    /**
     * List of user IDs to add as participants
     * @type {Array<number>}
     * @memberof ChatRoomCreate
     */
    'participants_users_ids'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof ChatRoomCreate
     */
    'job'?: number | null;
    /**
     * 
     * @type {ChatTypeEnum}
     * @memberof ChatRoomCreate
     */
    'chat_type'?: ChatTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomCreate
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomCreate
     */
    'updated_at': string;
}
/**
 * * `job_chat` - Job Chat * `support_chat` - Support Chat * `general_chat` - General Chat
 * @export
 * @enum {string}
 */

export enum ChatTypeEnum {
    job_chat = 'job_chat',
    support_chat = 'support_chat',
    general_chat = 'general_chat'
}


/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface City
 */
export interface City {
    /**
     * 
     * @type {number}
     * @memberof City
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof City
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof City
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof City
     */
    'country'?: number | null;
}
/**
 * * `beginner` - Beginner * `intermediate` - Intermediate * `advanced` - Advanced * `expert` - Expert
 * @export
 * @enum {string}
 */

export enum ComplexityLevelEnum {
    beginner = 'beginner',
    intermediate = 'intermediate',
    advanced = 'advanced',
    expert = 'expert'
}


/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * 
     * @type {number}
     * @memberof Country
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'name': string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface EmployerProfileCreateUpdate
 */
export interface EmployerProfileCreateUpdate {
    /**
     * 
     * @type {number}
     * @memberof EmployerProfileCreateUpdate
     */
    'id': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof EmployerProfileCreateUpdate
     */
    'preferred_services'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof EmployerProfileCreateUpdate
     */
    'favorite_masters'?: Array<number>;
}
/**
 * Serializer for Firebase authentication request
 * @export
 * @interface FireBaseAuth
 */
export interface FireBaseAuth {
    /**
     * Firebase ID token
     * @type {string}
     * @memberof FireBaseAuth
     */
    'id_token': string;
}
/**
 * Serializer for Firebase authentication response
 * @export
 * @interface FirebaseAuthResponse
 */
export interface FirebaseAuthResponse {
    /**
     * DRF authentication token
     * @type {string}
     * @memberof FirebaseAuthResponse
     */
    'token': string;
    /**
     * 
     * @type {FirebaseAuthResponseUser}
     * @memberof FirebaseAuthResponse
     */
    'user': FirebaseAuthResponseUser;
    /**
     * 
     * @type {string}
     * @memberof FirebaseAuthResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface FirebaseAuthResponseUser
 */
export interface FirebaseAuthResponseUser {
    /**
     * 
     * @type {number}
     * @memberof FirebaseAuthResponseUser
     */
    'id': number;
    /**
     * Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
     * @type {string}
     * @memberof FirebaseAuthResponseUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof FirebaseAuthResponseUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof FirebaseAuthResponseUser
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FirebaseAuthResponseUser
     */
    'photo_url'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof FirebaseAuthResponseUser
     */
    'groups': Array<string>;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'employer': number;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'service_subcategory'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'description': string;
    /**
     * 
     * @type {JobStatusEnum}
     * @memberof Job
     */
    'status'?: JobStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'location': string;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'city'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'service_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'service_time'?: string | null;
    /**
     * 
     * @type {UrgencyEnum}
     * @memberof Job
     */
    'urgency'?: UrgencyEnum;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'budget_min'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'budget_max'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'final_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'special_requirements'?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface JobApiAction
 */
export interface JobApiAction {
    /**
     * 
     * @type {Status524Enum}
     * @memberof JobApiAction
     */
    'status': Status524Enum;
    /**
     * A message describing the result of the operation.
     * @type {string}
     * @memberof JobApiAction
     */
    'message': string;
    /**
     * 
     * @type {JobApplicationJob}
     * @memberof JobApiAction
     */
    'data': JobApplicationJob;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface JobApplication
 */
export interface JobApplication {
    /**
     * 
     * @type {number}
     * @memberof JobApplication
     */
    'id': number;
    /**
     * 
     * @type {JobApplicationJob}
     * @memberof JobApplication
     */
    'job': JobApplicationJob;
    /**
     * 
     * @type {number}
     * @memberof JobApplication
     */
    'applicant': number | null;
    /**
     * 
     * @type {StatusC50Enum}
     * @memberof JobApplication
     */
    'status'?: StatusC50Enum;
    /**
     * 
     * @type {string}
     * @memberof JobApplication
     */
    'applied_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobApplication
     */
    'accepted_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplication
     */
    'rejected_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplication
     */
    'withdrawn_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplication
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobApplication
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface JobApplicationApiAction
 */
export interface JobApplicationApiAction {
    /**
     * 
     * @type {Status524Enum}
     * @memberof JobApplicationApiAction
     */
    'status': Status524Enum;
    /**
     * A message describing the result of the operation.
     * @type {string}
     * @memberof JobApplicationApiAction
     */
    'message': string;
    /**
     * 
     * @type {JobApplicationApiActionData}
     * @memberof JobApplicationApiAction
     */
    'data': JobApplicationApiActionData;
}
/**
 * 
 * @export
 * @interface JobApplicationApiActionData
 */
export interface JobApplicationApiActionData {
    /**
     * 
     * @type {JobAssignmentAcceptedApplication}
     * @memberof JobApplicationApiActionData
     */
    'application': JobAssignmentAcceptedApplication;
}
/**
 * 
 * @export
 * @interface JobApplicationJob
 */
export interface JobApplicationJob {
    /**
     * 
     * @type {number}
     * @memberof JobApplicationJob
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof JobApplicationJob
     */
    'employer': number;
    /**
     * 
     * @type {number}
     * @memberof JobApplicationJob
     */
    'service_subcategory'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'description': string;
    /**
     * 
     * @type {JobStatusEnum}
     * @memberof JobApplicationJob
     */
    'status'?: JobStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'location': string;
    /**
     * 
     * @type {number}
     * @memberof JobApplicationJob
     */
    'city'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'service_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'service_time'?: string | null;
    /**
     * 
     * @type {UrgencyEnum}
     * @memberof JobApplicationJob
     */
    'urgency'?: UrgencyEnum;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'budget_min'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'budget_max'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'final_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'special_requirements'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'updated_at': string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface JobApply
 */
export interface JobApply {
    /**
     * 
     * @type {number}
     * @memberof JobApply
     */
    'id': number;
    /**
     * ID of the job to apply for
     * @type {number}
     * @memberof JobApply
     */
    'job_id': number;
    /**
     * 
     * @type {string}
     * @memberof JobApply
     */
    'amount': string;
    /**
     * 
     * @type {string}
     * @memberof JobApply
     */
    'comment'?: string;
    /**
     * 
     * @type {number}
     * @memberof JobApply
     */
    'estimated_duration'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof JobApply
     */
    'resume'?: number | null;
    /**
     * 
     * @type {StatusC50Enum}
     * @memberof JobApply
     */
    'status': StatusC50Enum;
    /**
     * 
     * @type {string}
     * @memberof JobApply
     */
    'applied_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobApply
     */
    'accepted_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApply
     */
    'rejected_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApply
     */
    'withdrawn_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApply
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobApply
     */
    'updated_at': string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface JobAssignment
 */
export interface JobAssignment {
    /**
     * 
     * @type {number}
     * @memberof JobAssignment
     */
    'id': number;
    /**
     * 
     * @type {JobAssignmentStatusEnum}
     * @memberof JobAssignment
     */
    'status'?: JobAssignmentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof JobAssignment
     */
    'assigned_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobAssignment
     */
    'started_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignment
     */
    'completed_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignment
     */
    'progress_notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobAssignment
     */
    'completion_notes'?: string;
    /**
     * 
     * @type {number}
     * @memberof JobAssignment
     */
    'client_rating'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignment
     */
    'client_review'?: string;
    /**
     * 
     * @type {JobApplicationJob}
     * @memberof JobAssignment
     */
    'job': JobApplicationJob;
    /**
     * 
     * @type {JobAssignmentMaster}
     * @memberof JobAssignment
     */
    'master': JobAssignmentMaster;
    /**
     * 
     * @type {JobAssignmentAcceptedApplication}
     * @memberof JobAssignment
     */
    'accepted_application': JobAssignmentAcceptedApplication;
}
/**
 * 
 * @export
 * @interface JobAssignmentAcceptedApplication
 */
export interface JobAssignmentAcceptedApplication {
    /**
     * 
     * @type {number}
     * @memberof JobAssignmentAcceptedApplication
     */
    'id': number;
    /**
     * 
     * @type {JobApplicationJob}
     * @memberof JobAssignmentAcceptedApplication
     */
    'job': JobApplicationJob;
    /**
     * 
     * @type {number}
     * @memberof JobAssignmentAcceptedApplication
     */
    'applicant': number | null;
    /**
     * 
     * @type {StatusC50Enum}
     * @memberof JobAssignmentAcceptedApplication
     */
    'status'?: StatusC50Enum;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentAcceptedApplication
     */
    'applied_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentAcceptedApplication
     */
    'accepted_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentAcceptedApplication
     */
    'rejected_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentAcceptedApplication
     */
    'withdrawn_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentAcceptedApplication
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentAcceptedApplication
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface JobAssignmentApiAction
 */
export interface JobAssignmentApiAction {
    /**
     * 
     * @type {Status524Enum}
     * @memberof JobAssignmentApiAction
     */
    'status': Status524Enum;
    /**
     * A message describing the result of the operation.
     * @type {string}
     * @memberof JobAssignmentApiAction
     */
    'message': string;
    /**
     * 
     * @type {JobAssignmentApiActionData}
     * @memberof JobAssignmentApiAction
     */
    'data': JobAssignmentApiActionData;
}
/**
 * 
 * @export
 * @interface JobAssignmentApiActionData
 */
export interface JobAssignmentApiActionData {
    /**
     * 
     * @type {WrapperAssignment}
     * @memberof JobAssignmentApiActionData
     */
    'assignment': WrapperAssignment;
}
/**
 * 
 * @export
 * @interface JobAssignmentMaster
 */
export interface JobAssignmentMaster {
    /**
     * 
     * @type {number}
     * @memberof JobAssignmentMaster
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof JobAssignmentMaster
     */
    'user': AssignmentMasterUser;
}
/**
 * * `assigned` - Assigned * `in_progress` - In Progress * `completed` - Completed * `cancelled` - Cancelled
 * @export
 * @enum {string}
 */

export enum JobAssignmentStatusEnum {
    assigned = 'assigned',
    in_progress = 'in_progress',
    completed = 'completed',
    cancelled = 'cancelled'
}


/**
 * * `draft` - Draft * `published` - Published * `assigned` - Assigned * `in_progress` - In Progress * `completed` - Completed * `cancelled` - Cancelled
 * @export
 * @enum {string}
 */

export enum JobStatusEnum {
    draft = 'draft',
    published = 'published',
    assigned = 'assigned',
    in_progress = 'in_progress',
    completed = 'completed',
    cancelled = 'cancelled'
}


/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface Language
 */
export interface Language {
    /**
     * 
     * @type {number}
     * @memberof Language
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Language
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Language
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Language
     */
    'native_name': string;
    /**
     * 
     * @type {boolean}
     * @memberof Language
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Language
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Language
     */
    'flag_icon'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Language
     */
    'rtl_support'?: boolean;
}
/**
 * * `info` - Info * `warning` - Warning * `error` - Error
 * @export
 * @enum {string}
 */

export enum LevelEnum {
    info = 'info',
    warning = 'warning',
    error = 'error'
}


/**
 * Serializer for logout response
 * @export
 * @interface LogoutResponse
 */
export interface LogoutResponse {
    /**
     * Logout confirmation message
     * @type {string}
     * @memberof LogoutResponse
     */
    'message': string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface MasterProfileCreateUpdate
 */
export interface MasterProfileCreateUpdate {
    /**
     * 
     * @type {number}
     * @memberof MasterProfileCreateUpdate
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MasterProfileCreateUpdate
     */
    'profession'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof MasterProfileCreateUpdate
     */
    'service_areas'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof MasterProfileCreateUpdate
     */
    'services_offered'?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdate
     */
    'works_remotely'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdate
     */
    'accepts_clients_at_location'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdate
     */
    'travels_to_clients'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdate
     */
    'is_available'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MasterProfileCreateUpdate
     */
    'hourly_rate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MasterProfileCreateUpdate
     */
    'response_time_hours'?: number;
    /**
     * 
     * @type {number}
     * @memberof MasterProfileCreateUpdate
     */
    'work_experience_start_year'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MasterProfileCreateUpdate
     */
    'education_institution'?: string;
    /**
     * e.g., 2005-2009
     * @type {string}
     * @memberof MasterProfileCreateUpdate
     */
    'education_years'?: string;
    /**
     * List of languages spoken
     * @type {any}
     * @memberof MasterProfileCreateUpdate
     */
    'languages'?: any;
    /**
     * 
     * @type {string}
     * @memberof MasterProfileCreateUpdate
     */
    'about_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterProfileCreateUpdate
     */
    'current_location'?: string;
}
/**
 * 
 * @export
 * @interface MasterResume
 */
export interface MasterResume {
    /**
     * 
     * @type {number}
     * @memberof MasterResume
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MasterResume
     */
    'master'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MasterResume
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof MasterResume
     */
    'content': string;
    /**
     * 
     * @type {MasterResumeStatusEnum}
     * @memberof MasterResume
     */
    'status'?: MasterResumeStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MasterResume
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof MasterResume
     */
    'updated_at': string;
}
/**
 * * `draft` - Draft * `published` - Published * `archived` - Archived
 * @export
 * @enum {string}
 */

export enum MasterResumeStatusEnum {
    draft = 'draft',
    published = 'published',
    archived = 'archived'
}


/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface MasterSkill
 */
export interface MasterSkill {
    /**
     * 
     * @type {number}
     * @memberof MasterSkill
     */
    'id': number;
    /**
     * 
     * @type {MasterSkillSkill}
     * @memberof MasterSkill
     */
    'skill': MasterSkillSkill;
    /**
     * 
     * @type {number}
     * @memberof MasterSkill
     */
    'skill_id': number;
    /**
     * 
     * @type {boolean}
     * @memberof MasterSkill
     */
    'is_primary_skill'?: boolean;
    /**
     * 
     * @type {ProficiencyLevelEnum}
     * @memberof MasterSkill
     */
    'proficiency_level'?: ProficiencyLevelEnum;
    /**
     * 
     * @type {number}
     * @memberof MasterSkill
     */
    'years_of_experience'?: number;
    /**
     * 
     * @type {string}
     * @memberof MasterSkill
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface MasterSkillSkill
 */
export interface MasterSkillSkill {
    /**
     * 
     * @type {number}
     * @memberof MasterSkillSkill
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MasterSkillSkill
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MasterSkillSkill
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof MasterSkillSkill
     */
    'category': number;
    /**
     * 
     * @type {boolean}
     * @memberof MasterSkillSkill
     */
    'is_active'?: boolean;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface MasterStatistics
 */
export interface MasterStatistics {
    /**
     * 
     * @type {number}
     * @memberof MasterStatistics
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MasterStatistics
     */
    'total_jobs_completed'?: number;
    /**
     * 
     * @type {string}
     * @memberof MasterStatistics
     */
    'on_time_percentage'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterStatistics
     */
    'repeat_customer_percentage'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterStatistics
     */
    'average_rating'?: string;
    /**
     * 
     * @type {number}
     * @memberof MasterStatistics
     */
    'total_reviews'?: number;
}
/**
 * Serializer for chat messages.
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'chat_room': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof Message
     */
    'sender': AssignmentMasterUser;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'content': string;
    /**
     * 
     * @type {MessageTypeEnum}
     * @memberof Message
     */
    'message_type'?: MessageTypeEnum;
    /**
     * 
     * @type {Array<ChatAttachment>}
     * @memberof Message
     */
    'attachments': Array<ChatAttachment>;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'reply_to'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'reply_to_sender': string;
    /**
     * 
     * @type {boolean}
     * @memberof Message
     */
    'is_read': boolean;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'read_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface MessageCreate
 */
export interface MessageCreate {
    /**
     * 
     * @type {number}
     * @memberof MessageCreate
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MessageCreate
     */
    'chat_room': number;
    /**
     * 
     * @type {number}
     * @memberof MessageCreate
     */
    'sender': number;
    /**
     * 
     * @type {string}
     * @memberof MessageCreate
     */
    'content': string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageCreate
     */
    'is_read': boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageCreate
     */
    'read_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof MessageCreate
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof MessageCreate
     */
    'updated_at': string;
    /**
     * File attachment (image or document)
     * @type {string}
     * @memberof MessageCreate
     */
    'attachment_file'?: string | null;
}
/**
 * * `text` - Текст * `image` - Изображение * `file` - Файл * `system` - System Message * `order_update` - Order Update
 * @export
 * @enum {string}
 */

export enum MessageTypeEnum {
    text = 'text',
    image = 'image',
    file = 'file',
    system = 'system',
    order_update = 'order_update'
}


/**
 * Serializer for Notification model.
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'message': string;
    /**
     * 
     * @type {LevelEnum}
     * @memberof Notification
     */
    'level'?: LevelEnum;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'verb': string;
    /**
     * 
     * @type {boolean}
     * @memberof Notification
     */
    'is_read'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'read_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'updated_at': string;
}
/**
 * Serializer for creating notifications.
 * @export
 * @interface NotificationCreate
 */
export interface NotificationCreate {
    /**
     * 
     * @type {number}
     * @memberof NotificationCreate
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof NotificationCreate
     */
    'recipient': number;
    /**
     * 
     * @type {string}
     * @memberof NotificationCreate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof NotificationCreate
     */
    'message': string;
    /**
     * 
     * @type {LevelEnum}
     * @memberof NotificationCreate
     */
    'level'?: LevelEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationCreate
     */
    'verb': string;
}
/**
 * Serializer for updating notification read status.
 * @export
 * @interface NotificationUpdate
 */
export interface NotificationUpdate {
    /**
     * 
     * @type {boolean}
     * @memberof NotificationUpdate
     */
    'is_read'?: boolean;
}
/**
 * 
 * @export
 * @interface PaginatedCertificateList
 */
export interface PaginatedCertificateList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedCertificateList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCertificateList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCertificateList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Certificate>}
     * @memberof PaginatedCertificateList
     */
    'results'?: Array<Certificate>;
}
/**
 * 
 * @export
 * @interface PaginatedChatRoomList
 */
export interface PaginatedChatRoomList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedChatRoomList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedChatRoomList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedChatRoomList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ChatRoom>}
     * @memberof PaginatedChatRoomList
     */
    'results'?: Array<ChatRoom>;
}
/**
 * 
 * @export
 * @interface PaginatedCityList
 */
export interface PaginatedCityList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedCityList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCityList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCityList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<City>}
     * @memberof PaginatedCityList
     */
    'results'?: Array<City>;
}
/**
 * 
 * @export
 * @interface PaginatedCountryList
 */
export interface PaginatedCountryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedCountryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCountryList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCountryList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Country>}
     * @memberof PaginatedCountryList
     */
    'results'?: Array<Country>;
}
/**
 * 
 * @export
 * @interface PaginatedJobApplicationList
 */
export interface PaginatedJobApplicationList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedJobApplicationList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobApplicationList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobApplicationList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<JobApplication>}
     * @memberof PaginatedJobApplicationList
     */
    'results'?: Array<JobApplication>;
}
/**
 * 
 * @export
 * @interface PaginatedJobAssignmentList
 */
export interface PaginatedJobAssignmentList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedJobAssignmentList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobAssignmentList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobAssignmentList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<JobAssignment>}
     * @memberof PaginatedJobAssignmentList
     */
    'results'?: Array<JobAssignment>;
}
/**
 * 
 * @export
 * @interface PaginatedJobList
 */
export interface PaginatedJobList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedJobList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Job>}
     * @memberof PaginatedJobList
     */
    'results'?: Array<Job>;
}
/**
 * 
 * @export
 * @interface PaginatedLanguageList
 */
export interface PaginatedLanguageList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedLanguageList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLanguageList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLanguageList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Language>}
     * @memberof PaginatedLanguageList
     */
    'results'?: Array<Language>;
}
/**
 * 
 * @export
 * @interface PaginatedMasterResumeList
 */
export interface PaginatedMasterResumeList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMasterResumeList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMasterResumeList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMasterResumeList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<MasterResume>}
     * @memberof PaginatedMasterResumeList
     */
    'results'?: Array<MasterResume>;
}
/**
 * 
 * @export
 * @interface PaginatedMasterSkillList
 */
export interface PaginatedMasterSkillList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMasterSkillList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMasterSkillList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMasterSkillList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<MasterSkill>}
     * @memberof PaginatedMasterSkillList
     */
    'results'?: Array<MasterSkill>;
}
/**
 * 
 * @export
 * @interface PaginatedMessageList
 */
export interface PaginatedMessageList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMessageList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMessageList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMessageList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Message>}
     * @memberof PaginatedMessageList
     */
    'results'?: Array<Message>;
}
/**
 * 
 * @export
 * @interface PaginatedNotificationList
 */
export interface PaginatedNotificationList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedNotificationList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedNotificationList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedNotificationList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Notification>}
     * @memberof PaginatedNotificationList
     */
    'results'?: Array<Notification>;
}
/**
 * 
 * @export
 * @interface PaginatedPortfolioItemList
 */
export interface PaginatedPortfolioItemList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPortfolioItemList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPortfolioItemList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPortfolioItemList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PortfolioItem>}
     * @memberof PaginatedPortfolioItemList
     */
    'results'?: Array<PortfolioItem>;
}
/**
 * 
 * @export
 * @interface PaginatedProfessionList
 */
export interface PaginatedProfessionList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedProfessionList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProfessionList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProfessionList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Profession>}
     * @memberof PaginatedProfessionList
     */
    'results'?: Array<Profession>;
}
/**
 * 
 * @export
 * @interface PaginatedServiceAreaList
 */
export interface PaginatedServiceAreaList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedServiceAreaList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedServiceAreaList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedServiceAreaList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ServiceArea>}
     * @memberof PaginatedServiceAreaList
     */
    'results'?: Array<ServiceArea>;
}
/**
 * 
 * @export
 * @interface PaginatedServiceCategoryList
 */
export interface PaginatedServiceCategoryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedServiceCategoryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedServiceCategoryList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedServiceCategoryList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ServiceCategory>}
     * @memberof PaginatedServiceCategoryList
     */
    'results'?: Array<ServiceCategory>;
}
/**
 * 
 * @export
 * @interface PaginatedServiceSubcategoryList
 */
export interface PaginatedServiceSubcategoryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedServiceSubcategoryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedServiceSubcategoryList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedServiceSubcategoryList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ServiceSubcategory>}
     * @memberof PaginatedServiceSubcategoryList
     */
    'results'?: Array<ServiceSubcategory>;
}
/**
 * 
 * @export
 * @interface PaginatedSkillDetailList
 */
export interface PaginatedSkillDetailList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSkillDetailList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSkillDetailList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSkillDetailList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<SkillDetail>}
     * @memberof PaginatedSkillDetailList
     */
    'results'?: Array<SkillDetail>;
}
/**
 * 
 * @export
 * @interface PaginatedSupportFAQList
 */
export interface PaginatedSupportFAQList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSupportFAQList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSupportFAQList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSupportFAQList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<SupportFAQ>}
     * @memberof PaginatedSupportFAQList
     */
    'results'?: Array<SupportFAQ>;
}
/**
 * 
 * @export
 * @interface PaginatedSystemSettingsList
 */
export interface PaginatedSystemSettingsList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSystemSettingsList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSystemSettingsList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSystemSettingsList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<SystemSettings>}
     * @memberof PaginatedSystemSettingsList
     */
    'results'?: Array<SystemSettings>;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedCertificate
 */
export interface PatchedCertificate {
    /**
     * 
     * @type {number}
     * @memberof PatchedCertificate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedCertificate
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedCertificate
     */
    'issuing_organization'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedCertificate
     */
    'issue_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedCertificate
     */
    'expiry_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedCertificate
     */
    'certificate_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedCertificate
     */
    'certificate_file'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedCertificate
     */
    'is_verified'?: boolean;
}
/**
 * Serializer for chat rooms.
 * @export
 * @interface PatchedChatRoom
 */
export interface PatchedChatRoom {
    /**
     * 
     * @type {number}
     * @memberof PatchedChatRoom
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedChatRoom
     */
    'job'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedChatRoom
     */
    'title'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedChatRoom
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {ChatTypeEnum}
     * @memberof PatchedChatRoom
     */
    'chat_type'?: ChatTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedChatRoom
     */
    'last_message_at'?: string | null;
    /**
     * 
     * @type {Array<ChatParticipant>}
     * @memberof PatchedChatRoom
     */
    'participants'?: Array<ChatParticipant>;
    /**
     * 
     * @type {string}
     * @memberof PatchedChatRoom
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedChatRoom
     */
    'updated_at'?: string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedEmployerProfileCreateUpdate
 */
export interface PatchedEmployerProfileCreateUpdate {
    /**
     * 
     * @type {number}
     * @memberof PatchedEmployerProfileCreateUpdate
     */
    'id'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedEmployerProfileCreateUpdate
     */
    'preferred_services'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedEmployerProfileCreateUpdate
     */
    'favorite_masters'?: Array<number>;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedJob
 */
export interface PatchedJob {
    /**
     * 
     * @type {number}
     * @memberof PatchedJob
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedJob
     */
    'employer'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedJob
     */
    'service_subcategory'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJob
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedJob
     */
    'description'?: string;
    /**
     * 
     * @type {JobStatusEnum}
     * @memberof PatchedJob
     */
    'status'?: JobStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedJob
     */
    'location'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedJob
     */
    'city'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJob
     */
    'service_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJob
     */
    'service_time'?: string | null;
    /**
     * 
     * @type {UrgencyEnum}
     * @memberof PatchedJob
     */
    'urgency'?: UrgencyEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedJob
     */
    'budget_min'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJob
     */
    'budget_max'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJob
     */
    'final_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJob
     */
    'special_requirements'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedJob
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedJob
     */
    'updated_at'?: string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedJobApplication
 */
export interface PatchedJobApplication {
    /**
     * 
     * @type {number}
     * @memberof PatchedJobApplication
     */
    'id'?: number;
    /**
     * 
     * @type {JobApplicationJob}
     * @memberof PatchedJobApplication
     */
    'job'?: JobApplicationJob;
    /**
     * 
     * @type {number}
     * @memberof PatchedJobApplication
     */
    'applicant'?: number | null;
    /**
     * 
     * @type {StatusC50Enum}
     * @memberof PatchedJobApplication
     */
    'status'?: StatusC50Enum;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobApplication
     */
    'applied_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobApplication
     */
    'accepted_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobApplication
     */
    'rejected_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobApplication
     */
    'withdrawn_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobApplication
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobApplication
     */
    'updated_at'?: string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedJobAssignment
 */
export interface PatchedJobAssignment {
    /**
     * 
     * @type {number}
     * @memberof PatchedJobAssignment
     */
    'id'?: number;
    /**
     * 
     * @type {JobAssignmentStatusEnum}
     * @memberof PatchedJobAssignment
     */
    'status'?: JobAssignmentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobAssignment
     */
    'assigned_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobAssignment
     */
    'started_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobAssignment
     */
    'completed_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobAssignment
     */
    'progress_notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobAssignment
     */
    'completion_notes'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedJobAssignment
     */
    'client_rating'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobAssignment
     */
    'client_review'?: string;
    /**
     * 
     * @type {JobApplicationJob}
     * @memberof PatchedJobAssignment
     */
    'job'?: JobApplicationJob;
    /**
     * 
     * @type {JobAssignmentMaster}
     * @memberof PatchedJobAssignment
     */
    'master'?: JobAssignmentMaster;
    /**
     * 
     * @type {JobAssignmentAcceptedApplication}
     * @memberof PatchedJobAssignment
     */
    'accepted_application'?: JobAssignmentAcceptedApplication;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedMasterProfileCreateUpdate
 */
export interface PatchedMasterProfileCreateUpdate {
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'profession'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'service_areas'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'services_offered'?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'works_remotely'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'accepts_clients_at_location'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'travels_to_clients'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'is_available'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'hourly_rate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'response_time_hours'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'work_experience_start_year'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'education_institution'?: string;
    /**
     * e.g., 2005-2009
     * @type {string}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'education_years'?: string;
    /**
     * List of languages spoken
     * @type {any}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'languages'?: any;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'about_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterProfileCreateUpdate
     */
    'current_location'?: string;
}
/**
 * 
 * @export
 * @interface PatchedMasterResume
 */
export interface PatchedMasterResume {
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterResume
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterResume
     */
    'master'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterResume
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterResume
     */
    'content'?: string;
    /**
     * 
     * @type {MasterResumeStatusEnum}
     * @memberof PatchedMasterResume
     */
    'status'?: MasterResumeStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterResume
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterResume
     */
    'updated_at'?: string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedMasterSkill
 */
export interface PatchedMasterSkill {
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterSkill
     */
    'id'?: number;
    /**
     * 
     * @type {MasterSkillSkill}
     * @memberof PatchedMasterSkill
     */
    'skill'?: MasterSkillSkill;
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterSkill
     */
    'skill_id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedMasterSkill
     */
    'is_primary_skill'?: boolean;
    /**
     * 
     * @type {ProficiencyLevelEnum}
     * @memberof PatchedMasterSkill
     */
    'proficiency_level'?: ProficiencyLevelEnum;
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterSkill
     */
    'years_of_experience'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterSkill
     */
    'created_at'?: string;
}
/**
 * Serializer for updating notification read status.
 * @export
 * @interface PatchedNotificationUpdate
 */
export interface PatchedNotificationUpdate {
    /**
     * 
     * @type {boolean}
     * @memberof PatchedNotificationUpdate
     */
    'is_read'?: boolean;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedPortfolioItem
 */
export interface PatchedPortfolioItem {
    /**
     * 
     * @type {number}
     * @memberof PatchedPortfolioItem
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedPortfolioItem
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedPortfolioItem
     */
    'description'?: string;
    /**
     * 
     * @type {MasterSkillSkill}
     * @memberof PatchedPortfolioItem
     */
    'skill_used'?: MasterSkillSkill;
    /**
     * 
     * @type {number}
     * @memberof PatchedPortfolioItem
     */
    'skill_used_id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPortfolioItem
     */
    'is_featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedPortfolioItem
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedPortfolioItem
     */
    'created_at'?: string;
}
/**
 * 
 * @export
 * @interface PatchedProgressUpdate
 */
export interface PatchedProgressUpdate {
    /**
     * 
     * @type {number}
     * @memberof PatchedProgressUpdate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedProgressUpdate
     */
    'progress_notes'?: string;
}
/**
 * Serializer for creating and updating service areas.
 * @export
 * @interface PatchedServiceAreaCreateUpdate
 */
export interface PatchedServiceAreaCreateUpdate {
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdate
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdate
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdate
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdate
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdate
     */
    'latitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdate
     */
    'longitude'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof PatchedServiceAreaCreateUpdate
     */
    'postal_codes'?: any;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceAreaCreateUpdate
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedServiceAreaCreateUpdate
     */
    'service_categories'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdate
     */
    'base_price_multiplier'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdate
     */
    'travel_fee'?: string;
}
/**
 * Serializer for creating and updating service categories.
 * @export
 * @interface PatchedServiceCategoryCreateUpdate
 */
export interface PatchedServiceCategoryCreateUpdate {
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'color'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'banner_image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'commission_rate'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'min_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'max_price'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'estimated_duration_min'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'estimated_duration_max'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'meta_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'meta_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'keywords'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'slug'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'requires_license'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'requires_insurance'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceCategoryCreateUpdate
     */
    'requires_background_check'?: boolean;
}
/**
 * Serializer for creating and updating service subcategories.
 * @export
 * @interface PatchedServiceSubcategoryCreateUpdate
 */
export interface PatchedServiceSubcategoryCreateUpdate {
    /**
     * 
     * @type {number}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'category'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'icon'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'base_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'price_range_min'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'price_range_max'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'estimated_duration'?: number | null;
    /**
     * 
     * @type {ComplexityLevelEnum}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'complexity_level'?: ComplexityLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'safety_requirements'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'meta_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdate
     */
    'meta_description'?: string;
}
/**
 * Serializer for creating and updating support FAQ items.
 * @export
 * @interface PatchedSupportFAQCreateUpdate
 */
export interface PatchedSupportFAQCreateUpdate {
    /**
     * 
     * @type {string}
     * @memberof PatchedSupportFAQCreateUpdate
     */
    'question'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedSupportFAQCreateUpdate
     */
    'answer'?: string;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof PatchedSupportFAQCreateUpdate
     */
    'category'?: CategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof PatchedSupportFAQCreateUpdate
     */
    'sort_order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedSupportFAQCreateUpdate
     */
    'is_popular'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedSupportFAQCreateUpdate
     */
    'is_active'?: boolean;
}
/**
 * Serializer for creating and updating system settings.
 * @export
 * @interface PatchedSystemSettingsCreateUpdate
 */
export interface PatchedSystemSettingsCreateUpdate {
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdate
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdate
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdate
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedSystemSettingsCreateUpdate
     */
    'is_public'?: boolean;
    /**
     * 
     * @type {SettingTypeEnum}
     * @memberof PatchedSystemSettingsCreateUpdate
     */
    'setting_type'?: SettingTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdate
     */
    'validation_regex'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdate
     */
    'min_value'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdate
     */
    'max_value'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedSystemSettingsCreateUpdate
     */
    'requires_admin'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdate
     */
    'category'?: string;
}
/**
 * Serializer for user notification settings.
 * @export
 * @interface PatchedUserNotificationSettings
 */
export interface PatchedUserNotificationSettings {
    /**
     * 
     * @type {number}
     * @memberof PatchedUserNotificationSettings
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettings
     */
    'sms_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettings
     */
    'push_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettings
     */
    'email_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettings
     */
    'task_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettings
     */
    'specialist_messages'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettings
     */
    'task_updates'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettings
     */
    'marketing_emails'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettings
     */
    'promotional_sms'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettings
     */
    'newsletter'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettings
     */
    'system_alerts'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettings
     */
    'security_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettings
     */
    'quiet_hours_enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserNotificationSettings
     */
    'quiet_hours_start'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserNotificationSettings
     */
    'quiet_hours_end'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserNotificationSettings
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserNotificationSettings
     */
    'updated_at'?: string;
}
/**
 * Serializer for updating user profile - enhanced version of api_users EditUserSettingsView
 * @export
 * @interface PatchedUserUpdate
 */
export interface PatchedUserUpdate {
    /**
     * 
     * @type {string}
     * @memberof PatchedUserUpdate
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserUpdate
     */
    'photo_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserUpdate
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserUpdate
     */
    'last_name'?: string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PortfolioItem
 */
export interface PortfolioItem {
    /**
     * 
     * @type {number}
     * @memberof PortfolioItem
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PortfolioItem
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PortfolioItem
     */
    'description'?: string;
    /**
     * 
     * @type {MasterSkillSkill}
     * @memberof PortfolioItem
     */
    'skill_used': MasterSkillSkill;
    /**
     * 
     * @type {number}
     * @memberof PortfolioItem
     */
    'skill_used_id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PortfolioItem
     */
    'is_featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PortfolioItem
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof PortfolioItem
     */
    'created_at': string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface Profession
 */
export interface Profession {
    /**
     * 
     * @type {number}
     * @memberof Profession
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Profession
     */
    'name': string;
}
/**
 * * `beginner` - Beginner * `intermediate` - Intermediate * `advanced` - Advanced * `expert` - Expert
 * @export
 * @enum {string}
 */

export enum ProficiencyLevelEnum {
    beginner = 'beginner',
    intermediate = 'intermediate',
    advanced = 'advanced',
    expert = 'expert'
}


/**
 * Detailed serializer for service provider profile.
 * @export
 * @interface PublicMasterProfileDetail
 */
export interface PublicMasterProfileDetail {
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfileDetail
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof PublicMasterProfileDetail
     */
    'user': AssignmentMasterUser;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'works_remotely'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'accepts_clients_at_location'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'travels_to_clients'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'is_available'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetail
     */
    'hourly_rate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfileDetail
     */
    'response_time_hours'?: number;
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfileDetail
     */
    'work_experience_start_year'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetail
     */
    'education_institution'?: string;
    /**
     * e.g., 2005-2009
     * @type {string}
     * @memberof PublicMasterProfileDetail
     */
    'education_years'?: string;
    /**
     * List of languages spoken
     * @type {any}
     * @memberof PublicMasterProfileDetail
     */
    'languages'?: any;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetail
     */
    'about_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetail
     */
    'current_location'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'is_online'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetail
     */
    'last_seen'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'is_verified_provider'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'is_top_master'?: boolean;
    /**
     * 
     * @type {PublicMasterProfileDetailProfession}
     * @memberof PublicMasterProfileDetail
     */
    'profession': PublicMasterProfileDetailProfession;
    /**
     * 
     * @type {Array<MasterSkill>}
     * @memberof PublicMasterProfileDetail
     */
    'skills': Array<MasterSkill>;
    /**
     * 
     * @type {Array<PortfolioItem>}
     * @memberof PublicMasterProfileDetail
     */
    'portfolio_items': Array<PortfolioItem>;
    /**
     * 
     * @type {Array<Certificate>}
     * @memberof PublicMasterProfileDetail
     */
    'certificates': Array<Certificate>;
    /**
     * 
     * @type {PublicMasterProfileDetailStatistics}
     * @memberof PublicMasterProfileDetail
     */
    'statistics': PublicMasterProfileDetailStatistics;
}
/**
 * 
 * @export
 * @interface PublicMasterProfileDetailProfession
 */
export interface PublicMasterProfileDetailProfession {
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfileDetailProfession
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetailProfession
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PublicMasterProfileDetailStatistics
 */
export interface PublicMasterProfileDetailStatistics {
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfileDetailStatistics
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfileDetailStatistics
     */
    'total_jobs_completed'?: number;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetailStatistics
     */
    'on_time_percentage'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetailStatistics
     */
    'repeat_customer_percentage'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetailStatistics
     */
    'average_rating'?: string;
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfileDetailStatistics
     */
    'total_reviews'?: number;
}
/**
 * 
 * @export
 * @interface Rating
 */
export interface Rating {
    /**
     * 
     * @type {number}
     * @memberof Rating
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Rating
     */
    'client_rating'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Rating
     */
    'client_review'?: string;
}
/**
 * * `member` - Member * `admin` - Admin * `moderator` - Moderator
 * @export
 * @enum {string}
 */

export enum RoleEnum {
    member = 'member',
    admin = 'admin',
    moderator = 'moderator'
}


/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface ServiceArea
 */
export interface ServiceArea {
    /**
     * 
     * @type {number}
     * @memberof ServiceArea
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'latitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'longitude'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceArea
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'base_price_multiplier'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'travel_fee'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceArea
     */
    'service_categories': Array<number>;
}
/**
 * Serializer for creating and updating service areas.
 * @export
 * @interface ServiceAreaCreateUpdate
 */
export interface ServiceAreaCreateUpdate {
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'latitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'longitude'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ServiceAreaCreateUpdate
     */
    'postal_codes'?: any;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceAreaCreateUpdate
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceAreaCreateUpdate
     */
    'service_categories': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'base_price_multiplier'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'travel_fee'?: string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface ServiceCategory
 */
export interface ServiceCategory {
    /**
     * 
     * @type {number}
     * @memberof ServiceCategory
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'color'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategory
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ServiceCategory
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'banner_image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategory
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'commission_rate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'slug': string;
    /**
     * 
     * @type {Array<ServiceSubcategory>}
     * @memberof ServiceCategory
     */
    'subcategories': Array<ServiceSubcategory>;
}
/**
 * Serializer for creating and updating service categories.
 * @export
 * @interface ServiceCategoryCreateUpdate
 */
export interface ServiceCategoryCreateUpdate {
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'color'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdate
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ServiceCategoryCreateUpdate
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'banner_image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdate
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'commission_rate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'min_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'max_price'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ServiceCategoryCreateUpdate
     */
    'estimated_duration_min'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ServiceCategoryCreateUpdate
     */
    'estimated_duration_max'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'meta_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'meta_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'keywords'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'slug': string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdate
     */
    'requires_license'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdate
     */
    'requires_insurance'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdate
     */
    'requires_background_check'?: boolean;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface ServiceSubcategory
 */
export interface ServiceSubcategory {
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategory
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategory
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategory
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategory
     */
    'icon'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceSubcategory
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategory
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategory
     */
    'image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceSubcategory
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategory
     */
    'base_price'?: string | null;
    /**
     * 
     * @type {ComplexityLevelEnum}
     * @memberof ServiceSubcategory
     */
    'complexity_level'?: ComplexityLevelEnum;
}
/**
 * Serializer for creating and updating service subcategories.
 * @export
 * @interface ServiceSubcategoryCreateUpdate
 */
export interface ServiceSubcategoryCreateUpdate {
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'category': number;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'icon'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'base_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'price_range_min'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'price_range_max'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'estimated_duration'?: number | null;
    /**
     * 
     * @type {ComplexityLevelEnum}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'complexity_level'?: ComplexityLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'safety_requirements'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'meta_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'meta_description'?: string;
}
/**
 * * `string` - String * `integer` - Целое * `boolean` - Boolean * `json` - JSON * `file` - Файл
 * @export
 * @enum {string}
 */

export enum SettingTypeEnum {
    string = 'string',
    integer = 'integer',
    boolean = 'boolean',
    json = 'json',
    file = 'file'
}


/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface SkillDetail
 */
export interface SkillDetail {
    /**
     * 
     * @type {number}
     * @memberof SkillDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof SkillDetail
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SkillDetail
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof SkillDetail
     */
    'category': number;
    /**
     * 
     * @type {boolean}
     * @memberof SkillDetail
     */
    'is_active'?: boolean;
}
/**
 * * `success` - success * `error` - error
 * @export
 * @enum {string}
 */

export enum Status524Enum {
    success = 'success',
    error = 'error'
}


/**
 * * `pending` - Pending * `accepted` - Accepted * `rejected` - Rejected * `withdrawn` - Withdrawn
 * @export
 * @enum {string}
 */

export enum StatusC50Enum {
    pending = 'pending',
    accepted = 'accepted',
    rejected = 'rejected',
    withdrawn = 'withdrawn'
}


/**
 * Serializer for support FAQ items.
 * @export
 * @interface SupportFAQ
 */
export interface SupportFAQ {
    /**
     * 
     * @type {number}
     * @memberof SupportFAQ
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof SupportFAQ
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof SupportFAQ
     */
    'answer': string;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof SupportFAQ
     */
    'category'?: CategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof SupportFAQ
     */
    'category_display': string;
    /**
     * 
     * @type {number}
     * @memberof SupportFAQ
     */
    'language'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SupportFAQ
     */
    'sort_order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SupportFAQ
     */
    'is_popular'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SupportFAQ
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SupportFAQ
     */
    'view_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof SupportFAQ
     */
    'created_at': string;
}
/**
 * Serializer for creating and updating support FAQ items.
 * @export
 * @interface SupportFAQCreateUpdate
 */
export interface SupportFAQCreateUpdate {
    /**
     * 
     * @type {string}
     * @memberof SupportFAQCreateUpdate
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof SupportFAQCreateUpdate
     */
    'answer': string;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof SupportFAQCreateUpdate
     */
    'category'?: CategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof SupportFAQCreateUpdate
     */
    'sort_order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SupportFAQCreateUpdate
     */
    'is_popular'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SupportFAQCreateUpdate
     */
    'is_active'?: boolean;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface SystemSettings
 */
export interface SystemSettings {
    /**
     * 
     * @type {number}
     * @memberof SystemSettings
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettings
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettings
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettings
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SystemSettings
     */
    'is_public'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SystemSettings
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {SettingTypeEnum}
     * @memberof SystemSettings
     */
    'setting_type'?: SettingTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SystemSettings
     */
    'setting_type_display': string;
}
/**
 * Serializer for creating and updating system settings.
 * @export
 * @interface SystemSettingsCreateUpdate
 */
export interface SystemSettingsCreateUpdate {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SystemSettingsCreateUpdate
     */
    'is_public'?: boolean;
    /**
     * 
     * @type {SettingTypeEnum}
     * @memberof SystemSettingsCreateUpdate
     */
    'setting_type'?: SettingTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'validation_regex'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'min_value'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'max_value'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SystemSettingsCreateUpdate
     */
    'requires_admin'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'category'?: string;
}
/**
 * * `low` - Low * `medium` - Medium * `high` - High * `urgent` - Urgent
 * @export
 * @enum {string}
 */

export enum UrgencyEnum {
    low = 'low',
    medium = 'medium',
    high = 'high',
    urgent = 'urgent'
}


/**
 * Serializer for user profile information - enhanced version of api_users
 * @export
 * @interface UserDetail
 */
export interface UserDetail {
    /**
     * 
     * @type {number}
     * @memberof UserDetail
     */
    'id': number;
    /**
     * Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
     * @type {string}
     * @memberof UserDetail
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'date_joined': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'last_login': string | null;
    /**
     * Отметьте, если пользователь должен считаться активным. Уберите эту отметку вместо удаления учётной записи.
     * @type {boolean}
     * @memberof UserDetail
     */
    'is_active'?: boolean;
    /**
     * Отметьте, если пользователь может входить в административную часть сайта.
     * @type {boolean}
     * @memberof UserDetail
     */
    'is_staff': boolean;
    /**
     * Указывает, что пользователь имеет все права без явного их назначения.
     * @type {boolean}
     * @memberof UserDetail
     */
    'is_superuser': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'groups': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'permissions': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'photo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'photo_url'?: string | null;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface UserDetailChild
 */
export interface UserDetailChild {
    /**
     * 
     * @type {number}
     * @memberof UserDetailChild
     */
    'id': number;
    /**
     * Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
     * @type {string}
     * @memberof UserDetailChild
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailChild
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailChild
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailChild
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailChild
     */
    'photo_url': string | null;
}
/**
 * Serializer for user notification settings.
 * @export
 * @interface UserNotificationSettings
 */
export interface UserNotificationSettings {
    /**
     * 
     * @type {number}
     * @memberof UserNotificationSettings
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'sms_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'push_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'email_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'task_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'specialist_messages'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'task_updates'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'marketing_emails'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'promotional_sms'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'newsletter'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'system_alerts'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'security_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'quiet_hours_enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserNotificationSettings
     */
    'quiet_hours_start'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserNotificationSettings
     */
    'quiet_hours_end'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserNotificationSettings
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof UserNotificationSettings
     */
    'updated_at': string;
}
/**
 * Serializer for user profile display
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * 
     * @type {number}
     * @memberof UserProfile
     */
    'id': number;
    /**
     * Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
     * @type {string}
     * @memberof UserProfile
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'photo_url'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserProfile
     */
    'groups': Array<string>;
}
/**
 * Serializer for updating user profile - enhanced version of api_users EditUserSettingsView
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'photo_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'last_name'?: string;
}
/**
 * 
 * @export
 * @interface Wrapper
 */
export interface Wrapper {
    /**
     * 
     * @type {WrapperAssignment}
     * @memberof Wrapper
     */
    'assignment': WrapperAssignment;
}
/**
 * 
 * @export
 * @interface WrapperAssignment
 */
export interface WrapperAssignment {
    /**
     * 
     * @type {number}
     * @memberof WrapperAssignment
     */
    'id': number;
    /**
     * 
     * @type {JobAssignmentStatusEnum}
     * @memberof WrapperAssignment
     */
    'status'?: JobAssignmentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof WrapperAssignment
     */
    'assigned_at': string;
    /**
     * 
     * @type {string}
     * @memberof WrapperAssignment
     */
    'started_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WrapperAssignment
     */
    'completed_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WrapperAssignment
     */
    'progress_notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof WrapperAssignment
     */
    'completion_notes'?: string;
    /**
     * 
     * @type {number}
     * @memberof WrapperAssignment
     */
    'client_rating'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof WrapperAssignment
     */
    'client_review'?: string;
    /**
     * 
     * @type {JobApplicationJob}
     * @memberof WrapperAssignment
     */
    'job': JobApplicationJob;
    /**
     * 
     * @type {JobAssignmentMaster}
     * @memberof WrapperAssignment
     */
    'master': JobAssignmentMaster;
    /**
     * 
     * @type {JobAssignmentAcceptedApplication}
     * @memberof WrapperAssignment
     */
    'accepted_application': JobAssignmentAcceptedApplication;
}

/**
 * SchemaApi - axios parameter creator
 * @export
 */
export const SchemaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve: async (format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchemaApi - functional programming interface
 * @export
 */
export const SchemaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchemaApiAxiosParamCreator(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schemaRetrieve(format, lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchemaApi - factory interface
 * @export
 */
export const SchemaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchemaApiFp(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.schemaRetrieve(format, lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchemaApi - interface
 * @export
 * @interface SchemaApi
 */
export interface SchemaApiInterface {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {'json' | 'yaml'} [format] 
     * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApiInterface
     */
    schemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

}

/**
 * Request parameters for schemaRetrieve operation in SchemaApi.
 * @export
 * @interface SchemaApiSchemaRetrieveRequest
 */
export interface SchemaApiSchemaRetrieveRequest {
    /**
     * 
     * @type {'json' | 'yaml'}
     * @memberof SchemaApiSchemaRetrieve
     */
    readonly format?: 'json' | 'yaml'

    /**
     * 
     * @type {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'}
     * @memberof SchemaApiSchemaRetrieve
     */
    readonly lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'
}

/**
 * SchemaApi - object-oriented interface
 * @export
 * @class SchemaApi
 * @extends {BaseAPI}
 */
export class SchemaApi extends BaseAPI implements SchemaApiInterface {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {SchemaApiSchemaRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    public schemaRetrieve(requestParameters: SchemaApiSchemaRetrieveRequest = {}, options?: AxiosRequestConfig) {
        return SchemaApiFp(this.configuration).schemaRetrieve(requestParameters.format, requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1Api - axios parameter creator
 * @export
 */
export const V1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accept a job application
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsAcceptCreate: async (id: number, jobApplication: JobApplication, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsAcceptCreate', 'id', id)
            // verify required parameter 'jobApplication' is not null or undefined
            assertParamExists('v1ApplicationsAcceptCreate', 'jobApplication', jobApplication)
            const localVarPath = `/api/v1/applications/{id}/accept/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobApplication, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing job applications.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsCreate: async (jobApplication: JobApplication, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobApplication' is not null or undefined
            assertParamExists('v1ApplicationsCreate', 'jobApplication', jobApplication)
            const localVarPath = `/api/v1/applications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobApplication, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsDestroy', 'id', id)
            const localVarPath = `/api/v1/applications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} [amountMax] 
         * @param {number} [amountMin] 
         * @param {string} [appliedAtAfter] 
         * @param {string} [appliedAtBefore] 
         * @param {number} [jobServiceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [jobUrgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {number} [jobId] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {'accepted' | 'pending' | 'rejected' | 'withdrawn'} [status] * &#x60;pending&#x60; - Pending * &#x60;accepted&#x60; - Accepted * &#x60;rejected&#x60; - Rejected * &#x60;withdrawn&#x60; - Withdrawn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsList: async (amountMax?: number, amountMin?: number, appliedAtAfter?: string, appliedAtBefore?: string, jobServiceSubcategory?: number, jobUrgency?: 'high' | 'low' | 'medium' | 'urgent', jobId?: number, ordering?: string, page?: number, pageSize?: number, search?: string, status?: 'accepted' | 'pending' | 'rejected' | 'withdrawn', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/applications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (amountMax !== undefined) {
                localVarQueryParameter['amount_max'] = amountMax;
            }

            if (amountMin !== undefined) {
                localVarQueryParameter['amount_min'] = amountMin;
            }

            if (appliedAtAfter !== undefined) {
                localVarQueryParameter['applied_at_after'] = (appliedAtAfter as any instanceof Date) ?
                    (appliedAtAfter as any).toISOString().substr(0,10) :
                    appliedAtAfter;
            }

            if (appliedAtBefore !== undefined) {
                localVarQueryParameter['applied_at_before'] = (appliedAtBefore as any instanceof Date) ?
                    (appliedAtBefore as any).toISOString().substr(0,10) :
                    appliedAtBefore;
            }

            if (jobServiceSubcategory !== undefined) {
                localVarQueryParameter['job__service_subcategory'] = jobServiceSubcategory;
            }

            if (jobUrgency !== undefined) {
                localVarQueryParameter['job__urgency'] = jobUrgency;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {PatchedJobApplication} [patchedJobApplication] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsPartialUpdate: async (id: number, patchedJobApplication?: PatchedJobApplication, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/applications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedJobApplication, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reject a job application
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsRejectCreate: async (id: number, jobApplication: JobApplication, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsRejectCreate', 'id', id)
            // verify required parameter 'jobApplication' is not null or undefined
            assertParamExists('v1ApplicationsRejectCreate', 'jobApplication', jobApplication)
            const localVarPath = `/api/v1/applications/{id}/reject/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobApplication, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsRetrieve', 'id', id)
            const localVarPath = `/api/v1/applications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsUpdate: async (id: number, jobApplication: JobApplication, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsUpdate', 'id', id)
            // verify required parameter 'jobApplication' is not null or undefined
            assertParamExists('v1ApplicationsUpdate', 'jobApplication', jobApplication)
            const localVarPath = `/api/v1/applications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobApplication, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw a job by master
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsWithdrawCreate: async (id: number, jobApplication: JobApplication, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsWithdrawCreate', 'id', id)
            // verify required parameter 'jobApplication' is not null or undefined
            assertParamExists('v1ApplicationsWithdrawCreate', 'jobApplication', jobApplication)
            const localVarPath = `/api/v1/applications/{id}/withdraw/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobApplication, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JobAssignment} [jobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsCreate: async (jobAssignment?: JobAssignment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/assignments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobAssignment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AssignmentsDestroy', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/assignments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {PatchedJobAssignment} [patchedJobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsPartialUpdate: async (id: number, patchedJobAssignment?: PatchedJobAssignment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AssignmentsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedJobAssignment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rate a completed job assignment
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {Rating} [rating] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsRateCreate: async (id: number, rating?: Rating, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AssignmentsRateCreate', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/rate/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rating, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AssignmentsRetrieve', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {JobAssignment} [jobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsUpdate: async (id: number, jobAssignment?: JobAssignment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AssignmentsUpdate', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobAssignment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update progress notes for an assignment
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {PatchedProgressUpdate} [patchedProgressUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsUpdateProgressPartialUpdate: async (id: number, patchedProgressUpdate?: PatchedProgressUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AssignmentsUpdateProgressPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/update_progress/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedProgressUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authenticate or register a user using Firebase ID token.
         * @param {FireBaseAuth} fireBaseAuth 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthFirebaseCreate: async (fireBaseAuth: FireBaseAuth, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fireBaseAuth' is not null or undefined
            assertParamExists('v1AuthFirebaseCreate', 'fireBaseAuth', fireBaseAuth)
            const localVarPath = `/api/v1/auth/firebase/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fireBaseAuth, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * User logout view - enhanced version of api_users LogOutView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthLogoutCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add participants to chat room
         * @param {string} id 
         * @param {ChatRoom} chatRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsAddParticipants: async (id: string, chatRoom: ChatRoom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsAddParticipants', 'id', id)
            // verify required parameter 'chatRoom' is not null or undefined
            assertParamExists('v1ChatsRoomsAddParticipants', 'chatRoom', chatRoom)
            const localVarPath = `/api/v1/chats/rooms/{id}/add_participants/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatRoom, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing chat rooms
         * @param {ChatRoomCreate} chatRoomCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsCreate: async (chatRoomCreate: ChatRoomCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatRoomCreate' is not null or undefined
            assertParamExists('v1ChatsRoomsCreate', 'chatRoomCreate', chatRoomCreate)
            const localVarPath = `/api/v1/chats/rooms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatRoomCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a message from chat room
         * @param {string} id 
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsDeleteMessage: async (id: string, messageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsDeleteMessage', 'id', id)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('v1ChatsRoomsDeleteMessage', 'messageId', messageId)
            const localVarPath = `/api/v1/chats/rooms/{id}/messages/{message_id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsDestroy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsDestroy', 'id', id)
            const localVarPath = `/api/v1/chats/rooms/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit a message in chat room
         * @param {string} id 
         * @param {string} messageId 
         * @param {PatchedChatRoom} [patchedChatRoom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsEditMessage: async (id: string, messageId: string, patchedChatRoom?: PatchedChatRoom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsEditMessage', 'id', id)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('v1ChatsRoomsEditMessage', 'messageId', messageId)
            const localVarPath = `/api/v1/chats/rooms/{id}/messages/{message_id}/edit/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"message_id"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedChatRoom, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Leave a chat room
         * @param {string} id 
         * @param {ChatRoom} chatRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsLeave: async (id: string, chatRoom: ChatRoom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsLeave', 'id', id)
            // verify required parameter 'chatRoom' is not null or undefined
            assertParamExists('v1ChatsRoomsLeave', 'chatRoom', chatRoom)
            const localVarPath = `/api/v1/chats/rooms/{id}/leave/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatRoom, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/chats/rooms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all messages in a chat room with filtering and search
         * @param {string} id 
         * @param {string} [messageType] Filter by message type
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] Search in message content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessages: async (id: string, messageType?: string, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsMessages', 'id', id)
            const localVarPath = `/api/v1/chats/rooms/{id}/messages/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (messageType !== undefined) {
                localVarQueryParameter['message_type'] = messageType;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {PatchedChatRoom} [patchedChatRoom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsPartialUpdate: async (id: string, patchedChatRoom?: PatchedChatRoom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/chats/rooms/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedChatRoom, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsRetrieve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsRetrieve', 'id', id)
            const localVarPath = `/api/v1/chats/rooms/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send message to chat room
         * @param {string} id 
         * @param {MessageCreate} messageCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsSendMessage: async (id: string, messageCreate: MessageCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsSendMessage', 'id', id)
            // verify required parameter 'messageCreate' is not null or undefined
            assertParamExists('v1ChatsRoomsSendMessage', 'messageCreate', messageCreate)
            const localVarPath = `/api/v1/chats/rooms/{id}/send_message/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {ChatRoom} chatRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsUpdate: async (id: string, chatRoom: ChatRoom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsUpdate', 'id', id)
            // verify required parameter 'chatRoom' is not null or undefined
            assertParamExists('v1ChatsRoomsUpdate', 'chatRoom', chatRoom)
            const localVarPath = `/api/v1/chats/rooms/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatRoom, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Languages - Read-only (managed via admin/fixtures).
         * @param {boolean} [isActive] 
         * @param {boolean} [isDefault] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreLanguagesList: async (isActive?: boolean, isDefault?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/core/languages/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (isDefault !== undefined) {
                localVarQueryParameter['is_default'] = isDefault;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Languages - Read-only (managed via admin/fixtures).
         * @param {number} id A unique integer value identifying this Language.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreLanguagesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreLanguagesRetrieve', 'id', id)
            const localVarPath = `/api/v1/core/languages/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {ServiceAreaCreateUpdate} serviceAreaCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasCreate: async (serviceAreaCreateUpdate: ServiceAreaCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceAreaCreateUpdate' is not null or undefined
            assertParamExists('v1CoreServiceAreasCreate', 'serviceAreaCreateUpdate', serviceAreaCreateUpdate)
            const localVarPath = `/api/v1/core/service-areas/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceAreaCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceAreasDestroy', 'id', id)
            const localVarPath = `/api/v1/core/service-areas/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasList: async (isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/core/service-areas/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {PatchedServiceAreaCreateUpdate} [patchedServiceAreaCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasPartialUpdate: async (id: number, patchedServiceAreaCreateUpdate?: PatchedServiceAreaCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceAreasPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/core/service-areas/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedServiceAreaCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceAreasRetrieve', 'id', id)
            const localVarPath = `/api/v1/core/service-areas/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {ServiceAreaCreateUpdate} serviceAreaCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasUpdate: async (id: number, serviceAreaCreateUpdate: ServiceAreaCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceAreasUpdate', 'id', id)
            // verify required parameter 'serviceAreaCreateUpdate' is not null or undefined
            assertParamExists('v1CoreServiceAreasUpdate', 'serviceAreaCreateUpdate', serviceAreaCreateUpdate)
            const localVarPath = `/api/v1/core/service-areas/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceAreaCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {ServiceCategoryCreateUpdate} serviceCategoryCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesCreate: async (serviceCategoryCreateUpdate: ServiceCategoryCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceCategoryCreateUpdate' is not null or undefined
            assertParamExists('v1CoreServiceCategoriesCreate', 'serviceCategoryCreateUpdate', serviceCategoryCreateUpdate)
            const localVarPath = `/api/v1/core/service-categories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceCategoryCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceCategoriesDestroy', 'id', id)
            const localVarPath = `/api/v1/core/service-categories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {boolean} [featured] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesList: async (featured?: boolean, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/core/service-categories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (featured !== undefined) {
                localVarQueryParameter['featured'] = featured;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {PatchedServiceCategoryCreateUpdate} [patchedServiceCategoryCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesPartialUpdate: async (id: number, patchedServiceCategoryCreateUpdate?: PatchedServiceCategoryCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceCategoriesPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/core/service-categories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedServiceCategoryCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceCategoriesRetrieve', 'id', id)
            const localVarPath = `/api/v1/core/service-categories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {ServiceCategoryCreateUpdate} serviceCategoryCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesUpdate: async (id: number, serviceCategoryCreateUpdate: ServiceCategoryCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceCategoriesUpdate', 'id', id)
            // verify required parameter 'serviceCategoryCreateUpdate' is not null or undefined
            assertParamExists('v1CoreServiceCategoriesUpdate', 'serviceCategoryCreateUpdate', serviceCategoryCreateUpdate)
            const localVarPath = `/api/v1/core/service-categories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceCategoryCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {ServiceSubcategoryCreateUpdate} serviceSubcategoryCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesCreate: async (serviceSubcategoryCreateUpdate: ServiceSubcategoryCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceSubcategoryCreateUpdate' is not null or undefined
            assertParamExists('v1CoreServiceSubcategoriesCreate', 'serviceSubcategoryCreateUpdate', serviceSubcategoryCreateUpdate)
            const localVarPath = `/api/v1/core/service-subcategories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceSubcategoryCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceSubcategoriesDestroy', 'id', id)
            const localVarPath = `/api/v1/core/service-subcategories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} [category] 
         * @param {boolean} [featured] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesList: async (category?: number, featured?: boolean, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/core/service-subcategories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (featured !== undefined) {
                localVarQueryParameter['featured'] = featured;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {PatchedServiceSubcategoryCreateUpdate} [patchedServiceSubcategoryCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesPartialUpdate: async (id: number, patchedServiceSubcategoryCreateUpdate?: PatchedServiceSubcategoryCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceSubcategoriesPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/core/service-subcategories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedServiceSubcategoryCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceSubcategoriesRetrieve', 'id', id)
            const localVarPath = `/api/v1/core/service-subcategories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {ServiceSubcategoryCreateUpdate} serviceSubcategoryCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesUpdate: async (id: number, serviceSubcategoryCreateUpdate: ServiceSubcategoryCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceSubcategoriesUpdate', 'id', id)
            // verify required parameter 'serviceSubcategoryCreateUpdate' is not null or undefined
            assertParamExists('v1CoreServiceSubcategoriesUpdate', 'serviceSubcategoryCreateUpdate', serviceSubcategoryCreateUpdate)
            const localVarPath = `/api/v1/core/service-subcategories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceSubcategoryCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {SupportFAQCreateUpdate} supportFAQCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqCreate: async (supportFAQCreateUpdate: SupportFAQCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'supportFAQCreateUpdate' is not null or undefined
            assertParamExists('v1CoreSupportFaqCreate', 'supportFAQCreateUpdate', supportFAQCreateUpdate)
            const localVarPath = `/api/v1/core/support/faq/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(supportFAQCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSupportFaqDestroy', 'id', id)
            const localVarPath = `/api/v1/core/support/faq/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist'} [category] * &#x60;general&#x60; - Основная информация * &#x60;specialist&#x60; - Specialist * &#x60;reviews&#x60; - Reviews * &#x60;account&#x60; - Аккаунт * &#x60;search&#x60; - Найти * &#x60;safety&#x60; - Safety
         * @param {boolean} [isActive] 
         * @param {number} [language] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqList: async (category?: 'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist', isActive?: boolean, language?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/core/support/faq/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {PatchedSupportFAQCreateUpdate} [patchedSupportFAQCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqPartialUpdate: async (id: number, patchedSupportFAQCreateUpdate?: PatchedSupportFAQCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSupportFaqPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/core/support/faq/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedSupportFAQCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSupportFaqRetrieve', 'id', id)
            const localVarPath = `/api/v1/core/support/faq/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {SupportFAQCreateUpdate} supportFAQCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqUpdate: async (id: number, supportFAQCreateUpdate: SupportFAQCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSupportFaqUpdate', 'id', id)
            // verify required parameter 'supportFAQCreateUpdate' is not null or undefined
            assertParamExists('v1CoreSupportFaqUpdate', 'supportFAQCreateUpdate', supportFAQCreateUpdate)
            const localVarPath = `/api/v1/core/support/faq/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(supportFAQCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {SystemSettingsCreateUpdate} systemSettingsCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsCreate: async (systemSettingsCreateUpdate: SystemSettingsCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSettingsCreateUpdate' is not null or undefined
            assertParamExists('v1CoreSystemSettingsCreate', 'systemSettingsCreateUpdate', systemSettingsCreateUpdate)
            const localVarPath = `/api/v1/core/system-settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemSettingsCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSystemSettingsDestroy', 'id', id)
            const localVarPath = `/api/v1/core/system-settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {string} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsList: async (category?: string, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/core/system-settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {PatchedSystemSettingsCreateUpdate} [patchedSystemSettingsCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsPartialUpdate: async (id: number, patchedSystemSettingsCreateUpdate?: PatchedSystemSettingsCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSystemSettingsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/core/system-settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedSystemSettingsCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSystemSettingsRetrieve', 'id', id)
            const localVarPath = `/api/v1/core/system-settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {SystemSettingsCreateUpdate} systemSettingsCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsUpdate: async (id: number, systemSettingsCreateUpdate: SystemSettingsCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSystemSettingsUpdate', 'id', id)
            // verify required parameter 'systemSettingsCreateUpdate' is not null or undefined
            assertParamExists('v1CoreSystemSettingsUpdate', 'systemSettingsCreateUpdate', systemSettingsCreateUpdate)
            const localVarPath = `/api/v1/core/system-settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemSettingsCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Complete an assignment
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {JobAssignment} [jobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobAssignmentsComplete: async (id: number, jobAssignment?: JobAssignment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobAssignmentsComplete', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/complete/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobAssignment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start an assignment
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {JobAssignment} [jobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobAssignmentsStart: async (id: number, jobAssignment?: JobAssignment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobAssignmentsStart', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/start/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobAssignment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Apply to a job.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobApply} jobApply 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsApply: async (id: number, jobApply: JobApply, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsApply', 'id', id)
            // verify required parameter 'jobApply' is not null or undefined
            assertParamExists('v1JobsApply', 'jobApply', jobApply)
            const localVarPath = `/api/v1/jobs/{id}/apply/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobApply, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Toggle bookmark status for a job
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsBookmark: async (id: number, job: Job, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsBookmark', 'id', id)
            // verify required parameter 'job' is not null or undefined
            assertParamExists('v1JobsBookmark', 'job', job)
            const localVarPath = `/api/v1/jobs/{id}/bookmark/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(job, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel a job. Only allowed if job is in PUBLISHED or ASSIGNED state.
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsCancel: async (id: number, job: Job, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsCancel', 'id', id)
            // verify required parameter 'job' is not null or undefined
            assertParamExists('v1JobsCancel', 'job', job)
            const localVarPath = `/api/v1/jobs/{id}/cancel/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(job, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing jobs.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsCreate: async (job: Job, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'job' is not null or undefined
            assertParamExists('v1JobsCreate', 'job', job)
            const localVarPath = `/api/v1/jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(job, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsDestroy', 'id', id)
            const localVarPath = `/api/v1/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Toggle favorite status for a job
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsFavorite: async (id: number, job: Job, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsFavorite', 'id', id)
            // verify required parameter 'job' is not null or undefined
            assertParamExists('v1JobsFavorite', 'job', job)
            const localVarPath = `/api/v1/jobs/{id}/favorite/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(job, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing jobs.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceSubcategory] 
         * @param {'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published'} [status] * &#x60;draft&#x60; - Draft * &#x60;published&#x60; - Published * &#x60;assigned&#x60; - Assigned * &#x60;in_progress&#x60; - In Progress * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsList: async (ordering?: string, page?: number, pageSize?: number, search?: string, serviceSubcategory?: number, status?: 'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published', urgency?: 'high' | 'low' | 'medium' | 'urgent', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (serviceSubcategory !== undefined) {
                localVarQueryParameter['service_subcategory'] = serviceSubcategory;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (urgency !== undefined) {
                localVarQueryParameter['urgency'] = urgency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {PatchedJob} [patchedJob] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsPartialUpdate: async (id: number, patchedJob?: PatchedJob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedJob, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish a draft job. Only allowed if job is in DRAFT state.
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsPublish: async (id: number, job: Job, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsPublish', 'id', id)
            // verify required parameter 'job' is not null or undefined
            assertParamExists('v1JobsPublish', 'job', job)
            const localVarPath = `/api/v1/jobs/{id}/publish/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(job, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsRetrieve', 'id', id)
            const localVarPath = `/api/v1/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsUpdate: async (id: number, job: Job, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsUpdate', 'id', id)
            // verify required parameter 'job' is not null or undefined
            assertParamExists('v1JobsUpdate', 'job', job)
            const localVarPath = `/api/v1/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(job, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [country] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesList: async (country?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/locations/cities/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this City.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1LocationsCitiesRetrieve', 'id', id)
            const localVarPath = `/api/v1/locations/cities/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/locations/countries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1LocationsCountriesRetrieve', 'id', id)
            const localVarPath = `/api/v1/locations/countries/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get notification counts for current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsCount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications/count/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {NotificationCreate} notificationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsCreate: async (notificationCreate: NotificationCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationCreate' is not null or undefined
            assertParamExists('v1NotificationsCreate', 'notificationCreate', notificationCreate)
            const localVarPath = `/api/v1/notifications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsDestroy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1NotificationsDestroy', 'id', id)
            const localVarPath = `/api/v1/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark all notifications as read for current user
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsMarkAllRead: async (notification: Notification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notification' is not null or undefined
            assertParamExists('v1NotificationsMarkAllRead', 'notification', notification)
            const localVarPath = `/api/v1/notifications/mark-all-read/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark specific notification as read
         * @param {string} id 
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsMarkRead: async (id: string, notification: Notification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1NotificationsMarkRead', 'id', id)
            // verify required parameter 'notification' is not null or undefined
            assertParamExists('v1NotificationsMarkRead', 'notification', notification)
            const localVarPath = `/api/v1/notifications/{id}/mark-read/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark specific notification as unread
         * @param {string} id 
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsMarkUnread: async (id: string, notification: Notification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1NotificationsMarkUnread', 'id', id)
            // verify required parameter 'notification' is not null or undefined
            assertParamExists('v1NotificationsMarkUnread', 'notification', notification)
            const localVarPath = `/api/v1/notifications/{id}/mark-unread/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {PatchedNotificationUpdate} [patchedNotificationUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsPartialUpdate: async (id: string, patchedNotificationUpdate?: PatchedNotificationUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1NotificationsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedNotificationUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get recent notifications (last 7 days)
         * @param {number} [days] Number of days to look back
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsRecent: async (days?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications/recent/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsRetrieve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1NotificationsRetrieve', 'id', id)
            const localVarPath = `/api/v1/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get unread notifications for current user
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsUnread: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications/unread/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {NotificationUpdate} [notificationUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsUpdate: async (id: string, notificationUpdate?: NotificationUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1NotificationsUpdate', 'id', id)
            const localVarPath = `/api/v1/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Base Action
         * @param {string} action 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileAvatarCreate: async (action: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'action' is not null or undefined
            assertParamExists('v1ProfileAvatarCreate', 'action', action)
            const localVarPath = `/api/v1/profile/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PatchedUserNotificationSettings} [patchedUserNotificationSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileNotificationSettingsPartialUpdate: async (patchedUserNotificationSettings?: PatchedUserNotificationSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile/notification-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedUserNotificationSettings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileNotificationSettingsRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile/notification-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserNotificationSettings} [userNotificationSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileNotificationSettingsUpdate: async (userNotificationSettings?: UserNotificationSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile/notification-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userNotificationSettings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PatchedUserUpdate} [patchedUserUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfilePartialUpdate: async (patchedUserUpdate?: PatchedUserUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedUserUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserUpdate} [userUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileUpdate: async (userUpdate?: UserUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Archive a published resume.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResume} masterResume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesArchive: async (id: number, masterResume: MasterResume, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ResumesArchive', 'id', id)
            // verify required parameter 'masterResume' is not null or undefined
            assertParamExists('v1ResumesArchive', 'masterResume', masterResume)
            const localVarPath = `/api/v1/resumes/{id}/archive/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterResume, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {MasterResume} masterResume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesCreate: async (masterResume: MasterResume, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterResume' is not null or undefined
            assertParamExists('v1ResumesCreate', 'masterResume', masterResume)
            const localVarPath = `/api/v1/resumes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterResume, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ResumesDestroy', 'id', id)
            const localVarPath = `/api/v1/resumes/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/resumes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {PatchedMasterResume} [patchedMasterResume] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesPartialUpdate: async (id: number, patchedMasterResume?: PatchedMasterResume, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ResumesPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/resumes/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMasterResume, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish a draft resume. Only allowed if in DRAFT state.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResume} masterResume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesPublish: async (id: number, masterResume: MasterResume, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ResumesPublish', 'id', id)
            // verify required parameter 'masterResume' is not null or undefined
            assertParamExists('v1ResumesPublish', 'masterResume', masterResume)
            const localVarPath = `/api/v1/resumes/{id}/publish/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterResume, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ResumesRetrieve', 'id', id)
            const localVarPath = `/api/v1/resumes/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResume} masterResume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesUpdate: async (id: number, masterResume: MasterResume, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ResumesUpdate', 'id', id)
            // verify required parameter 'masterResume' is not null or undefined
            assertParamExists('v1ResumesUpdate', 'masterResume', masterResume)
            const localVarPath = `/api/v1/resumes/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterResume, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve public service provider profile.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMastersDetailsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMastersDetailsRetrieve', 'id', id)
            const localVarPath = `/api/v1/users/masters/{id}/details/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for certificates.
         * @param {Certificate} certificate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesCreate: async (certificate: Certificate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificate' is not null or undefined
            assertParamExists('v1UsersMyCertificatesCreate', 'certificate', certificate)
            const localVarPath = `/api/v1/users/my/certificates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(certificate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesDestroy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyCertificatesDestroy', 'id', id)
            const localVarPath = `/api/v1/users/my/certificates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for certificates.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/certificates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {PatchedCertificate} [patchedCertificate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesPartialUpdate: async (id: string, patchedCertificate?: PatchedCertificate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyCertificatesPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/users/my/certificates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedCertificate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesRetrieve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyCertificatesRetrieve', 'id', id)
            const localVarPath = `/api/v1/users/my/certificates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {Certificate} certificate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesUpdate: async (id: string, certificate: Certificate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyCertificatesUpdate', 'id', id)
            // verify required parameter 'certificate' is not null or undefined
            assertParamExists('v1UsersMyCertificatesUpdate', 'certificate', certificate)
            const localVarPath = `/api/v1/users/my/certificates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(certificate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmployerProfileCreateUpdate} [employerProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerCreateCreate: async (employerProfileCreateUpdate?: EmployerProfileCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/employer/create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employerProfileCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PatchedEmployerProfileCreateUpdate} [patchedEmployerProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerPartialUpdate: async (patchedEmployerProfileCreateUpdate?: PatchedEmployerProfileCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/employer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedEmployerProfileCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/employer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmployerProfileCreateUpdate} [employerProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerUpdate: async (employerProfileCreateUpdate?: EmployerProfileCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/employer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employerProfileCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MasterProfileCreateUpdate} [masterProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterCreateCreate: async (masterProfileCreateUpdate?: MasterProfileCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/master/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterProfileCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PatchedMasterProfileCreateUpdate} [patchedMasterProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterPartialUpdate: async (patchedMasterProfileCreateUpdate?: PatchedMasterProfileCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/master/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMasterProfileCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/master/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MasterProfileCreateUpdate} [masterProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterUpdate: async (masterProfileCreateUpdate?: MasterProfileCreateUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/master/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterProfileCreateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master portfolio items.
         * @param {PortfolioItem} portfolioItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioCreate: async (portfolioItem: PortfolioItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioItem' is not null or undefined
            assertParamExists('v1UsersMyPortfolioCreate', 'portfolioItem', portfolioItem)
            const localVarPath = `/api/v1/users/my/portfolio/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(portfolioItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioDestroy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyPortfolioDestroy', 'id', id)
            const localVarPath = `/api/v1/users/my/portfolio/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/portfolio/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {PatchedPortfolioItem} [patchedPortfolioItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioPartialUpdate: async (id: string, patchedPortfolioItem?: PatchedPortfolioItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyPortfolioPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/users/my/portfolio/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedPortfolioItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioRetrieve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyPortfolioRetrieve', 'id', id)
            const localVarPath = `/api/v1/users/my/portfolio/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {PortfolioItem} portfolioItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioUpdate: async (id: string, portfolioItem: PortfolioItem, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyPortfolioUpdate', 'id', id)
            // verify required parameter 'portfolioItem' is not null or undefined
            assertParamExists('v1UsersMyPortfolioUpdate', 'portfolioItem', portfolioItem)
            const localVarPath = `/api/v1/users/my/portfolio/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(portfolioItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master skills.
         * @param {MasterSkill} masterSkill 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsCreate: async (masterSkill: MasterSkill, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterSkill' is not null or undefined
            assertParamExists('v1UsersMySkillsCreate', 'masterSkill', masterSkill)
            const localVarPath = `/api/v1/users/my/skills/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterSkill, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsDestroy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMySkillsDestroy', 'id', id)
            const localVarPath = `/api/v1/users/my/skills/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master skills.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/skills/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {PatchedMasterSkill} [patchedMasterSkill] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsPartialUpdate: async (id: string, patchedMasterSkill?: PatchedMasterSkill, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMySkillsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/users/my/skills/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMasterSkill, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsRetrieve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMySkillsRetrieve', 'id', id)
            const localVarPath = `/api/v1/users/my/skills/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {MasterSkill} masterSkill 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsUpdate: async (id: string, masterSkill: MasterSkill, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMySkillsUpdate', 'id', id)
            // verify required parameter 'masterSkill' is not null or undefined
            assertParamExists('v1UsersMySkillsUpdate', 'masterSkill', masterSkill)
            const localVarPath = `/api/v1/users/my/skills/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterSkill, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update online status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyStatusCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all available professions.
         * @param {number} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersProfessionsList: async (category?: number, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/professions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all available skills.
         * @param {number} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersSkillsList: async (category?: number, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/skills/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1Api - functional programming interface
 * @export
 */
export const V1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Accept a job application
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsAcceptCreate(id: number, jobApplication: JobApplication, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplicationApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsAcceptCreate(id, jobApplication, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing job applications.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsCreate(jobApplication: JobApplication, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsCreate(jobApplication, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} [amountMax] 
         * @param {number} [amountMin] 
         * @param {string} [appliedAtAfter] 
         * @param {string} [appliedAtBefore] 
         * @param {number} [jobServiceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [jobUrgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {number} [jobId] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {'accepted' | 'pending' | 'rejected' | 'withdrawn'} [status] * &#x60;pending&#x60; - Pending * &#x60;accepted&#x60; - Accepted * &#x60;rejected&#x60; - Rejected * &#x60;withdrawn&#x60; - Withdrawn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsList(amountMax?: number, amountMin?: number, appliedAtAfter?: string, appliedAtBefore?: string, jobServiceSubcategory?: number, jobUrgency?: 'high' | 'low' | 'medium' | 'urgent', jobId?: number, ordering?: string, page?: number, pageSize?: number, search?: string, status?: 'accepted' | 'pending' | 'rejected' | 'withdrawn', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJobApplicationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsList(amountMax, amountMin, appliedAtAfter, appliedAtBefore, jobServiceSubcategory, jobUrgency, jobId, ordering, page, pageSize, search, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {PatchedJobApplication} [patchedJobApplication] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsPartialUpdate(id: number, patchedJobApplication?: PatchedJobApplication, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsPartialUpdate(id, patchedJobApplication, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reject a job application
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsRejectCreate(id: number, jobApplication: JobApplication, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplicationApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsRejectCreate(id, jobApplication, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsUpdate(id: number, jobApplication: JobApplication, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsUpdate(id, jobApplication, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Withdraw a job by master
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsWithdrawCreate(id: number, jobApplication: JobApplication, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplicationApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsWithdrawCreate(id, jobApplication, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {JobAssignment} [jobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsCreate(jobAssignment?: JobAssignment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsCreate(jobAssignment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJobAssignmentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {PatchedJobAssignment} [patchedJobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsPartialUpdate(id: number, patchedJobAssignment?: PatchedJobAssignment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsPartialUpdate(id, patchedJobAssignment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Rate a completed job assignment
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {Rating} [rating] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsRateCreate(id: number, rating?: Rating, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsRateCreate(id, rating, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {JobAssignment} [jobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsUpdate(id: number, jobAssignment?: JobAssignment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsUpdate(id, jobAssignment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update progress notes for an assignment
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {PatchedProgressUpdate} [patchedProgressUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsUpdateProgressPartialUpdate(id: number, patchedProgressUpdate?: PatchedProgressUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignmentApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsUpdateProgressPartialUpdate(id, patchedProgressUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Authenticate or register a user using Firebase ID token.
         * @param {FireBaseAuth} fireBaseAuth 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthFirebaseCreate(fireBaseAuth: FireBaseAuth, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirebaseAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthFirebaseCreate(fireBaseAuth, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * User logout view - enhanced version of api_users LogOutView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthLogoutCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthLogoutCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add participants to chat room
         * @param {string} id 
         * @param {ChatRoom} chatRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsAddParticipants(id: string, chatRoom: ChatRoom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsAddParticipants(id, chatRoom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing chat rooms
         * @param {ChatRoomCreate} chatRoomCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsCreate(chatRoomCreate: ChatRoomCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoomCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsCreate(chatRoomCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a message from chat room
         * @param {string} id 
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsDeleteMessage(id: string, messageId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsDeleteMessage(id, messageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsDestroy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit a message in chat room
         * @param {string} id 
         * @param {string} messageId 
         * @param {PatchedChatRoom} [patchedChatRoom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsEditMessage(id: string, messageId: string, patchedChatRoom?: PatchedChatRoom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsEditMessage(id, messageId, patchedChatRoom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Leave a chat room
         * @param {string} id 
         * @param {ChatRoom} chatRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsLeave(id: string, chatRoom: ChatRoom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsLeave(id, chatRoom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedChatRoomList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all messages in a chat room with filtering and search
         * @param {string} id 
         * @param {string} [messageType] Filter by message type
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] Search in message content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsMessages(id: string, messageType?: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMessageList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsMessages(id, messageType, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {PatchedChatRoom} [patchedChatRoom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsPartialUpdate(id: string, patchedChatRoom?: PatchedChatRoom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsPartialUpdate(id, patchedChatRoom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Send message to chat room
         * @param {string} id 
         * @param {MessageCreate} messageCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsSendMessage(id: string, messageCreate: MessageCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsSendMessage(id, messageCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {ChatRoom} chatRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsUpdate(id: string, chatRoom: ChatRoom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsUpdate(id, chatRoom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Languages - Read-only (managed via admin/fixtures).
         * @param {boolean} [isActive] 
         * @param {boolean} [isDefault] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreLanguagesList(isActive?: boolean, isDefault?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedLanguageList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreLanguagesList(isActive, isDefault, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Languages - Read-only (managed via admin/fixtures).
         * @param {number} id A unique integer value identifying this Language.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreLanguagesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Language>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreLanguagesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {ServiceAreaCreateUpdate} serviceAreaCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceAreasCreate(serviceAreaCreateUpdate: ServiceAreaCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAreaCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceAreasCreate(serviceAreaCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceAreasDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceAreasDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceAreasList(isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedServiceAreaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceAreasList(isActive, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {PatchedServiceAreaCreateUpdate} [patchedServiceAreaCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceAreasPartialUpdate(id: number, patchedServiceAreaCreateUpdate?: PatchedServiceAreaCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAreaCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceAreasPartialUpdate(id, patchedServiceAreaCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceAreasRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceArea>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceAreasRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {ServiceAreaCreateUpdate} serviceAreaCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceAreasUpdate(id: number, serviceAreaCreateUpdate: ServiceAreaCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAreaCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceAreasUpdate(id, serviceAreaCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {ServiceCategoryCreateUpdate} serviceCategoryCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceCategoriesCreate(serviceCategoryCreateUpdate: ServiceCategoryCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceCategoryCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceCategoriesCreate(serviceCategoryCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceCategoriesDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceCategoriesDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {boolean} [featured] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceCategoriesList(featured?: boolean, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedServiceCategoryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceCategoriesList(featured, isActive, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {PatchedServiceCategoryCreateUpdate} [patchedServiceCategoryCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceCategoriesPartialUpdate(id: number, patchedServiceCategoryCreateUpdate?: PatchedServiceCategoryCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceCategoryCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceCategoriesPartialUpdate(id, patchedServiceCategoryCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceCategoriesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceCategoriesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {ServiceCategoryCreateUpdate} serviceCategoryCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceCategoriesUpdate(id: number, serviceCategoryCreateUpdate: ServiceCategoryCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceCategoryCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceCategoriesUpdate(id, serviceCategoryCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {ServiceSubcategoryCreateUpdate} serviceSubcategoryCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceSubcategoriesCreate(serviceSubcategoryCreateUpdate: ServiceSubcategoryCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceSubcategoryCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceSubcategoriesCreate(serviceSubcategoryCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceSubcategoriesDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceSubcategoriesDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} [category] 
         * @param {boolean} [featured] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceSubcategoriesList(category?: number, featured?: boolean, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedServiceSubcategoryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceSubcategoriesList(category, featured, isActive, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {PatchedServiceSubcategoryCreateUpdate} [patchedServiceSubcategoryCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceSubcategoriesPartialUpdate(id: number, patchedServiceSubcategoryCreateUpdate?: PatchedServiceSubcategoryCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceSubcategoryCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceSubcategoriesPartialUpdate(id, patchedServiceSubcategoryCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceSubcategoriesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceSubcategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceSubcategoriesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {ServiceSubcategoryCreateUpdate} serviceSubcategoryCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceSubcategoriesUpdate(id: number, serviceSubcategoryCreateUpdate: ServiceSubcategoryCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceSubcategoryCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceSubcategoriesUpdate(id, serviceSubcategoryCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {SupportFAQCreateUpdate} supportFAQCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSupportFaqCreate(supportFAQCreateUpdate: SupportFAQCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportFAQCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSupportFaqCreate(supportFAQCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSupportFaqDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSupportFaqDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist'} [category] * &#x60;general&#x60; - Основная информация * &#x60;specialist&#x60; - Specialist * &#x60;reviews&#x60; - Reviews * &#x60;account&#x60; - Аккаунт * &#x60;search&#x60; - Найти * &#x60;safety&#x60; - Safety
         * @param {boolean} [isActive] 
         * @param {number} [language] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSupportFaqList(category?: 'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist', isActive?: boolean, language?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSupportFAQList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSupportFaqList(category, isActive, language, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {PatchedSupportFAQCreateUpdate} [patchedSupportFAQCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSupportFaqPartialUpdate(id: number, patchedSupportFAQCreateUpdate?: PatchedSupportFAQCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportFAQCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSupportFaqPartialUpdate(id, patchedSupportFAQCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSupportFaqRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportFAQ>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSupportFaqRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {SupportFAQCreateUpdate} supportFAQCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSupportFaqUpdate(id: number, supportFAQCreateUpdate: SupportFAQCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportFAQCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSupportFaqUpdate(id, supportFAQCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {SystemSettingsCreateUpdate} systemSettingsCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSystemSettingsCreate(systemSettingsCreateUpdate: SystemSettingsCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSystemSettingsCreate(systemSettingsCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSystemSettingsDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSystemSettingsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {string} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSystemSettingsList(category?: string, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSystemSettingsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSystemSettingsList(category, isActive, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {PatchedSystemSettingsCreateUpdate} [patchedSystemSettingsCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSystemSettingsPartialUpdate(id: number, patchedSystemSettingsCreateUpdate?: PatchedSystemSettingsCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSystemSettingsPartialUpdate(id, patchedSystemSettingsCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSystemSettingsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSystemSettingsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {SystemSettingsCreateUpdate} systemSettingsCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSystemSettingsUpdate(id: number, systemSettingsCreateUpdate: SystemSettingsCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSystemSettingsUpdate(id, systemSettingsCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Complete an assignment
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {JobAssignment} [jobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobAssignmentsComplete(id: number, jobAssignment?: JobAssignment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignmentApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobAssignmentsComplete(id, jobAssignment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Start an assignment
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {JobAssignment} [jobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobAssignmentsStart(id: number, jobAssignment?: JobAssignment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignmentApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobAssignmentsStart(id, jobAssignment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Apply to a job.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobApply} jobApply 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsApply(id: number, jobApply: JobApply, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsApply(id, jobApply, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Toggle bookmark status for a job
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsBookmark(id: number, job: Job, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsBookmark(id, job, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancel a job. Only allowed if job is in PUBLISHED or ASSIGNED state.
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsCancel(id: number, job: Job, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsCancel(id, job, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing jobs.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsCreate(job: Job, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsCreate(job, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Toggle favorite status for a job
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsFavorite(id: number, job: Job, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsFavorite(id, job, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing jobs.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceSubcategory] 
         * @param {'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published'} [status] * &#x60;draft&#x60; - Draft * &#x60;published&#x60; - Published * &#x60;assigned&#x60; - Assigned * &#x60;in_progress&#x60; - In Progress * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsList(ordering?: string, page?: number, pageSize?: number, search?: string, serviceSubcategory?: number, status?: 'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published', urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJobList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsList(ordering, page, pageSize, search, serviceSubcategory, status, urgency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {PatchedJob} [patchedJob] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsPartialUpdate(id: number, patchedJob?: PatchedJob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsPartialUpdate(id, patchedJob, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publish a draft job. Only allowed if job is in DRAFT state.
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsPublish(id: number, job: Job, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsPublish(id, job, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsUpdate(id: number, job: Job, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsUpdate(id, job, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [country] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCitiesList(country?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCityList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCitiesList(country, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this City.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCitiesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<City>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCitiesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCountriesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCountryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCountriesList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCountriesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCountriesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get notification counts for current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsCount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsCount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {NotificationCreate} notificationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsCreate(notificationCreate: NotificationCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsCreate(notificationCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsDestroy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedNotificationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mark all notifications as read for current user
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsMarkAllRead(notification: Notification, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsMarkAllRead(notification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mark specific notification as read
         * @param {string} id 
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsMarkRead(id: string, notification: Notification, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsMarkRead(id, notification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mark specific notification as unread
         * @param {string} id 
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsMarkUnread(id: string, notification: Notification, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsMarkUnread(id, notification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {PatchedNotificationUpdate} [patchedNotificationUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsPartialUpdate(id: string, patchedNotificationUpdate?: PatchedNotificationUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsPartialUpdate(id, patchedNotificationUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get recent notifications (last 7 days)
         * @param {number} [days] Number of days to look back
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsRecent(days?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedNotificationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsRecent(days, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get unread notifications for current user
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsUnread(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedNotificationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsUnread(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {NotificationUpdate} [notificationUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsUpdate(id: string, notificationUpdate?: NotificationUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsUpdate(id, notificationUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Base Action
         * @param {string} action 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfileAvatarCreate(action: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfileAvatarCreate(action, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PatchedUserNotificationSettings} [patchedUserNotificationSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfileNotificationSettingsPartialUpdate(patchedUserNotificationSettings?: PatchedUserNotificationSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserNotificationSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfileNotificationSettingsPartialUpdate(patchedUserNotificationSettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfileNotificationSettingsRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserNotificationSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfileNotificationSettingsRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserNotificationSettings} [userNotificationSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfileNotificationSettingsUpdate(userNotificationSettings?: UserNotificationSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserNotificationSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfileNotificationSettingsUpdate(userNotificationSettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PatchedUserUpdate} [patchedUserUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfilePartialUpdate(patchedUserUpdate?: PatchedUserUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfilePartialUpdate(patchedUserUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfileRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfileRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserUpdate} [userUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfileUpdate(userUpdate?: UserUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfileUpdate(userUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Archive a published resume.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResume} masterResume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesArchive(id: number, masterResume: MasterResume, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesArchive(id, masterResume, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {MasterResume} masterResume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesCreate(masterResume: MasterResume, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterResume>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesCreate(masterResume, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMasterResumeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {PatchedMasterResume} [patchedMasterResume] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesPartialUpdate(id: number, patchedMasterResume?: PatchedMasterResume, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterResume>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesPartialUpdate(id, patchedMasterResume, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publish a draft resume. Only allowed if in DRAFT state.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResume} masterResume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesPublish(id: number, masterResume: MasterResume, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesPublish(id, masterResume, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterResume>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResume} masterResume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesUpdate(id: number, masterResume: MasterResume, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterResume>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesUpdate(id, masterResume, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve public service provider profile.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMastersDetailsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicMasterProfileDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMastersDetailsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for certificates.
         * @param {Certificate} certificate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyCertificatesCreate(certificate: Certificate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Certificate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyCertificatesCreate(certificate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyCertificatesDestroy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyCertificatesDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for certificates.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyCertificatesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCertificateList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyCertificatesList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {PatchedCertificate} [patchedCertificate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyCertificatesPartialUpdate(id: string, patchedCertificate?: PatchedCertificate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Certificate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyCertificatesPartialUpdate(id, patchedCertificate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyCertificatesRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Certificate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyCertificatesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {Certificate} certificate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyCertificatesUpdate(id: string, certificate: Certificate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Certificate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyCertificatesUpdate(id, certificate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EmployerProfileCreateUpdate} [employerProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyEmployerCreateCreate(employerProfileCreateUpdate?: EmployerProfileCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyEmployerCreateCreate(employerProfileCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PatchedEmployerProfileCreateUpdate} [patchedEmployerProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyEmployerPartialUpdate(patchedEmployerProfileCreateUpdate?: PatchedEmployerProfileCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyEmployerPartialUpdate(patchedEmployerProfileCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyEmployerRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyEmployerRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EmployerProfileCreateUpdate} [employerProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyEmployerUpdate(employerProfileCreateUpdate?: EmployerProfileCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyEmployerUpdate(employerProfileCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MasterProfileCreateUpdate} [masterProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyMasterCreateCreate(masterProfileCreateUpdate?: MasterProfileCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyMasterCreateCreate(masterProfileCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PatchedMasterProfileCreateUpdate} [patchedMasterProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyMasterPartialUpdate(patchedMasterProfileCreateUpdate?: PatchedMasterProfileCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyMasterPartialUpdate(patchedMasterProfileCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyMasterRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyMasterRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MasterProfileCreateUpdate} [masterProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyMasterUpdate(masterProfileCreateUpdate?: MasterProfileCreateUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyMasterUpdate(masterProfileCreateUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master portfolio items.
         * @param {PortfolioItem} portfolioItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioCreate(portfolioItem: PortfolioItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioCreate(portfolioItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioDestroy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPortfolioItemList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {PatchedPortfolioItem} [patchedPortfolioItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioPartialUpdate(id: string, patchedPortfolioItem?: PatchedPortfolioItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioPartialUpdate(id, patchedPortfolioItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {PortfolioItem} portfolioItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioUpdate(id: string, portfolioItem: PortfolioItem, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioUpdate(id, portfolioItem, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master skills.
         * @param {MasterSkill} masterSkill 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMySkillsCreate(masterSkill: MasterSkill, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterSkill>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMySkillsCreate(masterSkill, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMySkillsDestroy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMySkillsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master skills.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMySkillsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMasterSkillList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMySkillsList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {PatchedMasterSkill} [patchedMasterSkill] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMySkillsPartialUpdate(id: string, patchedMasterSkill?: PatchedMasterSkill, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterSkill>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMySkillsPartialUpdate(id, patchedMasterSkill, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMySkillsRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterSkill>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMySkillsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {MasterSkill} masterSkill 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMySkillsUpdate(id: string, masterSkill: MasterSkill, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterSkill>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMySkillsUpdate(id, masterSkill, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update online status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyStatusCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyStatusCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all available professions.
         * @param {number} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersProfessionsList(category?: number, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedProfessionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersProfessionsList(category, isActive, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all available skills.
         * @param {number} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersSkillsList(category?: number, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSkillDetailList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersSkillsList(category, isActive, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1Api - factory interface
 * @export
 */
export const V1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ApiFp(configuration)
    return {
        /**
         * Accept a job application
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsAcceptCreate(id: number, jobApplication: JobApplication, options?: any): AxiosPromise<JobApplicationApiAction> {
            return localVarFp.v1ApplicationsAcceptCreate(id, jobApplication, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing job applications.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsCreate(jobApplication: JobApplication, options?: any): AxiosPromise<JobApplication> {
            return localVarFp.v1ApplicationsCreate(jobApplication, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1ApplicationsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} [amountMax] 
         * @param {number} [amountMin] 
         * @param {string} [appliedAtAfter] 
         * @param {string} [appliedAtBefore] 
         * @param {number} [jobServiceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [jobUrgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {number} [jobId] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {'accepted' | 'pending' | 'rejected' | 'withdrawn'} [status] * &#x60;pending&#x60; - Pending * &#x60;accepted&#x60; - Accepted * &#x60;rejected&#x60; - Rejected * &#x60;withdrawn&#x60; - Withdrawn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsList(amountMax?: number, amountMin?: number, appliedAtAfter?: string, appliedAtBefore?: string, jobServiceSubcategory?: number, jobUrgency?: 'high' | 'low' | 'medium' | 'urgent', jobId?: number, ordering?: string, page?: number, pageSize?: number, search?: string, status?: 'accepted' | 'pending' | 'rejected' | 'withdrawn', options?: any): AxiosPromise<PaginatedJobApplicationList> {
            return localVarFp.v1ApplicationsList(amountMax, amountMin, appliedAtAfter, appliedAtBefore, jobServiceSubcategory, jobUrgency, jobId, ordering, page, pageSize, search, status, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {PatchedJobApplication} [patchedJobApplication] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsPartialUpdate(id: number, patchedJobApplication?: PatchedJobApplication, options?: any): AxiosPromise<JobApplication> {
            return localVarFp.v1ApplicationsPartialUpdate(id, patchedJobApplication, options).then((request) => request(axios, basePath));
        },
        /**
         * Reject a job application
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsRejectCreate(id: number, jobApplication: JobApplication, options?: any): AxiosPromise<JobApplicationApiAction> {
            return localVarFp.v1ApplicationsRejectCreate(id, jobApplication, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsRetrieve(id: number, options?: any): AxiosPromise<JobApplication> {
            return localVarFp.v1ApplicationsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsUpdate(id: number, jobApplication: JobApplication, options?: any): AxiosPromise<JobApplication> {
            return localVarFp.v1ApplicationsUpdate(id, jobApplication, options).then((request) => request(axios, basePath));
        },
        /**
         * Withdraw a job by master
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplication} jobApplication 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsWithdrawCreate(id: number, jobApplication: JobApplication, options?: any): AxiosPromise<JobApplicationApiAction> {
            return localVarFp.v1ApplicationsWithdrawCreate(id, jobApplication, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JobAssignment} [jobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsCreate(jobAssignment?: JobAssignment, options?: any): AxiosPromise<JobAssignment> {
            return localVarFp.v1AssignmentsCreate(jobAssignment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1AssignmentsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedJobAssignmentList> {
            return localVarFp.v1AssignmentsList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {PatchedJobAssignment} [patchedJobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsPartialUpdate(id: number, patchedJobAssignment?: PatchedJobAssignment, options?: any): AxiosPromise<JobAssignment> {
            return localVarFp.v1AssignmentsPartialUpdate(id, patchedJobAssignment, options).then((request) => request(axios, basePath));
        },
        /**
         * Rate a completed job assignment
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {Rating} [rating] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsRateCreate(id: number, rating?: Rating, options?: any): AxiosPromise<ActionResponse> {
            return localVarFp.v1AssignmentsRateCreate(id, rating, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsRetrieve(id: number, options?: any): AxiosPromise<JobAssignment> {
            return localVarFp.v1AssignmentsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {JobAssignment} [jobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsUpdate(id: number, jobAssignment?: JobAssignment, options?: any): AxiosPromise<JobAssignment> {
            return localVarFp.v1AssignmentsUpdate(id, jobAssignment, options).then((request) => request(axios, basePath));
        },
        /**
         * Update progress notes for an assignment
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {PatchedProgressUpdate} [patchedProgressUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsUpdateProgressPartialUpdate(id: number, patchedProgressUpdate?: PatchedProgressUpdate, options?: any): AxiosPromise<JobAssignmentApiAction> {
            return localVarFp.v1AssignmentsUpdateProgressPartialUpdate(id, patchedProgressUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Authenticate or register a user using Firebase ID token.
         * @param {FireBaseAuth} fireBaseAuth 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthFirebaseCreate(fireBaseAuth: FireBaseAuth, options?: any): AxiosPromise<FirebaseAuthResponse> {
            return localVarFp.v1AuthFirebaseCreate(fireBaseAuth, options).then((request) => request(axios, basePath));
        },
        /**
         * User logout view - enhanced version of api_users LogOutView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthLogoutCreate(options?: any): AxiosPromise<LogoutResponse> {
            return localVarFp.v1AuthLogoutCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * Add participants to chat room
         * @param {string} id 
         * @param {ChatRoom} chatRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsAddParticipants(id: string, chatRoom: ChatRoom, options?: any): AxiosPromise<ChatRoom> {
            return localVarFp.v1ChatsRoomsAddParticipants(id, chatRoom, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing chat rooms
         * @param {ChatRoomCreate} chatRoomCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsCreate(chatRoomCreate: ChatRoomCreate, options?: any): AxiosPromise<ChatRoomCreate> {
            return localVarFp.v1ChatsRoomsCreate(chatRoomCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a message from chat room
         * @param {string} id 
         * @param {string} messageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsDeleteMessage(id: string, messageId: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1ChatsRoomsDeleteMessage(id, messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1ChatsRoomsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit a message in chat room
         * @param {string} id 
         * @param {string} messageId 
         * @param {PatchedChatRoom} [patchedChatRoom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsEditMessage(id: string, messageId: string, patchedChatRoom?: PatchedChatRoom, options?: any): AxiosPromise<ChatRoom> {
            return localVarFp.v1ChatsRoomsEditMessage(id, messageId, patchedChatRoom, options).then((request) => request(axios, basePath));
        },
        /**
         * Leave a chat room
         * @param {string} id 
         * @param {ChatRoom} chatRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsLeave(id: string, chatRoom: ChatRoom, options?: any): AxiosPromise<ChatRoom> {
            return localVarFp.v1ChatsRoomsLeave(id, chatRoom, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedChatRoomList> {
            return localVarFp.v1ChatsRoomsList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * List all messages in a chat room with filtering and search
         * @param {string} id 
         * @param {string} [messageType] Filter by message type
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] Search in message content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessages(id: string, messageType?: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedMessageList> {
            return localVarFp.v1ChatsRoomsMessages(id, messageType, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {PatchedChatRoom} [patchedChatRoom] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsPartialUpdate(id: string, patchedChatRoom?: PatchedChatRoom, options?: any): AxiosPromise<ChatRoom> {
            return localVarFp.v1ChatsRoomsPartialUpdate(id, patchedChatRoom, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsRetrieve(id: string, options?: any): AxiosPromise<ChatRoom> {
            return localVarFp.v1ChatsRoomsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Send message to chat room
         * @param {string} id 
         * @param {MessageCreate} messageCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsSendMessage(id: string, messageCreate: MessageCreate, options?: any): AxiosPromise<Message> {
            return localVarFp.v1ChatsRoomsSendMessage(id, messageCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {ChatRoom} chatRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsUpdate(id: string, chatRoom: ChatRoom, options?: any): AxiosPromise<ChatRoom> {
            return localVarFp.v1ChatsRoomsUpdate(id, chatRoom, options).then((request) => request(axios, basePath));
        },
        /**
         * Languages - Read-only (managed via admin/fixtures).
         * @param {boolean} [isActive] 
         * @param {boolean} [isDefault] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreLanguagesList(isActive?: boolean, isDefault?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedLanguageList> {
            return localVarFp.v1CoreLanguagesList(isActive, isDefault, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Languages - Read-only (managed via admin/fixtures).
         * @param {number} id A unique integer value identifying this Language.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreLanguagesRetrieve(id: number, options?: any): AxiosPromise<Language> {
            return localVarFp.v1CoreLanguagesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {ServiceAreaCreateUpdate} serviceAreaCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasCreate(serviceAreaCreateUpdate: ServiceAreaCreateUpdate, options?: any): AxiosPromise<ServiceAreaCreateUpdate> {
            return localVarFp.v1CoreServiceAreasCreate(serviceAreaCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1CoreServiceAreasDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasList(isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedServiceAreaList> {
            return localVarFp.v1CoreServiceAreasList(isActive, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {PatchedServiceAreaCreateUpdate} [patchedServiceAreaCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasPartialUpdate(id: number, patchedServiceAreaCreateUpdate?: PatchedServiceAreaCreateUpdate, options?: any): AxiosPromise<ServiceAreaCreateUpdate> {
            return localVarFp.v1CoreServiceAreasPartialUpdate(id, patchedServiceAreaCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasRetrieve(id: number, options?: any): AxiosPromise<ServiceArea> {
            return localVarFp.v1CoreServiceAreasRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {ServiceAreaCreateUpdate} serviceAreaCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasUpdate(id: number, serviceAreaCreateUpdate: ServiceAreaCreateUpdate, options?: any): AxiosPromise<ServiceAreaCreateUpdate> {
            return localVarFp.v1CoreServiceAreasUpdate(id, serviceAreaCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {ServiceCategoryCreateUpdate} serviceCategoryCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesCreate(serviceCategoryCreateUpdate: ServiceCategoryCreateUpdate, options?: any): AxiosPromise<ServiceCategoryCreateUpdate> {
            return localVarFp.v1CoreServiceCategoriesCreate(serviceCategoryCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1CoreServiceCategoriesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {boolean} [featured] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesList(featured?: boolean, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedServiceCategoryList> {
            return localVarFp.v1CoreServiceCategoriesList(featured, isActive, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {PatchedServiceCategoryCreateUpdate} [patchedServiceCategoryCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesPartialUpdate(id: number, patchedServiceCategoryCreateUpdate?: PatchedServiceCategoryCreateUpdate, options?: any): AxiosPromise<ServiceCategoryCreateUpdate> {
            return localVarFp.v1CoreServiceCategoriesPartialUpdate(id, patchedServiceCategoryCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesRetrieve(id: number, options?: any): AxiosPromise<ServiceCategory> {
            return localVarFp.v1CoreServiceCategoriesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {ServiceCategoryCreateUpdate} serviceCategoryCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesUpdate(id: number, serviceCategoryCreateUpdate: ServiceCategoryCreateUpdate, options?: any): AxiosPromise<ServiceCategoryCreateUpdate> {
            return localVarFp.v1CoreServiceCategoriesUpdate(id, serviceCategoryCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {ServiceSubcategoryCreateUpdate} serviceSubcategoryCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesCreate(serviceSubcategoryCreateUpdate: ServiceSubcategoryCreateUpdate, options?: any): AxiosPromise<ServiceSubcategoryCreateUpdate> {
            return localVarFp.v1CoreServiceSubcategoriesCreate(serviceSubcategoryCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1CoreServiceSubcategoriesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} [category] 
         * @param {boolean} [featured] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesList(category?: number, featured?: boolean, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedServiceSubcategoryList> {
            return localVarFp.v1CoreServiceSubcategoriesList(category, featured, isActive, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {PatchedServiceSubcategoryCreateUpdate} [patchedServiceSubcategoryCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesPartialUpdate(id: number, patchedServiceSubcategoryCreateUpdate?: PatchedServiceSubcategoryCreateUpdate, options?: any): AxiosPromise<ServiceSubcategoryCreateUpdate> {
            return localVarFp.v1CoreServiceSubcategoriesPartialUpdate(id, patchedServiceSubcategoryCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesRetrieve(id: number, options?: any): AxiosPromise<ServiceSubcategory> {
            return localVarFp.v1CoreServiceSubcategoriesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {ServiceSubcategoryCreateUpdate} serviceSubcategoryCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesUpdate(id: number, serviceSubcategoryCreateUpdate: ServiceSubcategoryCreateUpdate, options?: any): AxiosPromise<ServiceSubcategoryCreateUpdate> {
            return localVarFp.v1CoreServiceSubcategoriesUpdate(id, serviceSubcategoryCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {SupportFAQCreateUpdate} supportFAQCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqCreate(supportFAQCreateUpdate: SupportFAQCreateUpdate, options?: any): AxiosPromise<SupportFAQCreateUpdate> {
            return localVarFp.v1CoreSupportFaqCreate(supportFAQCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1CoreSupportFaqDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist'} [category] * &#x60;general&#x60; - Основная информация * &#x60;specialist&#x60; - Specialist * &#x60;reviews&#x60; - Reviews * &#x60;account&#x60; - Аккаунт * &#x60;search&#x60; - Найти * &#x60;safety&#x60; - Safety
         * @param {boolean} [isActive] 
         * @param {number} [language] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqList(category?: 'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist', isActive?: boolean, language?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedSupportFAQList> {
            return localVarFp.v1CoreSupportFaqList(category, isActive, language, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {PatchedSupportFAQCreateUpdate} [patchedSupportFAQCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqPartialUpdate(id: number, patchedSupportFAQCreateUpdate?: PatchedSupportFAQCreateUpdate, options?: any): AxiosPromise<SupportFAQCreateUpdate> {
            return localVarFp.v1CoreSupportFaqPartialUpdate(id, patchedSupportFAQCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqRetrieve(id: number, options?: any): AxiosPromise<SupportFAQ> {
            return localVarFp.v1CoreSupportFaqRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {SupportFAQCreateUpdate} supportFAQCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqUpdate(id: number, supportFAQCreateUpdate: SupportFAQCreateUpdate, options?: any): AxiosPromise<SupportFAQCreateUpdate> {
            return localVarFp.v1CoreSupportFaqUpdate(id, supportFAQCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {SystemSettingsCreateUpdate} systemSettingsCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsCreate(systemSettingsCreateUpdate: SystemSettingsCreateUpdate, options?: any): AxiosPromise<SystemSettingsCreateUpdate> {
            return localVarFp.v1CoreSystemSettingsCreate(systemSettingsCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1CoreSystemSettingsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {string} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsList(category?: string, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedSystemSettingsList> {
            return localVarFp.v1CoreSystemSettingsList(category, isActive, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {PatchedSystemSettingsCreateUpdate} [patchedSystemSettingsCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsPartialUpdate(id: number, patchedSystemSettingsCreateUpdate?: PatchedSystemSettingsCreateUpdate, options?: any): AxiosPromise<SystemSettingsCreateUpdate> {
            return localVarFp.v1CoreSystemSettingsPartialUpdate(id, patchedSystemSettingsCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsRetrieve(id: number, options?: any): AxiosPromise<SystemSettings> {
            return localVarFp.v1CoreSystemSettingsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {SystemSettingsCreateUpdate} systemSettingsCreateUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsUpdate(id: number, systemSettingsCreateUpdate: SystemSettingsCreateUpdate, options?: any): AxiosPromise<SystemSettingsCreateUpdate> {
            return localVarFp.v1CoreSystemSettingsUpdate(id, systemSettingsCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Complete an assignment
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {JobAssignment} [jobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobAssignmentsComplete(id: number, jobAssignment?: JobAssignment, options?: any): AxiosPromise<JobAssignmentApiAction> {
            return localVarFp.v1JobAssignmentsComplete(id, jobAssignment, options).then((request) => request(axios, basePath));
        },
        /**
         * Start an assignment
         * @param {number} id A unique integer value identifying this Job Assignment.
         * @param {JobAssignment} [jobAssignment] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobAssignmentsStart(id: number, jobAssignment?: JobAssignment, options?: any): AxiosPromise<JobAssignmentApiAction> {
            return localVarFp.v1JobAssignmentsStart(id, jobAssignment, options).then((request) => request(axios, basePath));
        },
        /**
         * Apply to a job.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobApply} jobApply 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsApply(id: number, jobApply: JobApply, options?: any): AxiosPromise<JobApiAction> {
            return localVarFp.v1JobsApply(id, jobApply, options).then((request) => request(axios, basePath));
        },
        /**
         * Toggle bookmark status for a job
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsBookmark(id: number, job: Job, options?: any): AxiosPromise<ActionResponse> {
            return localVarFp.v1JobsBookmark(id, job, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel a job. Only allowed if job is in PUBLISHED or ASSIGNED state.
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsCancel(id: number, job: Job, options?: any): AxiosPromise<JobApiAction> {
            return localVarFp.v1JobsCancel(id, job, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing jobs.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsCreate(job: Job, options?: any): AxiosPromise<Job> {
            return localVarFp.v1JobsCreate(job, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1JobsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Toggle favorite status for a job
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsFavorite(id: number, job: Job, options?: any): AxiosPromise<ActionResponse> {
            return localVarFp.v1JobsFavorite(id, job, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing jobs.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceSubcategory] 
         * @param {'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published'} [status] * &#x60;draft&#x60; - Draft * &#x60;published&#x60; - Published * &#x60;assigned&#x60; - Assigned * &#x60;in_progress&#x60; - In Progress * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsList(ordering?: string, page?: number, pageSize?: number, search?: string, serviceSubcategory?: number, status?: 'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published', urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: any): AxiosPromise<PaginatedJobList> {
            return localVarFp.v1JobsList(ordering, page, pageSize, search, serviceSubcategory, status, urgency, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {PatchedJob} [patchedJob] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsPartialUpdate(id: number, patchedJob?: PatchedJob, options?: any): AxiosPromise<Job> {
            return localVarFp.v1JobsPartialUpdate(id, patchedJob, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish a draft job. Only allowed if job is in DRAFT state.
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsPublish(id: number, job: Job, options?: any): AxiosPromise<JobApiAction> {
            return localVarFp.v1JobsPublish(id, job, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsRetrieve(id: number, options?: any): AxiosPromise<Job> {
            return localVarFp.v1JobsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {Job} job 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsUpdate(id: number, job: Job, options?: any): AxiosPromise<Job> {
            return localVarFp.v1JobsUpdate(id, job, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [country] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesList(country?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedCityList> {
            return localVarFp.v1LocationsCitiesList(country, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this City.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesRetrieve(id: number, options?: any): AxiosPromise<City> {
            return localVarFp.v1LocationsCitiesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedCountryList> {
            return localVarFp.v1LocationsCountriesList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesRetrieve(id: number, options?: any): AxiosPromise<Country> {
            return localVarFp.v1LocationsCountriesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get notification counts for current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsCount(options?: any): AxiosPromise<any> {
            return localVarFp.v1NotificationsCount(options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {NotificationCreate} notificationCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsCreate(notificationCreate: NotificationCreate, options?: any): AxiosPromise<NotificationCreate> {
            return localVarFp.v1NotificationsCreate(notificationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1NotificationsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedNotificationList> {
            return localVarFp.v1NotificationsList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark all notifications as read for current user
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsMarkAllRead(notification: Notification, options?: any): AxiosPromise<any> {
            return localVarFp.v1NotificationsMarkAllRead(notification, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark specific notification as read
         * @param {string} id 
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsMarkRead(id: string, notification: Notification, options?: any): AxiosPromise<Notification> {
            return localVarFp.v1NotificationsMarkRead(id, notification, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark specific notification as unread
         * @param {string} id 
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsMarkUnread(id: string, notification: Notification, options?: any): AxiosPromise<Notification> {
            return localVarFp.v1NotificationsMarkUnread(id, notification, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {PatchedNotificationUpdate} [patchedNotificationUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsPartialUpdate(id: string, patchedNotificationUpdate?: PatchedNotificationUpdate, options?: any): AxiosPromise<NotificationUpdate> {
            return localVarFp.v1NotificationsPartialUpdate(id, patchedNotificationUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Get recent notifications (last 7 days)
         * @param {number} [days] Number of days to look back
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsRecent(days?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedNotificationList> {
            return localVarFp.v1NotificationsRecent(days, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsRetrieve(id: string, options?: any): AxiosPromise<Notification> {
            return localVarFp.v1NotificationsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get unread notifications for current user
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsUnread(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedNotificationList> {
            return localVarFp.v1NotificationsUnread(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {NotificationUpdate} [notificationUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsUpdate(id: string, notificationUpdate?: NotificationUpdate, options?: any): AxiosPromise<NotificationUpdate> {
            return localVarFp.v1NotificationsUpdate(id, notificationUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Base Action
         * @param {string} action 
         * @param {{ [key: string]: any; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileAvatarCreate(action: string, requestBody?: { [key: string]: any; }, options?: any): AxiosPromise<ActionResponse> {
            return localVarFp.v1ProfileAvatarCreate(action, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatchedUserNotificationSettings} [patchedUserNotificationSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileNotificationSettingsPartialUpdate(patchedUserNotificationSettings?: PatchedUserNotificationSettings, options?: any): AxiosPromise<UserNotificationSettings> {
            return localVarFp.v1ProfileNotificationSettingsPartialUpdate(patchedUserNotificationSettings, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileNotificationSettingsRetrieve(options?: any): AxiosPromise<UserNotificationSettings> {
            return localVarFp.v1ProfileNotificationSettingsRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserNotificationSettings} [userNotificationSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileNotificationSettingsUpdate(userNotificationSettings?: UserNotificationSettings, options?: any): AxiosPromise<UserNotificationSettings> {
            return localVarFp.v1ProfileNotificationSettingsUpdate(userNotificationSettings, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatchedUserUpdate} [patchedUserUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfilePartialUpdate(patchedUserUpdate?: PatchedUserUpdate, options?: any): AxiosPromise<UserUpdate> {
            return localVarFp.v1ProfilePartialUpdate(patchedUserUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileRetrieve(options?: any): AxiosPromise<UserDetail> {
            return localVarFp.v1ProfileRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserUpdate} [userUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileUpdate(userUpdate?: UserUpdate, options?: any): AxiosPromise<UserUpdate> {
            return localVarFp.v1ProfileUpdate(userUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Archive a published resume.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResume} masterResume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesArchive(id: number, masterResume: MasterResume, options?: any): AxiosPromise<void> {
            return localVarFp.v1ResumesArchive(id, masterResume, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {MasterResume} masterResume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesCreate(masterResume: MasterResume, options?: any): AxiosPromise<MasterResume> {
            return localVarFp.v1ResumesCreate(masterResume, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1ResumesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedMasterResumeList> {
            return localVarFp.v1ResumesList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {PatchedMasterResume} [patchedMasterResume] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesPartialUpdate(id: number, patchedMasterResume?: PatchedMasterResume, options?: any): AxiosPromise<MasterResume> {
            return localVarFp.v1ResumesPartialUpdate(id, patchedMasterResume, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish a draft resume. Only allowed if in DRAFT state.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResume} masterResume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesPublish(id: number, masterResume: MasterResume, options?: any): AxiosPromise<void> {
            return localVarFp.v1ResumesPublish(id, masterResume, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesRetrieve(id: number, options?: any): AxiosPromise<MasterResume> {
            return localVarFp.v1ResumesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResume} masterResume 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesUpdate(id: number, masterResume: MasterResume, options?: any): AxiosPromise<MasterResume> {
            return localVarFp.v1ResumesUpdate(id, masterResume, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve public service provider profile.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMastersDetailsRetrieve(id: number, options?: any): AxiosPromise<PublicMasterProfileDetail> {
            return localVarFp.v1UsersMastersDetailsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for certificates.
         * @param {Certificate} certificate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesCreate(certificate: Certificate, options?: any): AxiosPromise<Certificate> {
            return localVarFp.v1UsersMyCertificatesCreate(certificate, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1UsersMyCertificatesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for certificates.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedCertificateList> {
            return localVarFp.v1UsersMyCertificatesList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {PatchedCertificate} [patchedCertificate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesPartialUpdate(id: string, patchedCertificate?: PatchedCertificate, options?: any): AxiosPromise<Certificate> {
            return localVarFp.v1UsersMyCertificatesPartialUpdate(id, patchedCertificate, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesRetrieve(id: string, options?: any): AxiosPromise<Certificate> {
            return localVarFp.v1UsersMyCertificatesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {Certificate} certificate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesUpdate(id: string, certificate: Certificate, options?: any): AxiosPromise<Certificate> {
            return localVarFp.v1UsersMyCertificatesUpdate(id, certificate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmployerProfileCreateUpdate} [employerProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerCreateCreate(employerProfileCreateUpdate?: EmployerProfileCreateUpdate, options?: any): AxiosPromise<EmployerProfileCreateUpdate> {
            return localVarFp.v1UsersMyEmployerCreateCreate(employerProfileCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatchedEmployerProfileCreateUpdate} [patchedEmployerProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerPartialUpdate(patchedEmployerProfileCreateUpdate?: PatchedEmployerProfileCreateUpdate, options?: any): AxiosPromise<EmployerProfileCreateUpdate> {
            return localVarFp.v1UsersMyEmployerPartialUpdate(patchedEmployerProfileCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerRetrieve(options?: any): AxiosPromise<EmployerProfileCreateUpdate> {
            return localVarFp.v1UsersMyEmployerRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmployerProfileCreateUpdate} [employerProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerUpdate(employerProfileCreateUpdate?: EmployerProfileCreateUpdate, options?: any): AxiosPromise<EmployerProfileCreateUpdate> {
            return localVarFp.v1UsersMyEmployerUpdate(employerProfileCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MasterProfileCreateUpdate} [masterProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterCreateCreate(masterProfileCreateUpdate?: MasterProfileCreateUpdate, options?: any): AxiosPromise<MasterProfileCreateUpdate> {
            return localVarFp.v1UsersMyMasterCreateCreate(masterProfileCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatchedMasterProfileCreateUpdate} [patchedMasterProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterPartialUpdate(patchedMasterProfileCreateUpdate?: PatchedMasterProfileCreateUpdate, options?: any): AxiosPromise<MasterProfileCreateUpdate> {
            return localVarFp.v1UsersMyMasterPartialUpdate(patchedMasterProfileCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterRetrieve(options?: any): AxiosPromise<MasterProfileCreateUpdate> {
            return localVarFp.v1UsersMyMasterRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MasterProfileCreateUpdate} [masterProfileCreateUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterUpdate(masterProfileCreateUpdate?: MasterProfileCreateUpdate, options?: any): AxiosPromise<MasterProfileCreateUpdate> {
            return localVarFp.v1UsersMyMasterUpdate(masterProfileCreateUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master portfolio items.
         * @param {PortfolioItem} portfolioItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioCreate(portfolioItem: PortfolioItem, options?: any): AxiosPromise<PortfolioItem> {
            return localVarFp.v1UsersMyPortfolioCreate(portfolioItem, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1UsersMyPortfolioDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedPortfolioItemList> {
            return localVarFp.v1UsersMyPortfolioList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {PatchedPortfolioItem} [patchedPortfolioItem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioPartialUpdate(id: string, patchedPortfolioItem?: PatchedPortfolioItem, options?: any): AxiosPromise<PortfolioItem> {
            return localVarFp.v1UsersMyPortfolioPartialUpdate(id, patchedPortfolioItem, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioRetrieve(id: string, options?: any): AxiosPromise<PortfolioItem> {
            return localVarFp.v1UsersMyPortfolioRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {PortfolioItem} portfolioItem 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioUpdate(id: string, portfolioItem: PortfolioItem, options?: any): AxiosPromise<PortfolioItem> {
            return localVarFp.v1UsersMyPortfolioUpdate(id, portfolioItem, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master skills.
         * @param {MasterSkill} masterSkill 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsCreate(masterSkill: MasterSkill, options?: any): AxiosPromise<MasterSkill> {
            return localVarFp.v1UsersMySkillsCreate(masterSkill, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1UsersMySkillsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master skills.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedMasterSkillList> {
            return localVarFp.v1UsersMySkillsList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {PatchedMasterSkill} [patchedMasterSkill] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsPartialUpdate(id: string, patchedMasterSkill?: PatchedMasterSkill, options?: any): AxiosPromise<MasterSkill> {
            return localVarFp.v1UsersMySkillsPartialUpdate(id, patchedMasterSkill, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsRetrieve(id: string, options?: any): AxiosPromise<MasterSkill> {
            return localVarFp.v1UsersMySkillsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {MasterSkill} masterSkill 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsUpdate(id: string, masterSkill: MasterSkill, options?: any): AxiosPromise<MasterSkill> {
            return localVarFp.v1UsersMySkillsUpdate(id, masterSkill, options).then((request) => request(axios, basePath));
        },
        /**
         * Update online status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyStatusCreate(options?: any): AxiosPromise<any> {
            return localVarFp.v1UsersMyStatusCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * List all available professions.
         * @param {number} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersProfessionsList(category?: number, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedProfessionList> {
            return localVarFp.v1UsersProfessionsList(category, isActive, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * List all available skills.
         * @param {number} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersSkillsList(category?: number, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedSkillDetailList> {
            return localVarFp.v1UsersSkillsList(category, isActive, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1Api - interface
 * @export
 * @interface V1Api
 */
export interface V1ApiInterface {
    /**
     * Accept a job application
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {JobApplication} jobApplication 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsAcceptCreate(id: number, jobApplication: JobApplication, options?: AxiosRequestConfig): AxiosPromise<JobApplicationApiAction>;

    /**
     * ViewSet for managing job applications.
     * @param {JobApplication} jobApplication 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsCreate(jobApplication: JobApplication, options?: AxiosRequestConfig): AxiosPromise<JobApplication>;

    /**
     * ViewSet for managing job applications.
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ViewSet for managing job applications.
     * @param {number} [amountMax] 
     * @param {number} [amountMin] 
     * @param {string} [appliedAtAfter] 
     * @param {string} [appliedAtBefore] 
     * @param {number} [jobServiceSubcategory] 
     * @param {'high' | 'low' | 'medium' | 'urgent'} [jobUrgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @param {number} [jobId] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {'accepted' | 'pending' | 'rejected' | 'withdrawn'} [status] * &#x60;pending&#x60; - Pending * &#x60;accepted&#x60; - Accepted * &#x60;rejected&#x60; - Rejected * &#x60;withdrawn&#x60; - Withdrawn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsList(amountMax?: number, amountMin?: number, appliedAtAfter?: string, appliedAtBefore?: string, jobServiceSubcategory?: number, jobUrgency?: 'high' | 'low' | 'medium' | 'urgent', jobId?: number, ordering?: string, page?: number, pageSize?: number, search?: string, status?: 'accepted' | 'pending' | 'rejected' | 'withdrawn', options?: AxiosRequestConfig): AxiosPromise<PaginatedJobApplicationList>;

    /**
     * ViewSet for managing job applications.
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {PatchedJobApplication} [patchedJobApplication] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsPartialUpdate(id: number, patchedJobApplication?: PatchedJobApplication, options?: AxiosRequestConfig): AxiosPromise<JobApplication>;

    /**
     * Reject a job application
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {JobApplication} jobApplication 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsRejectCreate(id: number, jobApplication: JobApplication, options?: AxiosRequestConfig): AxiosPromise<JobApplicationApiAction>;

    /**
     * ViewSet for managing job applications.
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<JobApplication>;

    /**
     * ViewSet for managing job applications.
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {JobApplication} jobApplication 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsUpdate(id: number, jobApplication: JobApplication, options?: AxiosRequestConfig): AxiosPromise<JobApplication>;

    /**
     * Withdraw a job by master
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {JobApplication} jobApplication 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsWithdrawCreate(id: number, jobApplication: JobApplication, options?: AxiosRequestConfig): AxiosPromise<JobApplicationApiAction>;

    /**
     * 
     * @param {JobAssignment} [jobAssignment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsCreate(jobAssignment?: JobAssignment, options?: AxiosRequestConfig): AxiosPromise<JobAssignment>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Job Assignment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedJobAssignmentList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Job Assignment.
     * @param {PatchedJobAssignment} [patchedJobAssignment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsPartialUpdate(id: number, patchedJobAssignment?: PatchedJobAssignment, options?: AxiosRequestConfig): AxiosPromise<JobAssignment>;

    /**
     * Rate a completed job assignment
     * @param {number} id A unique integer value identifying this Job Assignment.
     * @param {Rating} [rating] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsRateCreate(id: number, rating?: Rating, options?: AxiosRequestConfig): AxiosPromise<ActionResponse>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Job Assignment.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<JobAssignment>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Job Assignment.
     * @param {JobAssignment} [jobAssignment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsUpdate(id: number, jobAssignment?: JobAssignment, options?: AxiosRequestConfig): AxiosPromise<JobAssignment>;

    /**
     * Update progress notes for an assignment
     * @param {number} id A unique integer value identifying this Job Assignment.
     * @param {PatchedProgressUpdate} [patchedProgressUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsUpdateProgressPartialUpdate(id: number, patchedProgressUpdate?: PatchedProgressUpdate, options?: AxiosRequestConfig): AxiosPromise<JobAssignmentApiAction>;

    /**
     * Authenticate or register a user using Firebase ID token.
     * @param {FireBaseAuth} fireBaseAuth 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AuthFirebaseCreate(fireBaseAuth: FireBaseAuth, options?: AxiosRequestConfig): AxiosPromise<FirebaseAuthResponse>;

    /**
     * User logout view - enhanced version of api_users LogOutView
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AuthLogoutCreate(options?: AxiosRequestConfig): AxiosPromise<LogoutResponse>;

    /**
     * Add participants to chat room
     * @param {string} id 
     * @param {ChatRoom} chatRoom 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsAddParticipants(id: string, chatRoom: ChatRoom, options?: AxiosRequestConfig): AxiosPromise<ChatRoom>;

    /**
     * ViewSet for managing chat rooms
     * @param {ChatRoomCreate} chatRoomCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsCreate(chatRoomCreate: ChatRoomCreate, options?: AxiosRequestConfig): AxiosPromise<ChatRoomCreate>;

    /**
     * Delete a message from chat room
     * @param {string} id 
     * @param {string} messageId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsDeleteMessage(id: string, messageId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ViewSet for managing chat rooms
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsDestroy(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Edit a message in chat room
     * @param {string} id 
     * @param {string} messageId 
     * @param {PatchedChatRoom} [patchedChatRoom] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsEditMessage(id: string, messageId: string, patchedChatRoom?: PatchedChatRoom, options?: AxiosRequestConfig): AxiosPromise<ChatRoom>;

    /**
     * Leave a chat room
     * @param {string} id 
     * @param {ChatRoom} chatRoom 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsLeave(id: string, chatRoom: ChatRoom, options?: AxiosRequestConfig): AxiosPromise<ChatRoom>;

    /**
     * ViewSet for managing chat rooms
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedChatRoomList>;

    /**
     * List all messages in a chat room with filtering and search
     * @param {string} id 
     * @param {string} [messageType] Filter by message type
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] Search in message content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsMessages(id: string, messageType?: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedMessageList>;

    /**
     * ViewSet for managing chat rooms
     * @param {string} id 
     * @param {PatchedChatRoom} [patchedChatRoom] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsPartialUpdate(id: string, patchedChatRoom?: PatchedChatRoom, options?: AxiosRequestConfig): AxiosPromise<ChatRoom>;

    /**
     * ViewSet for managing chat rooms
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsRetrieve(id: string, options?: AxiosRequestConfig): AxiosPromise<ChatRoom>;

    /**
     * Send message to chat room
     * @param {string} id 
     * @param {MessageCreate} messageCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsSendMessage(id: string, messageCreate: MessageCreate, options?: AxiosRequestConfig): AxiosPromise<Message>;

    /**
     * ViewSet for managing chat rooms
     * @param {string} id 
     * @param {ChatRoom} chatRoom 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsUpdate(id: string, chatRoom: ChatRoom, options?: AxiosRequestConfig): AxiosPromise<ChatRoom>;

    /**
     * Languages - Read-only (managed via admin/fixtures).
     * @param {boolean} [isActive] 
     * @param {boolean} [isDefault] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreLanguagesList(isActive?: boolean, isDefault?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedLanguageList>;

    /**
     * Languages - Read-only (managed via admin/fixtures).
     * @param {number} id A unique integer value identifying this Language.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreLanguagesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<Language>;

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {ServiceAreaCreateUpdate} serviceAreaCreateUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceAreasCreate(serviceAreaCreateUpdate: ServiceAreaCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<ServiceAreaCreateUpdate>;

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Area.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceAreasDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {boolean} [isActive] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceAreasList(isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedServiceAreaList>;

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Area.
     * @param {PatchedServiceAreaCreateUpdate} [patchedServiceAreaCreateUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceAreasPartialUpdate(id: number, patchedServiceAreaCreateUpdate?: PatchedServiceAreaCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<ServiceAreaCreateUpdate>;

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Area.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceAreasRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<ServiceArea>;

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Area.
     * @param {ServiceAreaCreateUpdate} serviceAreaCreateUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceAreasUpdate(id: number, serviceAreaCreateUpdate: ServiceAreaCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<ServiceAreaCreateUpdate>;

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {ServiceCategoryCreateUpdate} serviceCategoryCreateUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceCategoriesCreate(serviceCategoryCreateUpdate: ServiceCategoryCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<ServiceCategoryCreateUpdate>;

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceCategoriesDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {boolean} [featured] 
     * @param {boolean} [isActive] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceCategoriesList(featured?: boolean, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedServiceCategoryList>;

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Category.
     * @param {PatchedServiceCategoryCreateUpdate} [patchedServiceCategoryCreateUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceCategoriesPartialUpdate(id: number, patchedServiceCategoryCreateUpdate?: PatchedServiceCategoryCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<ServiceCategoryCreateUpdate>;

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceCategoriesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<ServiceCategory>;

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Category.
     * @param {ServiceCategoryCreateUpdate} serviceCategoryCreateUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceCategoriesUpdate(id: number, serviceCategoryCreateUpdate: ServiceCategoryCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<ServiceCategoryCreateUpdate>;

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {ServiceSubcategoryCreateUpdate} serviceSubcategoryCreateUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceSubcategoriesCreate(serviceSubcategoryCreateUpdate: ServiceSubcategoryCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<ServiceSubcategoryCreateUpdate>;

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Subcategory.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceSubcategoriesDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {number} [category] 
     * @param {boolean} [featured] 
     * @param {boolean} [isActive] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceSubcategoriesList(category?: number, featured?: boolean, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedServiceSubcategoryList>;

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Subcategory.
     * @param {PatchedServiceSubcategoryCreateUpdate} [patchedServiceSubcategoryCreateUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceSubcategoriesPartialUpdate(id: number, patchedServiceSubcategoryCreateUpdate?: PatchedServiceSubcategoryCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<ServiceSubcategoryCreateUpdate>;

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Subcategory.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceSubcategoriesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<ServiceSubcategory>;

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Subcategory.
     * @param {ServiceSubcategoryCreateUpdate} serviceSubcategoryCreateUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceSubcategoriesUpdate(id: number, serviceSubcategoryCreateUpdate: ServiceSubcategoryCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<ServiceSubcategoryCreateUpdate>;

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {SupportFAQCreateUpdate} supportFAQCreateUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSupportFaqCreate(supportFAQCreateUpdate: SupportFAQCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<SupportFAQCreateUpdate>;

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Support FAQ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSupportFaqDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist'} [category] * &#x60;general&#x60; - Основная информация * &#x60;specialist&#x60; - Specialist * &#x60;reviews&#x60; - Reviews * &#x60;account&#x60; - Аккаунт * &#x60;search&#x60; - Найти * &#x60;safety&#x60; - Safety
     * @param {boolean} [isActive] 
     * @param {number} [language] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSupportFaqList(category?: 'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist', isActive?: boolean, language?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedSupportFAQList>;

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Support FAQ.
     * @param {PatchedSupportFAQCreateUpdate} [patchedSupportFAQCreateUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSupportFaqPartialUpdate(id: number, patchedSupportFAQCreateUpdate?: PatchedSupportFAQCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<SupportFAQCreateUpdate>;

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Support FAQ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSupportFaqRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<SupportFAQ>;

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Support FAQ.
     * @param {SupportFAQCreateUpdate} supportFAQCreateUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSupportFaqUpdate(id: number, supportFAQCreateUpdate: SupportFAQCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<SupportFAQCreateUpdate>;

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {SystemSettingsCreateUpdate} systemSettingsCreateUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSystemSettingsCreate(systemSettingsCreateUpdate: SystemSettingsCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<SystemSettingsCreateUpdate>;

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this System Setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSystemSettingsDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {string} [category] 
     * @param {boolean} [isActive] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSystemSettingsList(category?: string, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedSystemSettingsList>;

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this System Setting.
     * @param {PatchedSystemSettingsCreateUpdate} [patchedSystemSettingsCreateUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSystemSettingsPartialUpdate(id: number, patchedSystemSettingsCreateUpdate?: PatchedSystemSettingsCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<SystemSettingsCreateUpdate>;

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this System Setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSystemSettingsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<SystemSettings>;

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this System Setting.
     * @param {SystemSettingsCreateUpdate} systemSettingsCreateUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSystemSettingsUpdate(id: number, systemSettingsCreateUpdate: SystemSettingsCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<SystemSettingsCreateUpdate>;

    /**
     * Complete an assignment
     * @param {number} id A unique integer value identifying this Job Assignment.
     * @param {JobAssignment} [jobAssignment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobAssignmentsComplete(id: number, jobAssignment?: JobAssignment, options?: AxiosRequestConfig): AxiosPromise<JobAssignmentApiAction>;

    /**
     * Start an assignment
     * @param {number} id A unique integer value identifying this Job Assignment.
     * @param {JobAssignment} [jobAssignment] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobAssignmentsStart(id: number, jobAssignment?: JobAssignment, options?: AxiosRequestConfig): AxiosPromise<JobAssignmentApiAction>;

    /**
     * Apply to a job.
     * @param {number} id A unique integer value identifying this Job.
     * @param {JobApply} jobApply 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsApply(id: number, jobApply: JobApply, options?: AxiosRequestConfig): AxiosPromise<JobApiAction>;

    /**
     * Toggle bookmark status for a job
     * @param {number} id A unique integer value identifying this Job.
     * @param {Job} job 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsBookmark(id: number, job: Job, options?: AxiosRequestConfig): AxiosPromise<ActionResponse>;

    /**
     * Cancel a job. Only allowed if job is in PUBLISHED or ASSIGNED state.
     * @param {number} id A unique integer value identifying this Job.
     * @param {Job} job 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsCancel(id: number, job: Job, options?: AxiosRequestConfig): AxiosPromise<JobApiAction>;

    /**
     * ViewSet for managing jobs.
     * @param {Job} job 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsCreate(job: Job, options?: AxiosRequestConfig): AxiosPromise<Job>;

    /**
     * ViewSet for managing jobs.
     * @param {number} id A unique integer value identifying this Job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Toggle favorite status for a job
     * @param {number} id A unique integer value identifying this Job.
     * @param {Job} job 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsFavorite(id: number, job: Job, options?: AxiosRequestConfig): AxiosPromise<ActionResponse>;

    /**
     * ViewSet for managing jobs.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {number} [serviceSubcategory] 
     * @param {'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published'} [status] * &#x60;draft&#x60; - Draft * &#x60;published&#x60; - Published * &#x60;assigned&#x60; - Assigned * &#x60;in_progress&#x60; - In Progress * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled
     * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsList(ordering?: string, page?: number, pageSize?: number, search?: string, serviceSubcategory?: number, status?: 'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published', urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: AxiosRequestConfig): AxiosPromise<PaginatedJobList>;

    /**
     * ViewSet for managing jobs.
     * @param {number} id A unique integer value identifying this Job.
     * @param {PatchedJob} [patchedJob] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsPartialUpdate(id: number, patchedJob?: PatchedJob, options?: AxiosRequestConfig): AxiosPromise<Job>;

    /**
     * Publish a draft job. Only allowed if job is in DRAFT state.
     * @param {number} id A unique integer value identifying this Job.
     * @param {Job} job 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsPublish(id: number, job: Job, options?: AxiosRequestConfig): AxiosPromise<JobApiAction>;

    /**
     * ViewSet for managing jobs.
     * @param {number} id A unique integer value identifying this Job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<Job>;

    /**
     * ViewSet for managing jobs.
     * @param {number} id A unique integer value identifying this Job.
     * @param {Job} job 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsUpdate(id: number, job: Job, options?: AxiosRequestConfig): AxiosPromise<Job>;

    /**
     * 
     * @param {number} [country] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCitiesList(country?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedCityList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this City.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCitiesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<City>;

    /**
     * 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCountriesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedCountryList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Country.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCountriesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<Country>;

    /**
     * Get notification counts for current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsCount(options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {NotificationCreate} notificationCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsCreate(notificationCreate: NotificationCreate, options?: AxiosRequestConfig): AxiosPromise<NotificationCreate>;

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsDestroy(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedNotificationList>;

    /**
     * Mark all notifications as read for current user
     * @param {Notification} notification 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsMarkAllRead(notification: Notification, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * Mark specific notification as read
     * @param {string} id 
     * @param {Notification} notification 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsMarkRead(id: string, notification: Notification, options?: AxiosRequestConfig): AxiosPromise<Notification>;

    /**
     * Mark specific notification as unread
     * @param {string} id 
     * @param {Notification} notification 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsMarkUnread(id: string, notification: Notification, options?: AxiosRequestConfig): AxiosPromise<Notification>;

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {string} id 
     * @param {PatchedNotificationUpdate} [patchedNotificationUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsPartialUpdate(id: string, patchedNotificationUpdate?: PatchedNotificationUpdate, options?: AxiosRequestConfig): AxiosPromise<NotificationUpdate>;

    /**
     * Get recent notifications (last 7 days)
     * @param {number} [days] Number of days to look back
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsRecent(days?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedNotificationList>;

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsRetrieve(id: string, options?: AxiosRequestConfig): AxiosPromise<Notification>;

    /**
     * Get unread notifications for current user
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsUnread(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedNotificationList>;

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {string} id 
     * @param {NotificationUpdate} [notificationUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsUpdate(id: string, notificationUpdate?: NotificationUpdate, options?: AxiosRequestConfig): AxiosPromise<NotificationUpdate>;

    /**
     * Base Action
     * @param {string} action 
     * @param {{ [key: string]: any; }} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfileAvatarCreate(action: string, requestBody?: { [key: string]: any; }, options?: AxiosRequestConfig): AxiosPromise<ActionResponse>;

    /**
     * 
     * @param {PatchedUserNotificationSettings} [patchedUserNotificationSettings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfileNotificationSettingsPartialUpdate(patchedUserNotificationSettings?: PatchedUserNotificationSettings, options?: AxiosRequestConfig): AxiosPromise<UserNotificationSettings>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfileNotificationSettingsRetrieve(options?: AxiosRequestConfig): AxiosPromise<UserNotificationSettings>;

    /**
     * 
     * @param {UserNotificationSettings} [userNotificationSettings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfileNotificationSettingsUpdate(userNotificationSettings?: UserNotificationSettings, options?: AxiosRequestConfig): AxiosPromise<UserNotificationSettings>;

    /**
     * 
     * @param {PatchedUserUpdate} [patchedUserUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfilePartialUpdate(patchedUserUpdate?: PatchedUserUpdate, options?: AxiosRequestConfig): AxiosPromise<UserUpdate>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfileRetrieve(options?: AxiosRequestConfig): AxiosPromise<UserDetail>;

    /**
     * 
     * @param {UserUpdate} [userUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfileUpdate(userUpdate?: UserUpdate, options?: AxiosRequestConfig): AxiosPromise<UserUpdate>;

    /**
     * Archive a published resume.
     * @param {number} id A unique integer value identifying this master resume.
     * @param {MasterResume} masterResume 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesArchive(id: number, masterResume: MasterResume, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {MasterResume} masterResume 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesCreate(masterResume: MasterResume, options?: AxiosRequestConfig): AxiosPromise<MasterResume>;

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {number} id A unique integer value identifying this master resume.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedMasterResumeList>;

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {number} id A unique integer value identifying this master resume.
     * @param {PatchedMasterResume} [patchedMasterResume] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesPartialUpdate(id: number, patchedMasterResume?: PatchedMasterResume, options?: AxiosRequestConfig): AxiosPromise<MasterResume>;

    /**
     * Publish a draft resume. Only allowed if in DRAFT state.
     * @param {number} id A unique integer value identifying this master resume.
     * @param {MasterResume} masterResume 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesPublish(id: number, masterResume: MasterResume, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {number} id A unique integer value identifying this master resume.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<MasterResume>;

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {number} id A unique integer value identifying this master resume.
     * @param {MasterResume} masterResume 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesUpdate(id: number, masterResume: MasterResume, options?: AxiosRequestConfig): AxiosPromise<MasterResume>;

    /**
     * Retrieve public service provider profile.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMastersDetailsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<PublicMasterProfileDetail>;

    /**
     * Crud for certificates.
     * @param {Certificate} certificate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyCertificatesCreate(certificate: Certificate, options?: AxiosRequestConfig): AxiosPromise<Certificate>;

    /**
     * Crud for certificates.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyCertificatesDestroy(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Crud for certificates.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyCertificatesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedCertificateList>;

    /**
     * Crud for certificates.
     * @param {string} id 
     * @param {PatchedCertificate} [patchedCertificate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyCertificatesPartialUpdate(id: string, patchedCertificate?: PatchedCertificate, options?: AxiosRequestConfig): AxiosPromise<Certificate>;

    /**
     * Crud for certificates.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyCertificatesRetrieve(id: string, options?: AxiosRequestConfig): AxiosPromise<Certificate>;

    /**
     * Crud for certificates.
     * @param {string} id 
     * @param {Certificate} certificate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyCertificatesUpdate(id: string, certificate: Certificate, options?: AxiosRequestConfig): AxiosPromise<Certificate>;

    /**
     * 
     * @param {EmployerProfileCreateUpdate} [employerProfileCreateUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyEmployerCreateCreate(employerProfileCreateUpdate?: EmployerProfileCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<EmployerProfileCreateUpdate>;

    /**
     * 
     * @param {PatchedEmployerProfileCreateUpdate} [patchedEmployerProfileCreateUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyEmployerPartialUpdate(patchedEmployerProfileCreateUpdate?: PatchedEmployerProfileCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<EmployerProfileCreateUpdate>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyEmployerRetrieve(options?: AxiosRequestConfig): AxiosPromise<EmployerProfileCreateUpdate>;

    /**
     * 
     * @param {EmployerProfileCreateUpdate} [employerProfileCreateUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyEmployerUpdate(employerProfileCreateUpdate?: EmployerProfileCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<EmployerProfileCreateUpdate>;

    /**
     * 
     * @param {MasterProfileCreateUpdate} [masterProfileCreateUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyMasterCreateCreate(masterProfileCreateUpdate?: MasterProfileCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<MasterProfileCreateUpdate>;

    /**
     * 
     * @param {PatchedMasterProfileCreateUpdate} [patchedMasterProfileCreateUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyMasterPartialUpdate(patchedMasterProfileCreateUpdate?: PatchedMasterProfileCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<MasterProfileCreateUpdate>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyMasterRetrieve(options?: AxiosRequestConfig): AxiosPromise<MasterProfileCreateUpdate>;

    /**
     * 
     * @param {MasterProfileCreateUpdate} [masterProfileCreateUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyMasterUpdate(masterProfileCreateUpdate?: MasterProfileCreateUpdate, options?: AxiosRequestConfig): AxiosPromise<MasterProfileCreateUpdate>;

    /**
     * Crud for service master portfolio items.
     * @param {PortfolioItem} portfolioItem 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioCreate(portfolioItem: PortfolioItem, options?: AxiosRequestConfig): AxiosPromise<PortfolioItem>;

    /**
     * Crud for service master portfolio items.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioDestroy(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Crud for service master portfolio items.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedPortfolioItemList>;

    /**
     * Crud for service master portfolio items.
     * @param {string} id 
     * @param {PatchedPortfolioItem} [patchedPortfolioItem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioPartialUpdate(id: string, patchedPortfolioItem?: PatchedPortfolioItem, options?: AxiosRequestConfig): AxiosPromise<PortfolioItem>;

    /**
     * Crud for service master portfolio items.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioRetrieve(id: string, options?: AxiosRequestConfig): AxiosPromise<PortfolioItem>;

    /**
     * Crud for service master portfolio items.
     * @param {string} id 
     * @param {PortfolioItem} portfolioItem 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioUpdate(id: string, portfolioItem: PortfolioItem, options?: AxiosRequestConfig): AxiosPromise<PortfolioItem>;

    /**
     * Crud for service master skills.
     * @param {MasterSkill} masterSkill 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMySkillsCreate(masterSkill: MasterSkill, options?: AxiosRequestConfig): AxiosPromise<MasterSkill>;

    /**
     * Crud for service master skills.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMySkillsDestroy(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Crud for service master skills.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMySkillsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedMasterSkillList>;

    /**
     * Crud for service master skills.
     * @param {string} id 
     * @param {PatchedMasterSkill} [patchedMasterSkill] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMySkillsPartialUpdate(id: string, patchedMasterSkill?: PatchedMasterSkill, options?: AxiosRequestConfig): AxiosPromise<MasterSkill>;

    /**
     * Crud for service master skills.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMySkillsRetrieve(id: string, options?: AxiosRequestConfig): AxiosPromise<MasterSkill>;

    /**
     * Crud for service master skills.
     * @param {string} id 
     * @param {MasterSkill} masterSkill 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMySkillsUpdate(id: string, masterSkill: MasterSkill, options?: AxiosRequestConfig): AxiosPromise<MasterSkill>;

    /**
     * Update online status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyStatusCreate(options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * List all available professions.
     * @param {number} [category] 
     * @param {boolean} [isActive] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersProfessionsList(category?: number, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedProfessionList>;

    /**
     * List all available skills.
     * @param {number} [category] 
     * @param {boolean} [isActive] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersSkillsList(category?: number, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedSkillDetailList>;

}

/**
 * Request parameters for v1ApplicationsAcceptCreate operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsAcceptCreateRequest
 */
export interface V1ApiV1ApplicationsAcceptCreateRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsAcceptCreate
     */
    readonly id: number

    /**
     * 
     * @type {JobApplication}
     * @memberof V1ApiV1ApplicationsAcceptCreate
     */
    readonly jobApplication: JobApplication
}

/**
 * Request parameters for v1ApplicationsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsCreateRequest
 */
export interface V1ApiV1ApplicationsCreateRequest {
    /**
     * 
     * @type {JobApplication}
     * @memberof V1ApiV1ApplicationsCreate
     */
    readonly jobApplication: JobApplication
}

/**
 * Request parameters for v1ApplicationsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsDestroyRequest
 */
export interface V1ApiV1ApplicationsDestroyRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1ApplicationsList operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsListRequest
 */
export interface V1ApiV1ApplicationsListRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly amountMax?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly amountMin?: number

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly appliedAtAfter?: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly appliedAtBefore?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly jobServiceSubcategory?: number

    /**
     * * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @type {'high' | 'low' | 'medium' | 'urgent'}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly jobUrgency?: 'high' | 'low' | 'medium' | 'urgent'

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly jobId?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly search?: string

    /**
     * * &#x60;pending&#x60; - Pending * &#x60;accepted&#x60; - Accepted * &#x60;rejected&#x60; - Rejected * &#x60;withdrawn&#x60; - Withdrawn
     * @type {'accepted' | 'pending' | 'rejected' | 'withdrawn'}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly status?: 'accepted' | 'pending' | 'rejected' | 'withdrawn'
}

/**
 * Request parameters for v1ApplicationsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsPartialUpdateRequest
 */
export interface V1ApiV1ApplicationsPartialUpdateRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedJobApplication}
     * @memberof V1ApiV1ApplicationsPartialUpdate
     */
    readonly patchedJobApplication?: PatchedJobApplication
}

/**
 * Request parameters for v1ApplicationsRejectCreate operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsRejectCreateRequest
 */
export interface V1ApiV1ApplicationsRejectCreateRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsRejectCreate
     */
    readonly id: number

    /**
     * 
     * @type {JobApplication}
     * @memberof V1ApiV1ApplicationsRejectCreate
     */
    readonly jobApplication: JobApplication
}

/**
 * Request parameters for v1ApplicationsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsRetrieveRequest
 */
export interface V1ApiV1ApplicationsRetrieveRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1ApplicationsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsUpdateRequest
 */
export interface V1ApiV1ApplicationsUpdateRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {JobApplication}
     * @memberof V1ApiV1ApplicationsUpdate
     */
    readonly jobApplication: JobApplication
}

/**
 * Request parameters for v1ApplicationsWithdrawCreate operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsWithdrawCreateRequest
 */
export interface V1ApiV1ApplicationsWithdrawCreateRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsWithdrawCreate
     */
    readonly id: number

    /**
     * 
     * @type {JobApplication}
     * @memberof V1ApiV1ApplicationsWithdrawCreate
     */
    readonly jobApplication: JobApplication
}

/**
 * Request parameters for v1AssignmentsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsCreateRequest
 */
export interface V1ApiV1AssignmentsCreateRequest {
    /**
     * 
     * @type {JobAssignment}
     * @memberof V1ApiV1AssignmentsCreate
     */
    readonly jobAssignment?: JobAssignment
}

/**
 * Request parameters for v1AssignmentsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsDestroyRequest
 */
export interface V1ApiV1AssignmentsDestroyRequest {
    /**
     * A unique integer value identifying this Job Assignment.
     * @type {number}
     * @memberof V1ApiV1AssignmentsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1AssignmentsList operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsListRequest
 */
export interface V1ApiV1AssignmentsListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1AssignmentsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1AssignmentsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1AssignmentsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1AssignmentsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1AssignmentsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsPartialUpdateRequest
 */
export interface V1ApiV1AssignmentsPartialUpdateRequest {
    /**
     * A unique integer value identifying this Job Assignment.
     * @type {number}
     * @memberof V1ApiV1AssignmentsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedJobAssignment}
     * @memberof V1ApiV1AssignmentsPartialUpdate
     */
    readonly patchedJobAssignment?: PatchedJobAssignment
}

/**
 * Request parameters for v1AssignmentsRateCreate operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsRateCreateRequest
 */
export interface V1ApiV1AssignmentsRateCreateRequest {
    /**
     * A unique integer value identifying this Job Assignment.
     * @type {number}
     * @memberof V1ApiV1AssignmentsRateCreate
     */
    readonly id: number

    /**
     * 
     * @type {Rating}
     * @memberof V1ApiV1AssignmentsRateCreate
     */
    readonly rating?: Rating
}

/**
 * Request parameters for v1AssignmentsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsRetrieveRequest
 */
export interface V1ApiV1AssignmentsRetrieveRequest {
    /**
     * A unique integer value identifying this Job Assignment.
     * @type {number}
     * @memberof V1ApiV1AssignmentsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1AssignmentsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsUpdateRequest
 */
export interface V1ApiV1AssignmentsUpdateRequest {
    /**
     * A unique integer value identifying this Job Assignment.
     * @type {number}
     * @memberof V1ApiV1AssignmentsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {JobAssignment}
     * @memberof V1ApiV1AssignmentsUpdate
     */
    readonly jobAssignment?: JobAssignment
}

/**
 * Request parameters for v1AssignmentsUpdateProgressPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsUpdateProgressPartialUpdateRequest
 */
export interface V1ApiV1AssignmentsUpdateProgressPartialUpdateRequest {
    /**
     * A unique integer value identifying this Job Assignment.
     * @type {number}
     * @memberof V1ApiV1AssignmentsUpdateProgressPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedProgressUpdate}
     * @memberof V1ApiV1AssignmentsUpdateProgressPartialUpdate
     */
    readonly patchedProgressUpdate?: PatchedProgressUpdate
}

/**
 * Request parameters for v1AuthFirebaseCreate operation in V1Api.
 * @export
 * @interface V1ApiV1AuthFirebaseCreateRequest
 */
export interface V1ApiV1AuthFirebaseCreateRequest {
    /**
     * 
     * @type {FireBaseAuth}
     * @memberof V1ApiV1AuthFirebaseCreate
     */
    readonly fireBaseAuth: FireBaseAuth
}

/**
 * Request parameters for v1ChatsRoomsAddParticipants operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsAddParticipantsRequest
 */
export interface V1ApiV1ChatsRoomsAddParticipantsRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsAddParticipants
     */
    readonly id: string

    /**
     * 
     * @type {ChatRoom}
     * @memberof V1ApiV1ChatsRoomsAddParticipants
     */
    readonly chatRoom: ChatRoom
}

/**
 * Request parameters for v1ChatsRoomsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsCreateRequest
 */
export interface V1ApiV1ChatsRoomsCreateRequest {
    /**
     * 
     * @type {ChatRoomCreate}
     * @memberof V1ApiV1ChatsRoomsCreate
     */
    readonly chatRoomCreate: ChatRoomCreate
}

/**
 * Request parameters for v1ChatsRoomsDeleteMessage operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsDeleteMessageRequest
 */
export interface V1ApiV1ChatsRoomsDeleteMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsDeleteMessage
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsDeleteMessage
     */
    readonly messageId: string
}

/**
 * Request parameters for v1ChatsRoomsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsDestroyRequest
 */
export interface V1ApiV1ChatsRoomsDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsDestroy
     */
    readonly id: string
}

/**
 * Request parameters for v1ChatsRoomsEditMessage operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsEditMessageRequest
 */
export interface V1ApiV1ChatsRoomsEditMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsEditMessage
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsEditMessage
     */
    readonly messageId: string

    /**
     * 
     * @type {PatchedChatRoom}
     * @memberof V1ApiV1ChatsRoomsEditMessage
     */
    readonly patchedChatRoom?: PatchedChatRoom
}

/**
 * Request parameters for v1ChatsRoomsLeave operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsLeaveRequest
 */
export interface V1ApiV1ChatsRoomsLeaveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsLeave
     */
    readonly id: string

    /**
     * 
     * @type {ChatRoom}
     * @memberof V1ApiV1ChatsRoomsLeave
     */
    readonly chatRoom: ChatRoom
}

/**
 * Request parameters for v1ChatsRoomsList operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsListRequest
 */
export interface V1ApiV1ChatsRoomsListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1ChatsRoomsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1ChatsRoomsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1ChatsRoomsMessages operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsMessagesRequest
 */
export interface V1ApiV1ChatsRoomsMessagesRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessages
     */
    readonly id: string

    /**
     * Filter by message type
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessages
     */
    readonly messageType?: string

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessages
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1ChatsRoomsMessages
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1ChatsRoomsMessages
     */
    readonly pageSize?: number

    /**
     * Search in message content
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessages
     */
    readonly search?: string
}

/**
 * Request parameters for v1ChatsRoomsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsPartialUpdateRequest
 */
export interface V1ApiV1ChatsRoomsPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PatchedChatRoom}
     * @memberof V1ApiV1ChatsRoomsPartialUpdate
     */
    readonly patchedChatRoom?: PatchedChatRoom
}

/**
 * Request parameters for v1ChatsRoomsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsRetrieveRequest
 */
export interface V1ApiV1ChatsRoomsRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for v1ChatsRoomsSendMessage operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsSendMessageRequest
 */
export interface V1ApiV1ChatsRoomsSendMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsSendMessage
     */
    readonly id: string

    /**
     * 
     * @type {MessageCreate}
     * @memberof V1ApiV1ChatsRoomsSendMessage
     */
    readonly messageCreate: MessageCreate
}

/**
 * Request parameters for v1ChatsRoomsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsUpdateRequest
 */
export interface V1ApiV1ChatsRoomsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsUpdate
     */
    readonly id: string

    /**
     * 
     * @type {ChatRoom}
     * @memberof V1ApiV1ChatsRoomsUpdate
     */
    readonly chatRoom: ChatRoom
}

/**
 * Request parameters for v1CoreLanguagesList operation in V1Api.
 * @export
 * @interface V1ApiV1CoreLanguagesListRequest
 */
export interface V1ApiV1CoreLanguagesListRequest {
    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreLanguagesList
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreLanguagesList
     */
    readonly isDefault?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1CoreLanguagesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1CoreLanguagesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1CoreLanguagesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1CoreLanguagesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1CoreLanguagesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1CoreLanguagesRetrieveRequest
 */
export interface V1ApiV1CoreLanguagesRetrieveRequest {
    /**
     * A unique integer value identifying this Language.
     * @type {number}
     * @memberof V1ApiV1CoreLanguagesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceAreasCreate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceAreasCreateRequest
 */
export interface V1ApiV1CoreServiceAreasCreateRequest {
    /**
     * 
     * @type {ServiceAreaCreateUpdate}
     * @memberof V1ApiV1CoreServiceAreasCreate
     */
    readonly serviceAreaCreateUpdate: ServiceAreaCreateUpdate
}

/**
 * Request parameters for v1CoreServiceAreasDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceAreasDestroyRequest
 */
export interface V1ApiV1CoreServiceAreasDestroyRequest {
    /**
     * A unique integer value identifying this Service Area.
     * @type {number}
     * @memberof V1ApiV1CoreServiceAreasDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceAreasList operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceAreasListRequest
 */
export interface V1ApiV1CoreServiceAreasListRequest {
    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreServiceAreasList
     */
    readonly isActive?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1CoreServiceAreasList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1CoreServiceAreasList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1CoreServiceAreasList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1CoreServiceAreasList
     */
    readonly search?: string
}

/**
 * Request parameters for v1CoreServiceAreasPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceAreasPartialUpdateRequest
 */
export interface V1ApiV1CoreServiceAreasPartialUpdateRequest {
    /**
     * A unique integer value identifying this Service Area.
     * @type {number}
     * @memberof V1ApiV1CoreServiceAreasPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedServiceAreaCreateUpdate}
     * @memberof V1ApiV1CoreServiceAreasPartialUpdate
     */
    readonly patchedServiceAreaCreateUpdate?: PatchedServiceAreaCreateUpdate
}

/**
 * Request parameters for v1CoreServiceAreasRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceAreasRetrieveRequest
 */
export interface V1ApiV1CoreServiceAreasRetrieveRequest {
    /**
     * A unique integer value identifying this Service Area.
     * @type {number}
     * @memberof V1ApiV1CoreServiceAreasRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceAreasUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceAreasUpdateRequest
 */
export interface V1ApiV1CoreServiceAreasUpdateRequest {
    /**
     * A unique integer value identifying this Service Area.
     * @type {number}
     * @memberof V1ApiV1CoreServiceAreasUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ServiceAreaCreateUpdate}
     * @memberof V1ApiV1CoreServiceAreasUpdate
     */
    readonly serviceAreaCreateUpdate: ServiceAreaCreateUpdate
}

/**
 * Request parameters for v1CoreServiceCategoriesCreate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceCategoriesCreateRequest
 */
export interface V1ApiV1CoreServiceCategoriesCreateRequest {
    /**
     * 
     * @type {ServiceCategoryCreateUpdate}
     * @memberof V1ApiV1CoreServiceCategoriesCreate
     */
    readonly serviceCategoryCreateUpdate: ServiceCategoryCreateUpdate
}

/**
 * Request parameters for v1CoreServiceCategoriesDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceCategoriesDestroyRequest
 */
export interface V1ApiV1CoreServiceCategoriesDestroyRequest {
    /**
     * A unique integer value identifying this Service Category.
     * @type {number}
     * @memberof V1ApiV1CoreServiceCategoriesDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceCategoriesList operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceCategoriesListRequest
 */
export interface V1ApiV1CoreServiceCategoriesListRequest {
    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreServiceCategoriesList
     */
    readonly featured?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreServiceCategoriesList
     */
    readonly isActive?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1CoreServiceCategoriesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1CoreServiceCategoriesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1CoreServiceCategoriesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1CoreServiceCategoriesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1CoreServiceCategoriesPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceCategoriesPartialUpdateRequest
 */
export interface V1ApiV1CoreServiceCategoriesPartialUpdateRequest {
    /**
     * A unique integer value identifying this Service Category.
     * @type {number}
     * @memberof V1ApiV1CoreServiceCategoriesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedServiceCategoryCreateUpdate}
     * @memberof V1ApiV1CoreServiceCategoriesPartialUpdate
     */
    readonly patchedServiceCategoryCreateUpdate?: PatchedServiceCategoryCreateUpdate
}

/**
 * Request parameters for v1CoreServiceCategoriesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceCategoriesRetrieveRequest
 */
export interface V1ApiV1CoreServiceCategoriesRetrieveRequest {
    /**
     * A unique integer value identifying this Service Category.
     * @type {number}
     * @memberof V1ApiV1CoreServiceCategoriesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceCategoriesUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceCategoriesUpdateRequest
 */
export interface V1ApiV1CoreServiceCategoriesUpdateRequest {
    /**
     * A unique integer value identifying this Service Category.
     * @type {number}
     * @memberof V1ApiV1CoreServiceCategoriesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ServiceCategoryCreateUpdate}
     * @memberof V1ApiV1CoreServiceCategoriesUpdate
     */
    readonly serviceCategoryCreateUpdate: ServiceCategoryCreateUpdate
}

/**
 * Request parameters for v1CoreServiceSubcategoriesCreate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceSubcategoriesCreateRequest
 */
export interface V1ApiV1CoreServiceSubcategoriesCreateRequest {
    /**
     * 
     * @type {ServiceSubcategoryCreateUpdate}
     * @memberof V1ApiV1CoreServiceSubcategoriesCreate
     */
    readonly serviceSubcategoryCreateUpdate: ServiceSubcategoryCreateUpdate
}

/**
 * Request parameters for v1CoreServiceSubcategoriesDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceSubcategoriesDestroyRequest
 */
export interface V1ApiV1CoreServiceSubcategoriesDestroyRequest {
    /**
     * A unique integer value identifying this Service Subcategory.
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceSubcategoriesList operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceSubcategoriesListRequest
 */
export interface V1ApiV1CoreServiceSubcategoriesListRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly category?: number

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly featured?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly isActive?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1CoreServiceSubcategoriesPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceSubcategoriesPartialUpdateRequest
 */
export interface V1ApiV1CoreServiceSubcategoriesPartialUpdateRequest {
    /**
     * A unique integer value identifying this Service Subcategory.
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedServiceSubcategoryCreateUpdate}
     * @memberof V1ApiV1CoreServiceSubcategoriesPartialUpdate
     */
    readonly patchedServiceSubcategoryCreateUpdate?: PatchedServiceSubcategoryCreateUpdate
}

/**
 * Request parameters for v1CoreServiceSubcategoriesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceSubcategoriesRetrieveRequest
 */
export interface V1ApiV1CoreServiceSubcategoriesRetrieveRequest {
    /**
     * A unique integer value identifying this Service Subcategory.
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceSubcategoriesUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceSubcategoriesUpdateRequest
 */
export interface V1ApiV1CoreServiceSubcategoriesUpdateRequest {
    /**
     * A unique integer value identifying this Service Subcategory.
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ServiceSubcategoryCreateUpdate}
     * @memberof V1ApiV1CoreServiceSubcategoriesUpdate
     */
    readonly serviceSubcategoryCreateUpdate: ServiceSubcategoryCreateUpdate
}

/**
 * Request parameters for v1CoreSupportFaqCreate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSupportFaqCreateRequest
 */
export interface V1ApiV1CoreSupportFaqCreateRequest {
    /**
     * 
     * @type {SupportFAQCreateUpdate}
     * @memberof V1ApiV1CoreSupportFaqCreate
     */
    readonly supportFAQCreateUpdate: SupportFAQCreateUpdate
}

/**
 * Request parameters for v1CoreSupportFaqDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSupportFaqDestroyRequest
 */
export interface V1ApiV1CoreSupportFaqDestroyRequest {
    /**
     * A unique integer value identifying this Support FAQ.
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreSupportFaqList operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSupportFaqListRequest
 */
export interface V1ApiV1CoreSupportFaqListRequest {
    /**
     * * &#x60;general&#x60; - Основная информация * &#x60;specialist&#x60; - Specialist * &#x60;reviews&#x60; - Reviews * &#x60;account&#x60; - Аккаунт * &#x60;search&#x60; - Найти * &#x60;safety&#x60; - Safety
     * @type {'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist'}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly category?: 'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist'

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly language?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly search?: string
}

/**
 * Request parameters for v1CoreSupportFaqPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSupportFaqPartialUpdateRequest
 */
export interface V1ApiV1CoreSupportFaqPartialUpdateRequest {
    /**
     * A unique integer value identifying this Support FAQ.
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedSupportFAQCreateUpdate}
     * @memberof V1ApiV1CoreSupportFaqPartialUpdate
     */
    readonly patchedSupportFAQCreateUpdate?: PatchedSupportFAQCreateUpdate
}

/**
 * Request parameters for v1CoreSupportFaqRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSupportFaqRetrieveRequest
 */
export interface V1ApiV1CoreSupportFaqRetrieveRequest {
    /**
     * A unique integer value identifying this Support FAQ.
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreSupportFaqUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSupportFaqUpdateRequest
 */
export interface V1ApiV1CoreSupportFaqUpdateRequest {
    /**
     * A unique integer value identifying this Support FAQ.
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqUpdate
     */
    readonly id: number

    /**
     * 
     * @type {SupportFAQCreateUpdate}
     * @memberof V1ApiV1CoreSupportFaqUpdate
     */
    readonly supportFAQCreateUpdate: SupportFAQCreateUpdate
}

/**
 * Request parameters for v1CoreSystemSettingsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSystemSettingsCreateRequest
 */
export interface V1ApiV1CoreSystemSettingsCreateRequest {
    /**
     * 
     * @type {SystemSettingsCreateUpdate}
     * @memberof V1ApiV1CoreSystemSettingsCreate
     */
    readonly systemSettingsCreateUpdate: SystemSettingsCreateUpdate
}

/**
 * Request parameters for v1CoreSystemSettingsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSystemSettingsDestroyRequest
 */
export interface V1ApiV1CoreSystemSettingsDestroyRequest {
    /**
     * A unique integer value identifying this System Setting.
     * @type {number}
     * @memberof V1ApiV1CoreSystemSettingsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreSystemSettingsList operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSystemSettingsListRequest
 */
export interface V1ApiV1CoreSystemSettingsListRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1CoreSystemSettingsList
     */
    readonly category?: string

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreSystemSettingsList
     */
    readonly isActive?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1CoreSystemSettingsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1CoreSystemSettingsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1CoreSystemSettingsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1CoreSystemSettingsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1CoreSystemSettingsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSystemSettingsPartialUpdateRequest
 */
export interface V1ApiV1CoreSystemSettingsPartialUpdateRequest {
    /**
     * A unique integer value identifying this System Setting.
     * @type {number}
     * @memberof V1ApiV1CoreSystemSettingsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedSystemSettingsCreateUpdate}
     * @memberof V1ApiV1CoreSystemSettingsPartialUpdate
     */
    readonly patchedSystemSettingsCreateUpdate?: PatchedSystemSettingsCreateUpdate
}

/**
 * Request parameters for v1CoreSystemSettingsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSystemSettingsRetrieveRequest
 */
export interface V1ApiV1CoreSystemSettingsRetrieveRequest {
    /**
     * A unique integer value identifying this System Setting.
     * @type {number}
     * @memberof V1ApiV1CoreSystemSettingsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreSystemSettingsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSystemSettingsUpdateRequest
 */
export interface V1ApiV1CoreSystemSettingsUpdateRequest {
    /**
     * A unique integer value identifying this System Setting.
     * @type {number}
     * @memberof V1ApiV1CoreSystemSettingsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {SystemSettingsCreateUpdate}
     * @memberof V1ApiV1CoreSystemSettingsUpdate
     */
    readonly systemSettingsCreateUpdate: SystemSettingsCreateUpdate
}

/**
 * Request parameters for v1JobAssignmentsComplete operation in V1Api.
 * @export
 * @interface V1ApiV1JobAssignmentsCompleteRequest
 */
export interface V1ApiV1JobAssignmentsCompleteRequest {
    /**
     * A unique integer value identifying this Job Assignment.
     * @type {number}
     * @memberof V1ApiV1JobAssignmentsComplete
     */
    readonly id: number

    /**
     * 
     * @type {JobAssignment}
     * @memberof V1ApiV1JobAssignmentsComplete
     */
    readonly jobAssignment?: JobAssignment
}

/**
 * Request parameters for v1JobAssignmentsStart operation in V1Api.
 * @export
 * @interface V1ApiV1JobAssignmentsStartRequest
 */
export interface V1ApiV1JobAssignmentsStartRequest {
    /**
     * A unique integer value identifying this Job Assignment.
     * @type {number}
     * @memberof V1ApiV1JobAssignmentsStart
     */
    readonly id: number

    /**
     * 
     * @type {JobAssignment}
     * @memberof V1ApiV1JobAssignmentsStart
     */
    readonly jobAssignment?: JobAssignment
}

/**
 * Request parameters for v1JobsApply operation in V1Api.
 * @export
 * @interface V1ApiV1JobsApplyRequest
 */
export interface V1ApiV1JobsApplyRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsApply
     */
    readonly id: number

    /**
     * 
     * @type {JobApply}
     * @memberof V1ApiV1JobsApply
     */
    readonly jobApply: JobApply
}

/**
 * Request parameters for v1JobsBookmark operation in V1Api.
 * @export
 * @interface V1ApiV1JobsBookmarkRequest
 */
export interface V1ApiV1JobsBookmarkRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsBookmark
     */
    readonly id: number

    /**
     * 
     * @type {Job}
     * @memberof V1ApiV1JobsBookmark
     */
    readonly job: Job
}

/**
 * Request parameters for v1JobsCancel operation in V1Api.
 * @export
 * @interface V1ApiV1JobsCancelRequest
 */
export interface V1ApiV1JobsCancelRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsCancel
     */
    readonly id: number

    /**
     * 
     * @type {Job}
     * @memberof V1ApiV1JobsCancel
     */
    readonly job: Job
}

/**
 * Request parameters for v1JobsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1JobsCreateRequest
 */
export interface V1ApiV1JobsCreateRequest {
    /**
     * 
     * @type {Job}
     * @memberof V1ApiV1JobsCreate
     */
    readonly job: Job
}

/**
 * Request parameters for v1JobsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1JobsDestroyRequest
 */
export interface V1ApiV1JobsDestroyRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1JobsFavorite operation in V1Api.
 * @export
 * @interface V1ApiV1JobsFavoriteRequest
 */
export interface V1ApiV1JobsFavoriteRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsFavorite
     */
    readonly id: number

    /**
     * 
     * @type {Job}
     * @memberof V1ApiV1JobsFavorite
     */
    readonly job: Job
}

/**
 * Request parameters for v1JobsList operation in V1Api.
 * @export
 * @interface V1ApiV1JobsListRequest
 */
export interface V1ApiV1JobsListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1JobsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1JobsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1JobsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1JobsList
     */
    readonly search?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1JobsList
     */
    readonly serviceSubcategory?: number

    /**
     * * &#x60;draft&#x60; - Draft * &#x60;published&#x60; - Published * &#x60;assigned&#x60; - Assigned * &#x60;in_progress&#x60; - In Progress * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled
     * @type {'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published'}
     * @memberof V1ApiV1JobsList
     */
    readonly status?: 'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published'

    /**
     * * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @type {'high' | 'low' | 'medium' | 'urgent'}
     * @memberof V1ApiV1JobsList
     */
    readonly urgency?: 'high' | 'low' | 'medium' | 'urgent'
}

/**
 * Request parameters for v1JobsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1JobsPartialUpdateRequest
 */
export interface V1ApiV1JobsPartialUpdateRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedJob}
     * @memberof V1ApiV1JobsPartialUpdate
     */
    readonly patchedJob?: PatchedJob
}

/**
 * Request parameters for v1JobsPublish operation in V1Api.
 * @export
 * @interface V1ApiV1JobsPublishRequest
 */
export interface V1ApiV1JobsPublishRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsPublish
     */
    readonly id: number

    /**
     * 
     * @type {Job}
     * @memberof V1ApiV1JobsPublish
     */
    readonly job: Job
}

/**
 * Request parameters for v1JobsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1JobsRetrieveRequest
 */
export interface V1ApiV1JobsRetrieveRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1JobsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1JobsUpdateRequest
 */
export interface V1ApiV1JobsUpdateRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {Job}
     * @memberof V1ApiV1JobsUpdate
     */
    readonly job: Job
}

/**
 * Request parameters for v1LocationsCitiesList operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCitiesListRequest
 */
export interface V1ApiV1LocationsCitiesListRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1LocationsCitiesList
     */
    readonly country?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1LocationsCitiesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1LocationsCitiesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1LocationsCitiesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1LocationsCitiesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1LocationsCitiesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCitiesRetrieveRequest
 */
export interface V1ApiV1LocationsCitiesRetrieveRequest {
    /**
     * A unique integer value identifying this City.
     * @type {number}
     * @memberof V1ApiV1LocationsCitiesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1LocationsCountriesList operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCountriesListRequest
 */
export interface V1ApiV1LocationsCountriesListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1LocationsCountriesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1LocationsCountriesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1LocationsCountriesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1LocationsCountriesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1LocationsCountriesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCountriesRetrieveRequest
 */
export interface V1ApiV1LocationsCountriesRetrieveRequest {
    /**
     * A unique integer value identifying this Country.
     * @type {number}
     * @memberof V1ApiV1LocationsCountriesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1NotificationsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsCreateRequest
 */
export interface V1ApiV1NotificationsCreateRequest {
    /**
     * 
     * @type {NotificationCreate}
     * @memberof V1ApiV1NotificationsCreate
     */
    readonly notificationCreate: NotificationCreate
}

/**
 * Request parameters for v1NotificationsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsDestroyRequest
 */
export interface V1ApiV1NotificationsDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1NotificationsDestroy
     */
    readonly id: string
}

/**
 * Request parameters for v1NotificationsList operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsListRequest
 */
export interface V1ApiV1NotificationsListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1NotificationsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1NotificationsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1NotificationsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1NotificationsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1NotificationsMarkAllRead operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsMarkAllReadRequest
 */
export interface V1ApiV1NotificationsMarkAllReadRequest {
    /**
     * 
     * @type {Notification}
     * @memberof V1ApiV1NotificationsMarkAllRead
     */
    readonly notification: Notification
}

/**
 * Request parameters for v1NotificationsMarkRead operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsMarkReadRequest
 */
export interface V1ApiV1NotificationsMarkReadRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1NotificationsMarkRead
     */
    readonly id: string

    /**
     * 
     * @type {Notification}
     * @memberof V1ApiV1NotificationsMarkRead
     */
    readonly notification: Notification
}

/**
 * Request parameters for v1NotificationsMarkUnread operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsMarkUnreadRequest
 */
export interface V1ApiV1NotificationsMarkUnreadRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1NotificationsMarkUnread
     */
    readonly id: string

    /**
     * 
     * @type {Notification}
     * @memberof V1ApiV1NotificationsMarkUnread
     */
    readonly notification: Notification
}

/**
 * Request parameters for v1NotificationsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsPartialUpdateRequest
 */
export interface V1ApiV1NotificationsPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1NotificationsPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PatchedNotificationUpdate}
     * @memberof V1ApiV1NotificationsPartialUpdate
     */
    readonly patchedNotificationUpdate?: PatchedNotificationUpdate
}

/**
 * Request parameters for v1NotificationsRecent operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsRecentRequest
 */
export interface V1ApiV1NotificationsRecentRequest {
    /**
     * Number of days to look back
     * @type {number}
     * @memberof V1ApiV1NotificationsRecent
     */
    readonly days?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1NotificationsRecent
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1NotificationsRecent
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1NotificationsRecent
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1NotificationsRecent
     */
    readonly search?: string
}

/**
 * Request parameters for v1NotificationsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsRetrieveRequest
 */
export interface V1ApiV1NotificationsRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1NotificationsRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for v1NotificationsUnread operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsUnreadRequest
 */
export interface V1ApiV1NotificationsUnreadRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1NotificationsUnread
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1NotificationsUnread
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1NotificationsUnread
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1NotificationsUnread
     */
    readonly search?: string
}

/**
 * Request parameters for v1NotificationsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsUpdateRequest
 */
export interface V1ApiV1NotificationsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1NotificationsUpdate
     */
    readonly id: string

    /**
     * 
     * @type {NotificationUpdate}
     * @memberof V1ApiV1NotificationsUpdate
     */
    readonly notificationUpdate?: NotificationUpdate
}

/**
 * Request parameters for v1ProfileAvatarCreate operation in V1Api.
 * @export
 * @interface V1ApiV1ProfileAvatarCreateRequest
 */
export interface V1ApiV1ProfileAvatarCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ProfileAvatarCreate
     */
    readonly action: string

    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof V1ApiV1ProfileAvatarCreate
     */
    readonly requestBody?: { [key: string]: any; }
}

/**
 * Request parameters for v1ProfileNotificationSettingsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ProfileNotificationSettingsPartialUpdateRequest
 */
export interface V1ApiV1ProfileNotificationSettingsPartialUpdateRequest {
    /**
     * 
     * @type {PatchedUserNotificationSettings}
     * @memberof V1ApiV1ProfileNotificationSettingsPartialUpdate
     */
    readonly patchedUserNotificationSettings?: PatchedUserNotificationSettings
}

/**
 * Request parameters for v1ProfileNotificationSettingsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ProfileNotificationSettingsUpdateRequest
 */
export interface V1ApiV1ProfileNotificationSettingsUpdateRequest {
    /**
     * 
     * @type {UserNotificationSettings}
     * @memberof V1ApiV1ProfileNotificationSettingsUpdate
     */
    readonly userNotificationSettings?: UserNotificationSettings
}

/**
 * Request parameters for v1ProfilePartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ProfilePartialUpdateRequest
 */
export interface V1ApiV1ProfilePartialUpdateRequest {
    /**
     * 
     * @type {PatchedUserUpdate}
     * @memberof V1ApiV1ProfilePartialUpdate
     */
    readonly patchedUserUpdate?: PatchedUserUpdate
}

/**
 * Request parameters for v1ProfileUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ProfileUpdateRequest
 */
export interface V1ApiV1ProfileUpdateRequest {
    /**
     * 
     * @type {UserUpdate}
     * @memberof V1ApiV1ProfileUpdate
     */
    readonly userUpdate?: UserUpdate
}

/**
 * Request parameters for v1ResumesArchive operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesArchiveRequest
 */
export interface V1ApiV1ResumesArchiveRequest {
    /**
     * A unique integer value identifying this master resume.
     * @type {number}
     * @memberof V1ApiV1ResumesArchive
     */
    readonly id: number

    /**
     * 
     * @type {MasterResume}
     * @memberof V1ApiV1ResumesArchive
     */
    readonly masterResume: MasterResume
}

/**
 * Request parameters for v1ResumesCreate operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesCreateRequest
 */
export interface V1ApiV1ResumesCreateRequest {
    /**
     * 
     * @type {MasterResume}
     * @memberof V1ApiV1ResumesCreate
     */
    readonly masterResume: MasterResume
}

/**
 * Request parameters for v1ResumesDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesDestroyRequest
 */
export interface V1ApiV1ResumesDestroyRequest {
    /**
     * A unique integer value identifying this master resume.
     * @type {number}
     * @memberof V1ApiV1ResumesDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1ResumesList operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesListRequest
 */
export interface V1ApiV1ResumesListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1ResumesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1ResumesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1ResumesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1ResumesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1ResumesPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesPartialUpdateRequest
 */
export interface V1ApiV1ResumesPartialUpdateRequest {
    /**
     * A unique integer value identifying this master resume.
     * @type {number}
     * @memberof V1ApiV1ResumesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedMasterResume}
     * @memberof V1ApiV1ResumesPartialUpdate
     */
    readonly patchedMasterResume?: PatchedMasterResume
}

/**
 * Request parameters for v1ResumesPublish operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesPublishRequest
 */
export interface V1ApiV1ResumesPublishRequest {
    /**
     * A unique integer value identifying this master resume.
     * @type {number}
     * @memberof V1ApiV1ResumesPublish
     */
    readonly id: number

    /**
     * 
     * @type {MasterResume}
     * @memberof V1ApiV1ResumesPublish
     */
    readonly masterResume: MasterResume
}

/**
 * Request parameters for v1ResumesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesRetrieveRequest
 */
export interface V1ApiV1ResumesRetrieveRequest {
    /**
     * A unique integer value identifying this master resume.
     * @type {number}
     * @memberof V1ApiV1ResumesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1ResumesUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesUpdateRequest
 */
export interface V1ApiV1ResumesUpdateRequest {
    /**
     * A unique integer value identifying this master resume.
     * @type {number}
     * @memberof V1ApiV1ResumesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {MasterResume}
     * @memberof V1ApiV1ResumesUpdate
     */
    readonly masterResume: MasterResume
}

/**
 * Request parameters for v1UsersMastersDetailsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMastersDetailsRetrieveRequest
 */
export interface V1ApiV1UsersMastersDetailsRetrieveRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1UsersMastersDetailsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1UsersMyCertificatesCreate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyCertificatesCreateRequest
 */
export interface V1ApiV1UsersMyCertificatesCreateRequest {
    /**
     * 
     * @type {Certificate}
     * @memberof V1ApiV1UsersMyCertificatesCreate
     */
    readonly certificate: Certificate
}

/**
 * Request parameters for v1UsersMyCertificatesDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyCertificatesDestroyRequest
 */
export interface V1ApiV1UsersMyCertificatesDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyCertificatesDestroy
     */
    readonly id: string
}

/**
 * Request parameters for v1UsersMyCertificatesList operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyCertificatesListRequest
 */
export interface V1ApiV1UsersMyCertificatesListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1UsersMyCertificatesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1UsersMyCertificatesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1UsersMyCertificatesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1UsersMyCertificatesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1UsersMyCertificatesPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyCertificatesPartialUpdateRequest
 */
export interface V1ApiV1UsersMyCertificatesPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyCertificatesPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PatchedCertificate}
     * @memberof V1ApiV1UsersMyCertificatesPartialUpdate
     */
    readonly patchedCertificate?: PatchedCertificate
}

/**
 * Request parameters for v1UsersMyCertificatesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyCertificatesRetrieveRequest
 */
export interface V1ApiV1UsersMyCertificatesRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyCertificatesRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for v1UsersMyCertificatesUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyCertificatesUpdateRequest
 */
export interface V1ApiV1UsersMyCertificatesUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyCertificatesUpdate
     */
    readonly id: string

    /**
     * 
     * @type {Certificate}
     * @memberof V1ApiV1UsersMyCertificatesUpdate
     */
    readonly certificate: Certificate
}

/**
 * Request parameters for v1UsersMyEmployerCreateCreate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyEmployerCreateCreateRequest
 */
export interface V1ApiV1UsersMyEmployerCreateCreateRequest {
    /**
     * 
     * @type {EmployerProfileCreateUpdate}
     * @memberof V1ApiV1UsersMyEmployerCreateCreate
     */
    readonly employerProfileCreateUpdate?: EmployerProfileCreateUpdate
}

/**
 * Request parameters for v1UsersMyEmployerPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyEmployerPartialUpdateRequest
 */
export interface V1ApiV1UsersMyEmployerPartialUpdateRequest {
    /**
     * 
     * @type {PatchedEmployerProfileCreateUpdate}
     * @memberof V1ApiV1UsersMyEmployerPartialUpdate
     */
    readonly patchedEmployerProfileCreateUpdate?: PatchedEmployerProfileCreateUpdate
}

/**
 * Request parameters for v1UsersMyEmployerUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyEmployerUpdateRequest
 */
export interface V1ApiV1UsersMyEmployerUpdateRequest {
    /**
     * 
     * @type {EmployerProfileCreateUpdate}
     * @memberof V1ApiV1UsersMyEmployerUpdate
     */
    readonly employerProfileCreateUpdate?: EmployerProfileCreateUpdate
}

/**
 * Request parameters for v1UsersMyMasterCreateCreate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyMasterCreateCreateRequest
 */
export interface V1ApiV1UsersMyMasterCreateCreateRequest {
    /**
     * 
     * @type {MasterProfileCreateUpdate}
     * @memberof V1ApiV1UsersMyMasterCreateCreate
     */
    readonly masterProfileCreateUpdate?: MasterProfileCreateUpdate
}

/**
 * Request parameters for v1UsersMyMasterPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyMasterPartialUpdateRequest
 */
export interface V1ApiV1UsersMyMasterPartialUpdateRequest {
    /**
     * 
     * @type {PatchedMasterProfileCreateUpdate}
     * @memberof V1ApiV1UsersMyMasterPartialUpdate
     */
    readonly patchedMasterProfileCreateUpdate?: PatchedMasterProfileCreateUpdate
}

/**
 * Request parameters for v1UsersMyMasterUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyMasterUpdateRequest
 */
export interface V1ApiV1UsersMyMasterUpdateRequest {
    /**
     * 
     * @type {MasterProfileCreateUpdate}
     * @memberof V1ApiV1UsersMyMasterUpdate
     */
    readonly masterProfileCreateUpdate?: MasterProfileCreateUpdate
}

/**
 * Request parameters for v1UsersMyPortfolioCreate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioCreateRequest
 */
export interface V1ApiV1UsersMyPortfolioCreateRequest {
    /**
     * 
     * @type {PortfolioItem}
     * @memberof V1ApiV1UsersMyPortfolioCreate
     */
    readonly portfolioItem: PortfolioItem
}

/**
 * Request parameters for v1UsersMyPortfolioDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioDestroyRequest
 */
export interface V1ApiV1UsersMyPortfolioDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioDestroy
     */
    readonly id: string
}

/**
 * Request parameters for v1UsersMyPortfolioList operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioListRequest
 */
export interface V1ApiV1UsersMyPortfolioListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1UsersMyPortfolioList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1UsersMyPortfolioList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioList
     */
    readonly search?: string
}

/**
 * Request parameters for v1UsersMyPortfolioPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioPartialUpdateRequest
 */
export interface V1ApiV1UsersMyPortfolioPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PatchedPortfolioItem}
     * @memberof V1ApiV1UsersMyPortfolioPartialUpdate
     */
    readonly patchedPortfolioItem?: PatchedPortfolioItem
}

/**
 * Request parameters for v1UsersMyPortfolioRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioRetrieveRequest
 */
export interface V1ApiV1UsersMyPortfolioRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for v1UsersMyPortfolioUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioUpdateRequest
 */
export interface V1ApiV1UsersMyPortfolioUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PortfolioItem}
     * @memberof V1ApiV1UsersMyPortfolioUpdate
     */
    readonly portfolioItem: PortfolioItem
}

/**
 * Request parameters for v1UsersMySkillsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMySkillsCreateRequest
 */
export interface V1ApiV1UsersMySkillsCreateRequest {
    /**
     * 
     * @type {MasterSkill}
     * @memberof V1ApiV1UsersMySkillsCreate
     */
    readonly masterSkill: MasterSkill
}

/**
 * Request parameters for v1UsersMySkillsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMySkillsDestroyRequest
 */
export interface V1ApiV1UsersMySkillsDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMySkillsDestroy
     */
    readonly id: string
}

/**
 * Request parameters for v1UsersMySkillsList operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMySkillsListRequest
 */
export interface V1ApiV1UsersMySkillsListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1UsersMySkillsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1UsersMySkillsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1UsersMySkillsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1UsersMySkillsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1UsersMySkillsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMySkillsPartialUpdateRequest
 */
export interface V1ApiV1UsersMySkillsPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMySkillsPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PatchedMasterSkill}
     * @memberof V1ApiV1UsersMySkillsPartialUpdate
     */
    readonly patchedMasterSkill?: PatchedMasterSkill
}

/**
 * Request parameters for v1UsersMySkillsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMySkillsRetrieveRequest
 */
export interface V1ApiV1UsersMySkillsRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMySkillsRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for v1UsersMySkillsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMySkillsUpdateRequest
 */
export interface V1ApiV1UsersMySkillsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMySkillsUpdate
     */
    readonly id: string

    /**
     * 
     * @type {MasterSkill}
     * @memberof V1ApiV1UsersMySkillsUpdate
     */
    readonly masterSkill: MasterSkill
}

/**
 * Request parameters for v1UsersProfessionsList operation in V1Api.
 * @export
 * @interface V1ApiV1UsersProfessionsListRequest
 */
export interface V1ApiV1UsersProfessionsListRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1UsersProfessionsList
     */
    readonly category?: number

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1UsersProfessionsList
     */
    readonly isActive?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1UsersProfessionsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1UsersProfessionsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1UsersProfessionsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1UsersProfessionsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1UsersSkillsList operation in V1Api.
 * @export
 * @interface V1ApiV1UsersSkillsListRequest
 */
export interface V1ApiV1UsersSkillsListRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1UsersSkillsList
     */
    readonly category?: number

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1UsersSkillsList
     */
    readonly isActive?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1UsersSkillsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1UsersSkillsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1UsersSkillsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1UsersSkillsList
     */
    readonly search?: string
}

/**
 * V1Api - object-oriented interface
 * @export
 * @class V1Api
 * @extends {BaseAPI}
 */
export class V1Api extends BaseAPI implements V1ApiInterface {
    /**
     * Accept a job application
     * @param {V1ApiV1ApplicationsAcceptCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsAcceptCreate(requestParameters: V1ApiV1ApplicationsAcceptCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsAcceptCreate(requestParameters.id, requestParameters.jobApplication, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing job applications.
     * @param {V1ApiV1ApplicationsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsCreate(requestParameters: V1ApiV1ApplicationsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsCreate(requestParameters.jobApplication, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing job applications.
     * @param {V1ApiV1ApplicationsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsDestroy(requestParameters: V1ApiV1ApplicationsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing job applications.
     * @param {V1ApiV1ApplicationsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsList(requestParameters: V1ApiV1ApplicationsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsList(requestParameters.amountMax, requestParameters.amountMin, requestParameters.appliedAtAfter, requestParameters.appliedAtBefore, requestParameters.jobServiceSubcategory, requestParameters.jobUrgency, requestParameters.jobId, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing job applications.
     * @param {V1ApiV1ApplicationsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsPartialUpdate(requestParameters: V1ApiV1ApplicationsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsPartialUpdate(requestParameters.id, requestParameters.patchedJobApplication, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reject a job application
     * @param {V1ApiV1ApplicationsRejectCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsRejectCreate(requestParameters: V1ApiV1ApplicationsRejectCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsRejectCreate(requestParameters.id, requestParameters.jobApplication, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing job applications.
     * @param {V1ApiV1ApplicationsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsRetrieve(requestParameters: V1ApiV1ApplicationsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing job applications.
     * @param {V1ApiV1ApplicationsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsUpdate(requestParameters: V1ApiV1ApplicationsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsUpdate(requestParameters.id, requestParameters.jobApplication, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Withdraw a job by master
     * @param {V1ApiV1ApplicationsWithdrawCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsWithdrawCreate(requestParameters: V1ApiV1ApplicationsWithdrawCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsWithdrawCreate(requestParameters.id, requestParameters.jobApplication, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsCreate(requestParameters: V1ApiV1AssignmentsCreateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsCreate(requestParameters.jobAssignment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsDestroy(requestParameters: V1ApiV1AssignmentsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsList(requestParameters: V1ApiV1AssignmentsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsPartialUpdate(requestParameters: V1ApiV1AssignmentsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsPartialUpdate(requestParameters.id, requestParameters.patchedJobAssignment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rate a completed job assignment
     * @param {V1ApiV1AssignmentsRateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsRateCreate(requestParameters: V1ApiV1AssignmentsRateCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsRateCreate(requestParameters.id, requestParameters.rating, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsRetrieve(requestParameters: V1ApiV1AssignmentsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsUpdate(requestParameters: V1ApiV1AssignmentsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsUpdate(requestParameters.id, requestParameters.jobAssignment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update progress notes for an assignment
     * @param {V1ApiV1AssignmentsUpdateProgressPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsUpdateProgressPartialUpdate(requestParameters: V1ApiV1AssignmentsUpdateProgressPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsUpdateProgressPartialUpdate(requestParameters.id, requestParameters.patchedProgressUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authenticate or register a user using Firebase ID token.
     * @param {V1ApiV1AuthFirebaseCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AuthFirebaseCreate(requestParameters: V1ApiV1AuthFirebaseCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AuthFirebaseCreate(requestParameters.fireBaseAuth, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * User logout view - enhanced version of api_users LogOutView
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AuthLogoutCreate(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AuthLogoutCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add participants to chat room
     * @param {V1ApiV1ChatsRoomsAddParticipantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsAddParticipants(requestParameters: V1ApiV1ChatsRoomsAddParticipantsRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsAddParticipants(requestParameters.id, requestParameters.chatRoom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing chat rooms
     * @param {V1ApiV1ChatsRoomsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsCreate(requestParameters: V1ApiV1ChatsRoomsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsCreate(requestParameters.chatRoomCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a message from chat room
     * @param {V1ApiV1ChatsRoomsDeleteMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsDeleteMessage(requestParameters: V1ApiV1ChatsRoomsDeleteMessageRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsDeleteMessage(requestParameters.id, requestParameters.messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing chat rooms
     * @param {V1ApiV1ChatsRoomsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsDestroy(requestParameters: V1ApiV1ChatsRoomsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit a message in chat room
     * @param {V1ApiV1ChatsRoomsEditMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsEditMessage(requestParameters: V1ApiV1ChatsRoomsEditMessageRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsEditMessage(requestParameters.id, requestParameters.messageId, requestParameters.patchedChatRoom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Leave a chat room
     * @param {V1ApiV1ChatsRoomsLeaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsLeave(requestParameters: V1ApiV1ChatsRoomsLeaveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsLeave(requestParameters.id, requestParameters.chatRoom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing chat rooms
     * @param {V1ApiV1ChatsRoomsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsList(requestParameters: V1ApiV1ChatsRoomsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all messages in a chat room with filtering and search
     * @param {V1ApiV1ChatsRoomsMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsMessages(requestParameters: V1ApiV1ChatsRoomsMessagesRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsMessages(requestParameters.id, requestParameters.messageType, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing chat rooms
     * @param {V1ApiV1ChatsRoomsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsPartialUpdate(requestParameters: V1ApiV1ChatsRoomsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsPartialUpdate(requestParameters.id, requestParameters.patchedChatRoom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing chat rooms
     * @param {V1ApiV1ChatsRoomsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsRetrieve(requestParameters: V1ApiV1ChatsRoomsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send message to chat room
     * @param {V1ApiV1ChatsRoomsSendMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsSendMessage(requestParameters: V1ApiV1ChatsRoomsSendMessageRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsSendMessage(requestParameters.id, requestParameters.messageCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing chat rooms
     * @param {V1ApiV1ChatsRoomsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsUpdate(requestParameters: V1ApiV1ChatsRoomsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsUpdate(requestParameters.id, requestParameters.chatRoom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Languages - Read-only (managed via admin/fixtures).
     * @param {V1ApiV1CoreLanguagesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreLanguagesList(requestParameters: V1ApiV1CoreLanguagesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreLanguagesList(requestParameters.isActive, requestParameters.isDefault, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Languages - Read-only (managed via admin/fixtures).
     * @param {V1ApiV1CoreLanguagesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreLanguagesRetrieve(requestParameters: V1ApiV1CoreLanguagesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreLanguagesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceAreasCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceAreasCreate(requestParameters: V1ApiV1CoreServiceAreasCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceAreasCreate(requestParameters.serviceAreaCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceAreasDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceAreasDestroy(requestParameters: V1ApiV1CoreServiceAreasDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceAreasDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceAreasListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceAreasList(requestParameters: V1ApiV1CoreServiceAreasListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceAreasList(requestParameters.isActive, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceAreasPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceAreasPartialUpdate(requestParameters: V1ApiV1CoreServiceAreasPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceAreasPartialUpdate(requestParameters.id, requestParameters.patchedServiceAreaCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceAreasRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceAreasRetrieve(requestParameters: V1ApiV1CoreServiceAreasRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceAreasRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceAreasUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceAreasUpdate(requestParameters: V1ApiV1CoreServiceAreasUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceAreasUpdate(requestParameters.id, requestParameters.serviceAreaCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceCategoriesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceCategoriesCreate(requestParameters: V1ApiV1CoreServiceCategoriesCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceCategoriesCreate(requestParameters.serviceCategoryCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceCategoriesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceCategoriesDestroy(requestParameters: V1ApiV1CoreServiceCategoriesDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceCategoriesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceCategoriesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceCategoriesList(requestParameters: V1ApiV1CoreServiceCategoriesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceCategoriesList(requestParameters.featured, requestParameters.isActive, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceCategoriesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceCategoriesPartialUpdate(requestParameters: V1ApiV1CoreServiceCategoriesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceCategoriesPartialUpdate(requestParameters.id, requestParameters.patchedServiceCategoryCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceCategoriesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceCategoriesRetrieve(requestParameters: V1ApiV1CoreServiceCategoriesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceCategoriesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceCategoriesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceCategoriesUpdate(requestParameters: V1ApiV1CoreServiceCategoriesUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceCategoriesUpdate(requestParameters.id, requestParameters.serviceCategoryCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceSubcategoriesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceSubcategoriesCreate(requestParameters: V1ApiV1CoreServiceSubcategoriesCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceSubcategoriesCreate(requestParameters.serviceSubcategoryCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceSubcategoriesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceSubcategoriesDestroy(requestParameters: V1ApiV1CoreServiceSubcategoriesDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceSubcategoriesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceSubcategoriesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceSubcategoriesList(requestParameters: V1ApiV1CoreServiceSubcategoriesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceSubcategoriesList(requestParameters.category, requestParameters.featured, requestParameters.isActive, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceSubcategoriesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceSubcategoriesPartialUpdate(requestParameters: V1ApiV1CoreServiceSubcategoriesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceSubcategoriesPartialUpdate(requestParameters.id, requestParameters.patchedServiceSubcategoryCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceSubcategoriesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceSubcategoriesRetrieve(requestParameters: V1ApiV1CoreServiceSubcategoriesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceSubcategoriesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceSubcategoriesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceSubcategoriesUpdate(requestParameters: V1ApiV1CoreServiceSubcategoriesUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceSubcategoriesUpdate(requestParameters.id, requestParameters.serviceSubcategoryCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSupportFaqCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSupportFaqCreate(requestParameters: V1ApiV1CoreSupportFaqCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSupportFaqCreate(requestParameters.supportFAQCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSupportFaqDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSupportFaqDestroy(requestParameters: V1ApiV1CoreSupportFaqDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSupportFaqDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSupportFaqListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSupportFaqList(requestParameters: V1ApiV1CoreSupportFaqListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSupportFaqList(requestParameters.category, requestParameters.isActive, requestParameters.language, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSupportFaqPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSupportFaqPartialUpdate(requestParameters: V1ApiV1CoreSupportFaqPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSupportFaqPartialUpdate(requestParameters.id, requestParameters.patchedSupportFAQCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSupportFaqRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSupportFaqRetrieve(requestParameters: V1ApiV1CoreSupportFaqRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSupportFaqRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSupportFaqUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSupportFaqUpdate(requestParameters: V1ApiV1CoreSupportFaqUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSupportFaqUpdate(requestParameters.id, requestParameters.supportFAQCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSystemSettingsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSystemSettingsCreate(requestParameters: V1ApiV1CoreSystemSettingsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSystemSettingsCreate(requestParameters.systemSettingsCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSystemSettingsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSystemSettingsDestroy(requestParameters: V1ApiV1CoreSystemSettingsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSystemSettingsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSystemSettingsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSystemSettingsList(requestParameters: V1ApiV1CoreSystemSettingsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSystemSettingsList(requestParameters.category, requestParameters.isActive, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSystemSettingsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSystemSettingsPartialUpdate(requestParameters: V1ApiV1CoreSystemSettingsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSystemSettingsPartialUpdate(requestParameters.id, requestParameters.patchedSystemSettingsCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSystemSettingsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSystemSettingsRetrieve(requestParameters: V1ApiV1CoreSystemSettingsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSystemSettingsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSystemSettingsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSystemSettingsUpdate(requestParameters: V1ApiV1CoreSystemSettingsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSystemSettingsUpdate(requestParameters.id, requestParameters.systemSettingsCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Complete an assignment
     * @param {V1ApiV1JobAssignmentsCompleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobAssignmentsComplete(requestParameters: V1ApiV1JobAssignmentsCompleteRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobAssignmentsComplete(requestParameters.id, requestParameters.jobAssignment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start an assignment
     * @param {V1ApiV1JobAssignmentsStartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobAssignmentsStart(requestParameters: V1ApiV1JobAssignmentsStartRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobAssignmentsStart(requestParameters.id, requestParameters.jobAssignment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Apply to a job.
     * @param {V1ApiV1JobsApplyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsApply(requestParameters: V1ApiV1JobsApplyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsApply(requestParameters.id, requestParameters.jobApply, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Toggle bookmark status for a job
     * @param {V1ApiV1JobsBookmarkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsBookmark(requestParameters: V1ApiV1JobsBookmarkRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsBookmark(requestParameters.id, requestParameters.job, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel a job. Only allowed if job is in PUBLISHED or ASSIGNED state.
     * @param {V1ApiV1JobsCancelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsCancel(requestParameters: V1ApiV1JobsCancelRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsCancel(requestParameters.id, requestParameters.job, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing jobs.
     * @param {V1ApiV1JobsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsCreate(requestParameters: V1ApiV1JobsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsCreate(requestParameters.job, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing jobs.
     * @param {V1ApiV1JobsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsDestroy(requestParameters: V1ApiV1JobsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Toggle favorite status for a job
     * @param {V1ApiV1JobsFavoriteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsFavorite(requestParameters: V1ApiV1JobsFavoriteRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsFavorite(requestParameters.id, requestParameters.job, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing jobs.
     * @param {V1ApiV1JobsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsList(requestParameters: V1ApiV1JobsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.serviceSubcategory, requestParameters.status, requestParameters.urgency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing jobs.
     * @param {V1ApiV1JobsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsPartialUpdate(requestParameters: V1ApiV1JobsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsPartialUpdate(requestParameters.id, requestParameters.patchedJob, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish a draft job. Only allowed if job is in DRAFT state.
     * @param {V1ApiV1JobsPublishRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsPublish(requestParameters: V1ApiV1JobsPublishRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsPublish(requestParameters.id, requestParameters.job, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing jobs.
     * @param {V1ApiV1JobsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsRetrieve(requestParameters: V1ApiV1JobsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing jobs.
     * @param {V1ApiV1JobsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsUpdate(requestParameters: V1ApiV1JobsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsUpdate(requestParameters.id, requestParameters.job, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1LocationsCitiesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCitiesList(requestParameters: V1ApiV1LocationsCitiesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCitiesList(requestParameters.country, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1LocationsCitiesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCitiesRetrieve(requestParameters: V1ApiV1LocationsCitiesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCitiesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1LocationsCountriesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCountriesList(requestParameters: V1ApiV1LocationsCountriesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCountriesList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1LocationsCountriesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCountriesRetrieve(requestParameters: V1ApiV1LocationsCountriesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCountriesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get notification counts for current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsCount(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {V1ApiV1NotificationsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsCreate(requestParameters: V1ApiV1NotificationsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsCreate(requestParameters.notificationCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {V1ApiV1NotificationsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsDestroy(requestParameters: V1ApiV1NotificationsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {V1ApiV1NotificationsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsList(requestParameters: V1ApiV1NotificationsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark all notifications as read for current user
     * @param {V1ApiV1NotificationsMarkAllReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsMarkAllRead(requestParameters: V1ApiV1NotificationsMarkAllReadRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsMarkAllRead(requestParameters.notification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark specific notification as read
     * @param {V1ApiV1NotificationsMarkReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsMarkRead(requestParameters: V1ApiV1NotificationsMarkReadRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsMarkRead(requestParameters.id, requestParameters.notification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark specific notification as unread
     * @param {V1ApiV1NotificationsMarkUnreadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsMarkUnread(requestParameters: V1ApiV1NotificationsMarkUnreadRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsMarkUnread(requestParameters.id, requestParameters.notification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {V1ApiV1NotificationsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsPartialUpdate(requestParameters: V1ApiV1NotificationsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsPartialUpdate(requestParameters.id, requestParameters.patchedNotificationUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get recent notifications (last 7 days)
     * @param {V1ApiV1NotificationsRecentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsRecent(requestParameters: V1ApiV1NotificationsRecentRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsRecent(requestParameters.days, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {V1ApiV1NotificationsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsRetrieve(requestParameters: V1ApiV1NotificationsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get unread notifications for current user
     * @param {V1ApiV1NotificationsUnreadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsUnread(requestParameters: V1ApiV1NotificationsUnreadRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsUnread(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {V1ApiV1NotificationsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsUpdate(requestParameters: V1ApiV1NotificationsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsUpdate(requestParameters.id, requestParameters.notificationUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Base Action
     * @param {V1ApiV1ProfileAvatarCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfileAvatarCreate(requestParameters: V1ApiV1ProfileAvatarCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfileAvatarCreate(requestParameters.action, requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1ProfileNotificationSettingsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfileNotificationSettingsPartialUpdate(requestParameters: V1ApiV1ProfileNotificationSettingsPartialUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfileNotificationSettingsPartialUpdate(requestParameters.patchedUserNotificationSettings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfileNotificationSettingsRetrieve(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfileNotificationSettingsRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1ProfileNotificationSettingsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfileNotificationSettingsUpdate(requestParameters: V1ApiV1ProfileNotificationSettingsUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfileNotificationSettingsUpdate(requestParameters.userNotificationSettings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1ProfilePartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfilePartialUpdate(requestParameters: V1ApiV1ProfilePartialUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfilePartialUpdate(requestParameters.patchedUserUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfileRetrieve(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfileRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1ProfileUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfileUpdate(requestParameters: V1ApiV1ProfileUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfileUpdate(requestParameters.userUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Archive a published resume.
     * @param {V1ApiV1ResumesArchiveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesArchive(requestParameters: V1ApiV1ResumesArchiveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesArchive(requestParameters.id, requestParameters.masterResume, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {V1ApiV1ResumesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesCreate(requestParameters: V1ApiV1ResumesCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesCreate(requestParameters.masterResume, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {V1ApiV1ResumesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesDestroy(requestParameters: V1ApiV1ResumesDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {V1ApiV1ResumesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesList(requestParameters: V1ApiV1ResumesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {V1ApiV1ResumesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesPartialUpdate(requestParameters: V1ApiV1ResumesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesPartialUpdate(requestParameters.id, requestParameters.patchedMasterResume, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish a draft resume. Only allowed if in DRAFT state.
     * @param {V1ApiV1ResumesPublishRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesPublish(requestParameters: V1ApiV1ResumesPublishRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesPublish(requestParameters.id, requestParameters.masterResume, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {V1ApiV1ResumesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesRetrieve(requestParameters: V1ApiV1ResumesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {V1ApiV1ResumesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesUpdate(requestParameters: V1ApiV1ResumesUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesUpdate(requestParameters.id, requestParameters.masterResume, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve public service provider profile.
     * @param {V1ApiV1UsersMastersDetailsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMastersDetailsRetrieve(requestParameters: V1ApiV1UsersMastersDetailsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMastersDetailsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for certificates.
     * @param {V1ApiV1UsersMyCertificatesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyCertificatesCreate(requestParameters: V1ApiV1UsersMyCertificatesCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyCertificatesCreate(requestParameters.certificate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for certificates.
     * @param {V1ApiV1UsersMyCertificatesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyCertificatesDestroy(requestParameters: V1ApiV1UsersMyCertificatesDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyCertificatesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for certificates.
     * @param {V1ApiV1UsersMyCertificatesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyCertificatesList(requestParameters: V1ApiV1UsersMyCertificatesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyCertificatesList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for certificates.
     * @param {V1ApiV1UsersMyCertificatesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyCertificatesPartialUpdate(requestParameters: V1ApiV1UsersMyCertificatesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyCertificatesPartialUpdate(requestParameters.id, requestParameters.patchedCertificate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for certificates.
     * @param {V1ApiV1UsersMyCertificatesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyCertificatesRetrieve(requestParameters: V1ApiV1UsersMyCertificatesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyCertificatesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for certificates.
     * @param {V1ApiV1UsersMyCertificatesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyCertificatesUpdate(requestParameters: V1ApiV1UsersMyCertificatesUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyCertificatesUpdate(requestParameters.id, requestParameters.certificate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyEmployerCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyEmployerCreateCreate(requestParameters: V1ApiV1UsersMyEmployerCreateCreateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyEmployerCreateCreate(requestParameters.employerProfileCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyEmployerPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyEmployerPartialUpdate(requestParameters: V1ApiV1UsersMyEmployerPartialUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyEmployerPartialUpdate(requestParameters.patchedEmployerProfileCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyEmployerRetrieve(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyEmployerRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyEmployerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyEmployerUpdate(requestParameters: V1ApiV1UsersMyEmployerUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyEmployerUpdate(requestParameters.employerProfileCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyMasterCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyMasterCreateCreate(requestParameters: V1ApiV1UsersMyMasterCreateCreateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyMasterCreateCreate(requestParameters.masterProfileCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyMasterPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyMasterPartialUpdate(requestParameters: V1ApiV1UsersMyMasterPartialUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyMasterPartialUpdate(requestParameters.patchedMasterProfileCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyMasterRetrieve(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyMasterRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyMasterUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyMasterUpdate(requestParameters: V1ApiV1UsersMyMasterUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyMasterUpdate(requestParameters.masterProfileCreateUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master portfolio items.
     * @param {V1ApiV1UsersMyPortfolioCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioCreate(requestParameters: V1ApiV1UsersMyPortfolioCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioCreate(requestParameters.portfolioItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master portfolio items.
     * @param {V1ApiV1UsersMyPortfolioDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioDestroy(requestParameters: V1ApiV1UsersMyPortfolioDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master portfolio items.
     * @param {V1ApiV1UsersMyPortfolioListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioList(requestParameters: V1ApiV1UsersMyPortfolioListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master portfolio items.
     * @param {V1ApiV1UsersMyPortfolioPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioPartialUpdate(requestParameters: V1ApiV1UsersMyPortfolioPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioPartialUpdate(requestParameters.id, requestParameters.patchedPortfolioItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master portfolio items.
     * @param {V1ApiV1UsersMyPortfolioRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioRetrieve(requestParameters: V1ApiV1UsersMyPortfolioRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master portfolio items.
     * @param {V1ApiV1UsersMyPortfolioUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioUpdate(requestParameters: V1ApiV1UsersMyPortfolioUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioUpdate(requestParameters.id, requestParameters.portfolioItem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master skills.
     * @param {V1ApiV1UsersMySkillsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMySkillsCreate(requestParameters: V1ApiV1UsersMySkillsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMySkillsCreate(requestParameters.masterSkill, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master skills.
     * @param {V1ApiV1UsersMySkillsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMySkillsDestroy(requestParameters: V1ApiV1UsersMySkillsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMySkillsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master skills.
     * @param {V1ApiV1UsersMySkillsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMySkillsList(requestParameters: V1ApiV1UsersMySkillsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMySkillsList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master skills.
     * @param {V1ApiV1UsersMySkillsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMySkillsPartialUpdate(requestParameters: V1ApiV1UsersMySkillsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMySkillsPartialUpdate(requestParameters.id, requestParameters.patchedMasterSkill, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master skills.
     * @param {V1ApiV1UsersMySkillsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMySkillsRetrieve(requestParameters: V1ApiV1UsersMySkillsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMySkillsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master skills.
     * @param {V1ApiV1UsersMySkillsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMySkillsUpdate(requestParameters: V1ApiV1UsersMySkillsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMySkillsUpdate(requestParameters.id, requestParameters.masterSkill, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update online status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyStatusCreate(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyStatusCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all available professions.
     * @param {V1ApiV1UsersProfessionsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersProfessionsList(requestParameters: V1ApiV1UsersProfessionsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersProfessionsList(requestParameters.category, requestParameters.isActive, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all available skills.
     * @param {V1ApiV1UsersSkillsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersSkillsList(requestParameters: V1ApiV1UsersSkillsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersSkillsList(requestParameters.category, requestParameters.isActive, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }
}


