/* tslint:disable */
/* eslint-disable */
/**
 * Master KG Job Portal API
 * Master KG Job Portal API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { type AxiosPromise, type AxiosInstance, type AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface AssignmentMaster
 */
export interface AssignmentMaster {
    /**
     * 
     * @type {number}
     * @memberof AssignmentMaster
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof AssignmentMaster
     */
    'user': AssignmentMasterUser;
}
/**
 * 
 * @export
 * @interface AssignmentMasterUser
 */
export interface AssignmentMasterUser {
    /**
     * 
     * @type {number}
     * @memberof AssignmentMasterUser
     */
    'id': number;
    /**
     * Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
     * @type {string}
     * @memberof AssignmentMasterUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentMasterUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentMasterUser
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentMasterUser
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssignmentMasterUser
     */
    'photo_url': string | null;
}
/**
 * Generic serializer for attachments.
 * @export
 * @interface Attachment
 */
export interface Attachment {
    /**
     * 
     * @type {number}
     * @memberof Attachment
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    'original_filename': string;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    'file_url': string;
    /**
     * 
     * @type {number}
     * @memberof Attachment
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    'file_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    'mime_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof Attachment
     */
    'uploaded_by': number;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Attachment
     */
    'is_public'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    'created_at': string;
}
/**
 * Generic serializer for attachments.
 * @export
 * @interface AttachmentRequest
 */
export interface AttachmentRequest {
    /**
     * 
     * @type {string}
     * @memberof AttachmentRequest
     */
    'original_filename': string;
    /**
     * 
     * @type {number}
     * @memberof AttachmentRequest
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof AttachmentRequest
     */
    'file_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AttachmentRequest
     */
    'mime_type'?: string;
    /**
     * 
     * @type {number}
     * @memberof AttachmentRequest
     */
    'uploaded_by': number;
    /**
     * 
     * @type {string}
     * @memberof AttachmentRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AttachmentRequest
     */
    'is_public'?: boolean;
}
/**
 * 
 * @export
 * @interface CResponse
 */
export interface CResponse {
    /**
     * A message describing the result of the operation.
     * @type {string}
     * @memberof CResponse
     */
    'message': string;
    /**
     * 
     * @type {any}
     * @memberof CResponse
     */
    'data': any;
}
/**
 * * `general` - Основная информация * `specialist` - Specialist * `reviews` - Reviews * `account` - Аккаунт * `search` - Найти * `safety` - Safety
 * @export
 * @enum {string}
 */

export enum CategoryEnum {
    general = 'general',
    specialist = 'specialist',
    reviews = 'reviews',
    account = 'account',
    search = 'search',
    safety = 'safety'
}


/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface Certificate
 */
export interface Certificate {
    /**
     * 
     * @type {number}
     * @memberof Certificate
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'issuing_organization': string;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'issue_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'expiry_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Certificate
     */
    'certificate_number'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Certificate
     */
    'is_verified': boolean;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface CertificateRequest
 */
export interface CertificateRequest {
    /**
     * 
     * @type {string}
     * @memberof CertificateRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CertificateRequest
     */
    'issuing_organization': string;
    /**
     * 
     * @type {string}
     * @memberof CertificateRequest
     */
    'issue_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CertificateRequest
     */
    'expiry_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CertificateRequest
     */
    'certificate_number'?: string;
}
/**
 * Serializer for chat participants.
 * @export
 * @interface ChatParticipant
 */
export interface ChatParticipant {
    /**
     * 
     * @type {number}
     * @memberof ChatParticipant
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof ChatParticipant
     */
    'user': AssignmentMasterUser;
    /**
     * 
     * @type {RoleEnum}
     * @memberof ChatParticipant
     */
    'role'?: RoleEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ChatParticipant
     */
    'is_online'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatParticipant
     */
    'last_seen'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ChatParticipant
     */
    'unread_count'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChatParticipant
     */
    'notifications_enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatParticipant
     */
    'mute_until'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChatParticipant
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ChatParticipant
     */
    'updated_at': string;
}
/**
 * Serializer for chat participants.
 * @export
 * @interface ChatParticipantRequest
 */
export interface ChatParticipantRequest {
    /**
     * 
     * @type {RoleEnum}
     * @memberof ChatParticipantRequest
     */
    'role'?: RoleEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ChatParticipantRequest
     */
    'is_online'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatParticipantRequest
     */
    'last_seen'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ChatParticipantRequest
     */
    'unread_count'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChatParticipantRequest
     */
    'notifications_enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatParticipantRequest
     */
    'mute_until'?: string | null;
}
/**
 * Serializer for chat rooms.
 * @export
 * @interface ChatRoom
 */
export interface ChatRoom {
    /**
     * 
     * @type {number}
     * @memberof ChatRoom
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ChatRoom
     */
    'job'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ChatRoom
     */
    'title': string;
    /**
     * 
     * @type {boolean}
     * @memberof ChatRoom
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {ChatTypeEnum}
     * @memberof ChatRoom
     */
    'chat_type'?: ChatTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ChatRoom
     */
    'last_message_at': string | null;
    /**
     * 
     * @type {Array<ChatParticipant>}
     * @memberof ChatRoom
     */
    'participants': Array<ChatParticipant>;
    /**
     * 
     * @type {string}
     * @memberof ChatRoom
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ChatRoom
     */
    'updated_at': string;
}
/**
 * Serializer for creating chat rooms.
 * @export
 * @interface ChatRoomCreate
 */
export interface ChatRoomCreate {
    /**
     * 
     * @type {number}
     * @memberof ChatRoomCreate
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomCreate
     */
    'title': string;
    /**
     * List of user IDs to add as participants
     * @type {Array<number>}
     * @memberof ChatRoomCreate
     */
    'participants_users_ids'?: Array<number>;
    /**
     * 
     * @type {Array<ChatParticipant>}
     * @memberof ChatRoomCreate
     */
    'participants': Array<ChatParticipant>;
    /**
     * 
     * @type {number}
     * @memberof ChatRoomCreate
     */
    'job'?: number | null;
    /**
     * 
     * @type {ChatTypeEnum}
     * @memberof ChatRoomCreate
     */
    'chat_type'?: ChatTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomCreate
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomCreate
     */
    'updated_at': string;
}
/**
 * Serializer for creating chat rooms.
 * @export
 * @interface ChatRoomCreateRequest
 */
export interface ChatRoomCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatRoomCreateRequest
     */
    'title': string;
    /**
     * List of user IDs to add as participants
     * @type {Array<number>}
     * @memberof ChatRoomCreateRequest
     */
    'participants_users_ids'?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof ChatRoomCreateRequest
     */
    'job'?: number | null;
    /**
     * 
     * @type {ChatTypeEnum}
     * @memberof ChatRoomCreateRequest
     */
    'chat_type'?: ChatTypeEnum;
}
/**
 * 
 * @export
 * @interface ChatRoomForSearchResponse
 */
export interface ChatRoomForSearchResponse {
    /**
     * 
     * @type {number}
     * @memberof ChatRoomForSearchResponse
     */
    'id': number;
    /**
     * 
     * @type {ChatRoomForSearchResponseMaster}
     * @memberof ChatRoomForSearchResponse
     */
    'master': ChatRoomForSearchResponseMaster;
}
/**
 * 
 * @export
 * @interface ChatRoomForSearchResponseMaster
 */
export interface ChatRoomForSearchResponseMaster {
    /**
     * 
     * @type {number}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'user': AssignmentMasterUser;
    /**
     * 
     * @type {boolean}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'works_remotely'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'accepts_clients_at_location'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'travels_to_clients'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'is_available'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'hourly_rate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'response_time_hours'?: number;
    /**
     * 
     * @type {number}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'work_experience_start_year'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'education_institution'?: string;
    /**
     * e.g., 2005-2009
     * @type {string}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'education_years'?: string;
    /**
     * List of languages spoken
     * @type {any}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'languages'?: any;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'about_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'current_location'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'is_online'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'last_seen'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'is_verified_provider'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'is_top_master'?: boolean;
    /**
     * 
     * @type {PublicMasterProfileProfession}
     * @memberof ChatRoomForSearchResponseMaster
     */
    'profession': PublicMasterProfileProfession;
}
/**
 * Serializer for chat rooms.
 * @export
 * @interface ChatRoomRequest
 */
export interface ChatRoomRequest {
    /**
     * 
     * @type {number}
     * @memberof ChatRoomRequest
     */
    'job'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ChatRoomRequest
     */
    'title': string;
    /**
     * 
     * @type {boolean}
     * @memberof ChatRoomRequest
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {ChatTypeEnum}
     * @memberof ChatRoomRequest
     */
    'chat_type'?: ChatTypeEnum;
}
/**
 * * `job_chat` - Job Chat * `support_chat` - Support Chat * `general_chat` - General Chat
 * @export
 * @enum {string}
 */

export enum ChatTypeEnum {
    job_chat = 'job_chat',
    support_chat = 'support_chat',
    general_chat = 'general_chat'
}


/**
 * Serializer for City model.
 * @export
 * @interface City
 */
export interface City {
    /**
     * 
     * @type {number}
     * @memberof City
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof City
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof City
     */
    'code': string;
    /**
     * 
     * @type {CityCountry}
     * @memberof City
     */
    'country': CityCountry;
    /**
     * 
     * @type {string}
     * @memberof City
     */
    'country_name': string;
    /**
     * 
     * @type {string}
     * @memberof City
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof City
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface CityCountry
 */
export interface CityCountry {
    /**
     * 
     * @type {number}
     * @memberof CityCountry
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CityCountry
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CityCountry
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof CityCountry
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof CityCountry
     */
    'updated_at': string;
}
/**
 * Simplified serializer for city lists.
 * @export
 * @interface CityList
 */
export interface CityList {
    /**
     * 
     * @type {number}
     * @memberof CityList
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CityList
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CityList
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof CityList
     */
    'country_name': string;
}
/**
 * Serializer for City model.
 * @export
 * @interface CityRequest
 */
export interface CityRequest {
    /**
     * 
     * @type {string}
     * @memberof CityRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CityRequest
     */
    'code': string;
}
/**
 * * `beginner` - Beginner * `intermediate` - Intermediate * `advanced` - Advanced * `expert` - Expert
 * @export
 * @enum {string}
 */

export enum ComplexityLevelEnum {
    beginner = 'beginner',
    intermediate = 'intermediate',
    advanced = 'advanced',
    expert = 'expert'
}


/**
 * Serializer for Country model.
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * 
     * @type {number}
     * @memberof Country
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'updated_at': string;
}
/**
 * Serializer for Country model.
 * @export
 * @interface CountryRequest
 */
export interface CountryRequest {
    /**
     * 
     * @type {string}
     * @memberof CountryRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CountryRequest
     */
    'code': string;
}
/**
 * Basic employer information for job serialization.
 * @export
 * @interface EmployerBasic
 */
export interface EmployerBasic {
    /**
     * 
     * @type {number}
     * @memberof EmployerBasic
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof EmployerBasic
     */
    'user': AssignmentMasterUser;
    /**
     * 
     * @type {number}
     * @memberof EmployerBasic
     */
    'total_orders'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmployerBasic
     */
    'completed_orders'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmployerBasic
     */
    'cancelled_orders'?: number;
}
/**
 * Basic employer information for job serialization.
 * @export
 * @interface EmployerBasicRequest
 */
export interface EmployerBasicRequest {
    /**
     * 
     * @type {number}
     * @memberof EmployerBasicRequest
     */
    'total_orders'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmployerBasicRequest
     */
    'completed_orders'?: number;
    /**
     * 
     * @type {number}
     * @memberof EmployerBasicRequest
     */
    'cancelled_orders'?: number;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface EmployerProfileCreateUpdate
 */
export interface EmployerProfileCreateUpdate {
    /**
     * 
     * @type {number}
     * @memberof EmployerProfileCreateUpdate
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EmployerProfileCreateUpdate
     */
    'contact_phone'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof EmployerProfileCreateUpdate
     */
    'preferred_services'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof EmployerProfileCreateUpdate
     */
    'favorite_masters'?: Array<number>;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface EmployerProfileCreateUpdateRequest
 */
export interface EmployerProfileCreateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof EmployerProfileCreateUpdateRequest
     */
    'contact_phone'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof EmployerProfileCreateUpdateRequest
     */
    'preferred_services'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof EmployerProfileCreateUpdateRequest
     */
    'favorite_masters'?: Array<number>;
}
/**
 * * `general` - Основная информация * `support` - Support * `sales` - Sales * `feedback` - Feedback * `other` - Other
 * @export
 * @enum {string}
 */

export enum EnquiryTypeEnum {
    general = 'general',
    support = 'support',
    sales = 'sales',
    feedback = 'feedback',
    other = 'other'
}


/**
 * Serializer for Firebase authentication request
 * @export
 * @interface FireBaseAuthRequest
 */
export interface FireBaseAuthRequest {
    /**
     * Firebase ID token
     * @type {string}
     * @memberof FireBaseAuthRequest
     */
    'id_token': string;
}
/**
 * Serializer for Firebase authentication response
 * @export
 * @interface FirebaseAuthResponse
 */
export interface FirebaseAuthResponse {
    /**
     * DRF authentication token
     * @type {string}
     * @memberof FirebaseAuthResponse
     */
    'token': string;
    /**
     * 
     * @type {FirebaseAuthResponseUser}
     * @memberof FirebaseAuthResponse
     */
    'user': FirebaseAuthResponseUser;
    /**
     * 
     * @type {string}
     * @memberof FirebaseAuthResponse
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface FirebaseAuthResponseUser
 */
export interface FirebaseAuthResponseUser {
    /**
     * 
     * @type {number}
     * @memberof FirebaseAuthResponseUser
     */
    'id': number;
    /**
     * Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
     * @type {string}
     * @memberof FirebaseAuthResponseUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof FirebaseAuthResponseUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof FirebaseAuthResponseUser
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FirebaseAuthResponseUser
     */
    'photo_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FirebaseAuthResponseUser
     */
    'groups': string;
}
/**
 * Comprehensive serializer for home page data with proper OpenAPI documentation.
 * @export
 * @interface HomePageData
 */
export interface HomePageData {
    /**
     * Featured service categories
     * @type {Array<ServiceCategoryWithCount>}
     * @memberof HomePageData
     */
    'featured_categories': Array<ServiceCategoryWithCount>;
    /**
     * Recommended masters for the user
     * @type {Array<MasterRecommendation>}
     * @memberof HomePageData
     */
    'recommended_masters': Array<MasterRecommendation>;
    /**
     * Current user location
     * @type {string}
     * @memberof HomePageData
     */
    'user_location': string;
    /**
     * Total number of available masters
     * @type {number}
     * @memberof HomePageData
     */
    'total_masters_count': number;
    /**
     * Total number of published jobs
     * @type {number}
     * @memberof HomePageData
     */
    'total_jobs_count': number;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'id': number;
    /**
     * 
     * @type {JobEmployer}
     * @memberof Job
     */
    'employer': JobEmployer;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'service_subcategory'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'description': string;
    /**
     * 
     * @type {Status30eEnum}
     * @memberof Job
     */
    'status'?: Status30eEnum;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'location': string;
    /**
     * 
     * @type {number}
     * @memberof Job
     */
    'city'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'service_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'service_time'?: string | null;
    /**
     * 
     * @type {UrgencyEnum}
     * @memberof Job
     */
    'urgency'?: UrgencyEnum;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'budget_min'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'budget_max'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'final_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'special_requirements'?: string;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof Job
     */
    'attachments': Array<Attachment>;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface JobApiAction
 */
export interface JobApiAction {
    /**
     * A message describing the result of the operation.
     * @type {string}
     * @memberof JobApiAction
     */
    'message': string;
    /**
     * 
     * @type {JobApplicationJob}
     * @memberof JobApiAction
     */
    'data': JobApplicationJob;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface JobApplication
 */
export interface JobApplication {
    /**
     * 
     * @type {number}
     * @memberof JobApplication
     */
    'id': number;
    /**
     * 
     * @type {JobApplicationJob}
     * @memberof JobApplication
     */
    'job': JobApplicationJob;
    /**
     * 
     * @type {number}
     * @memberof JobApplication
     */
    'applicant': number | null;
    /**
     * 
     * @type {JobApplicationStatusEnum}
     * @memberof JobApplication
     */
    'status'?: JobApplicationStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof JobApplication
     */
    'applied_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobApplication
     */
    'accepted_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplication
     */
    'rejected_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplication
     */
    'withdrawn_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplication
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobApplication
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface JobApplicationApiAction
 */
export interface JobApplicationApiAction {
    /**
     * A message describing the result of the operation.
     * @type {string}
     * @memberof JobApplicationApiAction
     */
    'message': string;
    /**
     * 
     * @type {JobApplicationApiActionData}
     * @memberof JobApplicationApiAction
     */
    'data': JobApplicationApiActionData;
}
/**
 * 
 * @export
 * @interface JobApplicationApiActionData
 */
export interface JobApplicationApiActionData {
    /**
     * 
     * @type {JobAssignmentAcceptedApplication}
     * @memberof JobApplicationApiActionData
     */
    'application': JobAssignmentAcceptedApplication;
}
/**
 * 
 * @export
 * @interface JobApplicationJob
 */
export interface JobApplicationJob {
    /**
     * 
     * @type {number}
     * @memberof JobApplicationJob
     */
    'id': number;
    /**
     * 
     * @type {JobEmployer}
     * @memberof JobApplicationJob
     */
    'employer': JobEmployer;
    /**
     * 
     * @type {number}
     * @memberof JobApplicationJob
     */
    'service_subcategory'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'description': string;
    /**
     * 
     * @type {Status30eEnum}
     * @memberof JobApplicationJob
     */
    'status'?: Status30eEnum;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'location': string;
    /**
     * 
     * @type {number}
     * @memberof JobApplicationJob
     */
    'city'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'service_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'service_time'?: string | null;
    /**
     * 
     * @type {UrgencyEnum}
     * @memberof JobApplicationJob
     */
    'urgency'?: UrgencyEnum;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'budget_min'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'budget_max'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'final_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'special_requirements'?: string;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof JobApplicationJob
     */
    'attachments': Array<Attachment>;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobApplicationJob
     */
    'updated_at': string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface JobApplicationRequest
 */
export interface JobApplicationRequest {
    /**
     * 
     * @type {number}
     * @memberof JobApplicationRequest
     */
    'applicant': number | null;
    /**
     * 
     * @type {JobApplicationStatusEnum}
     * @memberof JobApplicationRequest
     */
    'status'?: JobApplicationStatusEnum;
}
/**
 * * `pending` - Pending * `accepted` - Accepted * `rejected` - Rejected * `withdrawn` - Withdrawn
 * @export
 * @enum {string}
 */

export enum JobApplicationStatusEnum {
    pending = 'pending',
    accepted = 'accepted',
    rejected = 'rejected',
    withdrawn = 'withdrawn'
}


/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface JobApplyRequest
 */
export interface JobApplyRequest {
    /**
     * ID of the job to apply for
     * @type {number}
     * @memberof JobApplyRequest
     */
    'job_id': number;
    /**
     * 
     * @type {string}
     * @memberof JobApplyRequest
     */
    'amount': string;
    /**
     * 
     * @type {string}
     * @memberof JobApplyRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {number}
     * @memberof JobApplyRequest
     */
    'estimated_duration'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof JobApplyRequest
     */
    'resume'?: number | null;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface JobAssignment
 */
export interface JobAssignment {
    /**
     * 
     * @type {number}
     * @memberof JobAssignment
     */
    'id': number;
    /**
     * 
     * @type {JobAssignmentStatusEnum}
     * @memberof JobAssignment
     */
    'status'?: JobAssignmentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof JobAssignment
     */
    'assigned_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobAssignment
     */
    'started_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignment
     */
    'completed_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignment
     */
    'progress_notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobAssignment
     */
    'completion_notes'?: string;
    /**
     * 
     * @type {number}
     * @memberof JobAssignment
     */
    'client_rating'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignment
     */
    'client_review'?: string;
    /**
     * 
     * @type {JobApplicationJob}
     * @memberof JobAssignment
     */
    'job': JobApplicationJob;
    /**
     * 
     * @type {JobAssignmentMaster}
     * @memberof JobAssignment
     */
    'master': JobAssignmentMaster;
    /**
     * 
     * @type {JobAssignmentAcceptedApplication}
     * @memberof JobAssignment
     */
    'accepted_application': JobAssignmentAcceptedApplication;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof JobAssignment
     */
    'attachments': Array<Attachment>;
}
/**
 * 
 * @export
 * @interface JobAssignmentAcceptedApplication
 */
export interface JobAssignmentAcceptedApplication {
    /**
     * 
     * @type {number}
     * @memberof JobAssignmentAcceptedApplication
     */
    'id': number;
    /**
     * 
     * @type {JobApplicationJob}
     * @memberof JobAssignmentAcceptedApplication
     */
    'job': JobApplicationJob;
    /**
     * 
     * @type {number}
     * @memberof JobAssignmentAcceptedApplication
     */
    'applicant': number | null;
    /**
     * 
     * @type {JobApplicationStatusEnum}
     * @memberof JobAssignmentAcceptedApplication
     */
    'status'?: JobApplicationStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentAcceptedApplication
     */
    'applied_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentAcceptedApplication
     */
    'accepted_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentAcceptedApplication
     */
    'rejected_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentAcceptedApplication
     */
    'withdrawn_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentAcceptedApplication
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentAcceptedApplication
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface JobAssignmentApiAction
 */
export interface JobAssignmentApiAction {
    /**
     * A message describing the result of the operation.
     * @type {string}
     * @memberof JobAssignmentApiAction
     */
    'message': string;
    /**
     * 
     * @type {JobAssignmentApiActionData}
     * @memberof JobAssignmentApiAction
     */
    'data': JobAssignmentApiActionData;
}
/**
 * 
 * @export
 * @interface JobAssignmentApiActionData
 */
export interface JobAssignmentApiActionData {
    /**
     * 
     * @type {WrapperAssignment}
     * @memberof JobAssignmentApiActionData
     */
    'assignment': WrapperAssignment;
}
/**
 * Serializer for completing job assignments with rating and review.
 * @export
 * @interface JobAssignmentCompletionRequest
 */
export interface JobAssignmentCompletionRequest {
    /**
     * Notes about the completion
     * @type {string}
     * @memberof JobAssignmentCompletionRequest
     */
    'completion_notes'?: string;
}
/**
 * 
 * @export
 * @interface JobAssignmentMaster
 */
export interface JobAssignmentMaster {
    /**
     * 
     * @type {number}
     * @memberof JobAssignmentMaster
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof JobAssignmentMaster
     */
    'user': AssignmentMasterUser;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface JobAssignmentRequest
 */
export interface JobAssignmentRequest {
    /**
     * 
     * @type {JobAssignmentStatusEnum}
     * @memberof JobAssignmentRequest
     */
    'status'?: JobAssignmentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentRequest
     */
    'started_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentRequest
     */
    'completed_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentRequest
     */
    'progress_notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentRequest
     */
    'completion_notes'?: string;
    /**
     * 
     * @type {number}
     * @memberof JobAssignmentRequest
     */
    'client_rating'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof JobAssignmentRequest
     */
    'client_review'?: string;
}
/**
 * Serializer for job assignment with review data.
 * @export
 * @interface JobAssignmentReview
 */
export interface JobAssignmentReview {
    /**
     * Job ID
     * @type {number}
     * @memberof JobAssignmentReview
     */
    'job_id': number;
    /**
     * Job title
     * @type {string}
     * @memberof JobAssignmentReview
     */
    'job_title': string;
    /**
     * Master name
     * @type {string}
     * @memberof JobAssignmentReview
     */
    'master_name': string;
    /**
     * Client name
     * @type {string}
     * @memberof JobAssignmentReview
     */
    'client_name': string;
    /**
     * Client rating (1-5 stars)
     * @type {number}
     * @memberof JobAssignmentReview
     */
    'client_rating': number | null;
    /**
     * Client review text
     * @type {string}
     * @memberof JobAssignmentReview
     */
    'client_review': string | null;
    /**
     * Master rating (1-5 stars)
     * @type {number}
     * @memberof JobAssignmentReview
     */
    'master_rating': number | null;
    /**
     * Master review text
     * @type {string}
     * @memberof JobAssignmentReview
     */
    'master_review': string | null;
    /**
     * Job completion date
     * @type {string}
     * @memberof JobAssignmentReview
     */
    'completed_at': string;
}
/**
 * * `assigned` - Assigned * `in_progress` - In Progress * `completed` - Completed * `cancelled` - Cancelled
 * @export
 * @enum {string}
 */

export enum JobAssignmentStatusEnum {
    assigned = 'assigned',
    in_progress = 'in_progress',
    completed = 'completed',
    cancelled = 'cancelled'
}


/**
 * 
 * @export
 * @interface JobEmployer
 */
export interface JobEmployer {
    /**
     * 
     * @type {number}
     * @memberof JobEmployer
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof JobEmployer
     */
    'user': AssignmentMasterUser;
    /**
     * 
     * @type {number}
     * @memberof JobEmployer
     */
    'total_orders'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobEmployer
     */
    'completed_orders'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobEmployer
     */
    'cancelled_orders'?: number;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface JobRequest
 */
export interface JobRequest {
    /**
     * 
     * @type {number}
     * @memberof JobRequest
     */
    'service_subcategory'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof JobRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof JobRequest
     */
    'description': string;
    /**
     * 
     * @type {Status30eEnum}
     * @memberof JobRequest
     */
    'status'?: Status30eEnum;
    /**
     * 
     * @type {string}
     * @memberof JobRequest
     */
    'location': string;
    /**
     * 
     * @type {number}
     * @memberof JobRequest
     */
    'city'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof JobRequest
     */
    'service_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobRequest
     */
    'service_time'?: string | null;
    /**
     * 
     * @type {UrgencyEnum}
     * @memberof JobRequest
     */
    'urgency'?: UrgencyEnum;
    /**
     * 
     * @type {string}
     * @memberof JobRequest
     */
    'budget_min'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobRequest
     */
    'budget_max'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobRequest
     */
    'final_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobRequest
     */
    'special_requirements'?: string;
}
/**
 * Simplified serializer for job search results using nested serializers.
 * @export
 * @interface JobSearch
 */
export interface JobSearch {
    /**
     * 
     * @type {number}
     * @memberof JobSearch
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof JobSearch
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof JobSearch
     */
    'description': string;
    /**
     * 
     * @type {Status30eEnum}
     * @memberof JobSearch
     */
    'status'?: Status30eEnum;
    /**
     * 
     * @type {JobSearchServiceSubcategory}
     * @memberof JobSearch
     */
    'service_subcategory': JobSearchServiceSubcategory;
    /**
     * 
     * @type {string}
     * @memberof JobSearch
     */
    'location': string;
    /**
     * 
     * @type {number}
     * @memberof JobSearch
     */
    'city'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof JobSearch
     */
    'service_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobSearch
     */
    'service_time'?: string | null;
    /**
     * 
     * @type {UrgencyEnum}
     * @memberof JobSearch
     */
    'urgency'?: UrgencyEnum;
    /**
     * 
     * @type {string}
     * @memberof JobSearch
     */
    'budget_min'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobSearch
     */
    'budget_max'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobSearch
     */
    'final_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobSearch
     */
    'special_requirements'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobSearch
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface JobSearchServiceSubcategory
 */
export interface JobSearchServiceSubcategory {
    /**
     * 
     * @type {number}
     * @memberof JobSearchServiceSubcategory
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof JobSearchServiceSubcategory
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof JobSearchServiceSubcategory
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof JobSearchServiceSubcategory
     */
    'icon'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof JobSearchServiceSubcategory
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof JobSearchServiceSubcategory
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof JobSearchServiceSubcategory
     */
    'image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof JobSearchServiceSubcategory
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof JobSearchServiceSubcategory
     */
    'base_price'?: string | null;
    /**
     * 
     * @type {ComplexityLevelEnum}
     * @memberof JobSearchServiceSubcategory
     */
    'complexity_level'?: ComplexityLevelEnum;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface Language
 */
export interface Language {
    /**
     * 
     * @type {number}
     * @memberof Language
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Language
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Language
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Language
     */
    'native_name': string;
    /**
     * 
     * @type {boolean}
     * @memberof Language
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Language
     */
    'is_default'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Language
     */
    'flag_icon'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Language
     */
    'rtl_support'?: boolean;
}
/**
 * * `info` - Info * `warning` - Warning * `error` - Error
 * @export
 * @enum {string}
 */

export enum LevelEnum {
    info = 'info',
    warning = 'warning',
    error = 'error'
}


/**
 * Serializer for logout response
 * @export
 * @interface LogoutResponse
 */
export interface LogoutResponse {
    /**
     * Logout confirmation message
     * @type {string}
     * @memberof LogoutResponse
     */
    'message': string;
}
/**
 * Basic master serializer for review data.
 * @export
 * @interface MasterBasic
 */
export interface MasterBasic {
    /**
     * 
     * @type {number}
     * @memberof MasterBasic
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof MasterBasic
     */
    'user': AssignmentMasterUser;
}
/**
 * Serializer for master online status update request.
 * @export
 * @interface MasterOnlineStatusRequestRequest
 */
export interface MasterOnlineStatusRequestRequest {
    /**
     * Online status to set
     * @type {boolean}
     * @memberof MasterOnlineStatusRequestRequest
     */
    'is_online'?: boolean;
}
/**
 * Serializer for master online status update response.
 * @export
 * @interface MasterOnlineStatusResponse
 */
export interface MasterOnlineStatusResponse {
    /**
     * Success message
     * @type {string}
     * @memberof MasterOnlineStatusResponse
     */
    'message': string;
    /**
     * Current online status
     * @type {boolean}
     * @memberof MasterOnlineStatusResponse
     */
    'is_online': boolean;
    /**
     * Last seen timestamp
     * @type {string}
     * @memberof MasterOnlineStatusResponse
     */
    'last_seen': string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface MasterProfileCreateUpdate
 */
export interface MasterProfileCreateUpdate {
    /**
     * 
     * @type {number}
     * @memberof MasterProfileCreateUpdate
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MasterProfileCreateUpdate
     */
    'profession'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof MasterProfileCreateUpdate
     */
    'service_areas'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof MasterProfileCreateUpdate
     */
    'services_offered'?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdate
     */
    'works_remotely'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdate
     */
    'accepts_clients_at_location'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdate
     */
    'travels_to_clients'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdate
     */
    'is_available'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MasterProfileCreateUpdate
     */
    'hourly_rate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MasterProfileCreateUpdate
     */
    'response_time_hours'?: number;
    /**
     * 
     * @type {number}
     * @memberof MasterProfileCreateUpdate
     */
    'work_experience_start_year'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MasterProfileCreateUpdate
     */
    'education_institution'?: string;
    /**
     * e.g., 2005-2009
     * @type {string}
     * @memberof MasterProfileCreateUpdate
     */
    'education_years'?: string;
    /**
     * List of languages spoken
     * @type {any}
     * @memberof MasterProfileCreateUpdate
     */
    'languages'?: any;
    /**
     * 
     * @type {string}
     * @memberof MasterProfileCreateUpdate
     */
    'about_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterProfileCreateUpdate
     */
    'current_location'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdate
     */
    'is_verified_provider': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdate
     */
    'is_top_master': boolean;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface MasterProfileCreateUpdateRequest
 */
export interface MasterProfileCreateUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'profession'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'service_areas'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'services_offered'?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'works_remotely'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'accepts_clients_at_location'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'travels_to_clients'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'is_available'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'hourly_rate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'response_time_hours'?: number;
    /**
     * 
     * @type {number}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'work_experience_start_year'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'education_institution'?: string;
    /**
     * e.g., 2005-2009
     * @type {string}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'education_years'?: string;
    /**
     * List of languages spoken
     * @type {any}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'languages'?: any;
    /**
     * 
     * @type {string}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'about_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterProfileCreateUpdateRequest
     */
    'current_location'?: string;
}
/**
 * Optimized serializer for master recommendations.
 * @export
 * @interface MasterRecommendation
 */
export interface MasterRecommendation {
    /**
     * 
     * @type {number}
     * @memberof MasterRecommendation
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof MasterRecommendation
     */
    'user': AssignmentMasterUser;
    /**
     * 
     * @type {MasterRecommendationProfession}
     * @memberof MasterRecommendation
     */
    'profession': MasterRecommendationProfession;
    /**
     * 
     * @type {MasterRecommendationStatistics}
     * @memberof MasterRecommendation
     */
    'statistics': MasterRecommendationStatistics;
    /**
     * 
     * @type {Array<ServiceSubcategoryBasic>}
     * @memberof MasterRecommendation
     */
    'services_offered': Array<ServiceSubcategoryBasic>;
    /**
     * 
     * @type {string}
     * @memberof MasterRecommendation
     */
    'hourly_rate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MasterRecommendation
     */
    'is_online'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MasterRecommendation
     */
    'current_location'?: string;
    /**
     * 
     * @type {number}
     * @memberof MasterRecommendation
     */
    'response_time_hours'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MasterRecommendation
     */
    'is_verified_provider'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterRecommendation
     */
    'is_top_master'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterRecommendation
     */
    'works_remotely'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterRecommendation
     */
    'travels_to_clients'?: boolean;
}
/**
 * 
 * @export
 * @interface MasterRecommendationProfession
 */
export interface MasterRecommendationProfession {
    /**
     * 
     * @type {number}
     * @memberof MasterRecommendationProfession
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MasterRecommendationProfession
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface MasterRecommendationStatistics
 */
export interface MasterRecommendationStatistics {
    /**
     * 
     * @type {number}
     * @memberof MasterRecommendationStatistics
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MasterRecommendationStatistics
     */
    'total_jobs_completed'?: number;
    /**
     * 
     * @type {string}
     * @memberof MasterRecommendationStatistics
     */
    'on_time_percentage'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterRecommendationStatistics
     */
    'repeat_customer_percentage'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterRecommendationStatistics
     */
    'average_rating'?: string;
    /**
     * 
     * @type {number}
     * @memberof MasterRecommendationStatistics
     */
    'total_reviews'?: number;
}
/**
 * 
 * @export
 * @interface MasterResume
 */
export interface MasterResume {
    /**
     * 
     * @type {number}
     * @memberof MasterResume
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MasterResume
     */
    'master'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MasterResume
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof MasterResume
     */
    'content': string;
    /**
     * 
     * @type {MasterResumeStatusEnum}
     * @memberof MasterResume
     */
    'status'?: MasterResumeStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof MasterResume
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof MasterResume
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface MasterResumeRequest
 */
export interface MasterResumeRequest {
    /**
     * 
     * @type {number}
     * @memberof MasterResumeRequest
     */
    'master'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MasterResumeRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof MasterResumeRequest
     */
    'content': string;
    /**
     * 
     * @type {MasterResumeStatusEnum}
     * @memberof MasterResumeRequest
     */
    'status'?: MasterResumeStatusEnum;
}
/**
 * * `draft` - Draft * `published` - Published * `archived` - Archived
 * @export
 * @enum {string}
 */

export enum MasterResumeStatusEnum {
    draft = 'draft',
    published = 'published',
    archived = 'archived'
}


/**
 * Enhanced serializer for master search results matching the image requirements.
 * @export
 * @interface MasterSearch
 */
export interface MasterSearch {
    /**
     * 
     * @type {number}
     * @memberof MasterSearch
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof MasterSearch
     */
    'user': AssignmentMasterUser;
    /**
     * 
     * @type {MasterRecommendationProfession}
     * @memberof MasterSearch
     */
    'profession': MasterRecommendationProfession;
    /**
     * 
     * @type {MasterRecommendationStatistics}
     * @memberof MasterSearch
     */
    'statistics': MasterRecommendationStatistics;
    /**
     * 
     * @type {Array<ServiceSubcategoryBasic>}
     * @memberof MasterSearch
     */
    'services_offered': Array<ServiceSubcategoryBasic>;
    /**
     * 
     * @type {Array<MasterSkill>}
     * @memberof MasterSearch
     */
    'master_skills': Array<MasterSkill>;
    /**
     * 
     * @type {Array<PortfolioItemBasic>}
     * @memberof MasterSearch
     */
    'portfolio_items': Array<PortfolioItemBasic>;
    /**
     * 
     * @type {string}
     * @memberof MasterSearch
     */
    'hourly_rate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof MasterSearch
     */
    'is_online'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MasterSearch
     */
    'current_location'?: string;
    /**
     * 
     * @type {number}
     * @memberof MasterSearch
     */
    'response_time_hours'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MasterSearch
     */
    'is_top_master'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterSearch
     */
    'is_verified_provider'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterSearch
     */
    'works_remotely'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterSearch
     */
    'travels_to_clients'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MasterSearch
     */
    'accepts_clients_at_location'?: boolean;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface MasterSkill
 */
export interface MasterSkill {
    /**
     * 
     * @type {number}
     * @memberof MasterSkill
     */
    'id': number;
    /**
     * 
     * @type {MasterSkillSkill}
     * @memberof MasterSkill
     */
    'skill': MasterSkillSkill;
    /**
     * 
     * @type {boolean}
     * @memberof MasterSkill
     */
    'is_primary_skill'?: boolean;
    /**
     * 
     * @type {ProficiencyLevelEnum}
     * @memberof MasterSkill
     */
    'proficiency_level'?: ProficiencyLevelEnum;
    /**
     * 
     * @type {number}
     * @memberof MasterSkill
     */
    'years_of_experience'?: number;
    /**
     * 
     * @type {string}
     * @memberof MasterSkill
     */
    'created_at': string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface MasterSkillRequest
 */
export interface MasterSkillRequest {
    /**
     * 
     * @type {number}
     * @memberof MasterSkillRequest
     */
    'skill_id': number;
    /**
     * 
     * @type {boolean}
     * @memberof MasterSkillRequest
     */
    'is_primary_skill'?: boolean;
    /**
     * 
     * @type {ProficiencyLevelEnum}
     * @memberof MasterSkillRequest
     */
    'proficiency_level'?: ProficiencyLevelEnum;
    /**
     * 
     * @type {number}
     * @memberof MasterSkillRequest
     */
    'years_of_experience'?: number;
}
/**
 * 
 * @export
 * @interface MasterSkillSkill
 */
export interface MasterSkillSkill {
    /**
     * 
     * @type {number}
     * @memberof MasterSkillSkill
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MasterSkillSkill
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MasterSkillSkill
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof MasterSkillSkill
     */
    'category': number;
    /**
     * 
     * @type {boolean}
     * @memberof MasterSkillSkill
     */
    'is_active'?: boolean;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface MasterStatistics
 */
export interface MasterStatistics {
    /**
     * 
     * @type {number}
     * @memberof MasterStatistics
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MasterStatistics
     */
    'total_jobs_completed'?: number;
    /**
     * 
     * @type {string}
     * @memberof MasterStatistics
     */
    'on_time_percentage'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterStatistics
     */
    'repeat_customer_percentage'?: string;
    /**
     * 
     * @type {string}
     * @memberof MasterStatistics
     */
    'average_rating'?: string;
    /**
     * 
     * @type {number}
     * @memberof MasterStatistics
     */
    'total_reviews'?: number;
}
/**
 * Serializer for chat messages.
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'chat_room': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof Message
     */
    'sender': AssignmentMasterUser;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'content': string;
    /**
     * 
     * @type {MessageMessageTypeEnum}
     * @memberof Message
     */
    'message_type'?: MessageMessageTypeEnum;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof Message
     */
    'attachments': Array<Attachment>;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    'reply_to'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'reply_to_sender': string;
    /**
     * 
     * @type {boolean}
     * @memberof Message
     */
    'is_read': boolean;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'read_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface MessageCreate
 */
export interface MessageCreate {
    /**
     * 
     * @type {number}
     * @memberof MessageCreate
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MessageCreate
     */
    'chat_room': number;
    /**
     * 
     * @type {number}
     * @memberof MessageCreate
     */
    'sender': number;
    /**
     * 
     * @type {MessageCreateMessageTypeEnum}
     * @memberof MessageCreate
     */
    'message_type': MessageCreateMessageTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MessageCreate
     */
    'content': string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageCreate
     */
    'is_read': boolean;
    /**
     * 
     * @type {string}
     * @memberof MessageCreate
     */
    'read_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof MessageCreate
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof MessageCreate
     */
    'updated_at': string;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof MessageCreate
     */
    'attachments': Array<Attachment>;
}
/**
 * * `text` - text * `image` - image * `file` - file
 * @export
 * @enum {string}
 */

export enum MessageCreateMessageTypeEnum {
    text = 'text',
    image = 'image',
    file = 'file'
}


/**
 * 
 * @export
 * @interface MessageCreateRequest
 */
export interface MessageCreateRequest {
    /**
     * 
     * @type {MessageCreateMessageTypeEnum}
     * @memberof MessageCreateRequest
     */
    'message_type': MessageCreateMessageTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof MessageCreateRequest
     */
    'content': string;
    /**
     * 
     * @type {Array<any>}
     * @memberof MessageCreateRequest
     */
    'attachments_files'?: Array<any>;
}
/**
 * * `text` - Текст * `image` - Изображение * `file` - Файл * `system` - System Message * `order_update` - Order Update
 * @export
 * @enum {string}
 */

export enum MessageMessageTypeEnum {
    text = 'text',
    image = 'image',
    file = 'file',
    system = 'system',
    order_update = 'order_update'
}


/**
 * 
 * @export
 * @interface MessageUpdate
 */
export interface MessageUpdate {
    /**
     * 
     * @type {number}
     * @memberof MessageUpdate
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof MessageUpdate
     */
    'chat_room': number;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdate
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdate
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof MessageUpdate
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface MessageUpdateRequest
 */
export interface MessageUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MessageUpdateRequest
     */
    'content': string;
}
/**
 * Serializer for Notification model.
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'message': string;
    /**
     * 
     * @type {LevelEnum}
     * @memberof Notification
     */
    'level'?: LevelEnum;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'verb': string;
    /**
     * 
     * @type {boolean}
     * @memberof Notification
     */
    'is_read'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'read_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'updated_at': string;
}
/**
 * Serializer for creating notifications.
 * @export
 * @interface NotificationCreate
 */
export interface NotificationCreate {
    /**
     * 
     * @type {number}
     * @memberof NotificationCreate
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof NotificationCreate
     */
    'recipient': number;
    /**
     * 
     * @type {string}
     * @memberof NotificationCreate
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof NotificationCreate
     */
    'message': string;
    /**
     * 
     * @type {LevelEnum}
     * @memberof NotificationCreate
     */
    'level'?: LevelEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationCreate
     */
    'verb': string;
}
/**
 * Serializer for creating notifications.
 * @export
 * @interface NotificationCreateRequest
 */
export interface NotificationCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof NotificationCreateRequest
     */
    'recipient': number;
    /**
     * 
     * @type {string}
     * @memberof NotificationCreateRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof NotificationCreateRequest
     */
    'message': string;
    /**
     * 
     * @type {LevelEnum}
     * @memberof NotificationCreateRequest
     */
    'level'?: LevelEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationCreateRequest
     */
    'verb': string;
}
/**
 * Serializer for Notification model.
 * @export
 * @interface NotificationRequest
 */
export interface NotificationRequest {
    /**
     * 
     * @type {string}
     * @memberof NotificationRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof NotificationRequest
     */
    'message': string;
    /**
     * 
     * @type {LevelEnum}
     * @memberof NotificationRequest
     */
    'level'?: LevelEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationRequest
     */
    'verb': string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationRequest
     */
    'is_read'?: boolean;
}
/**
 * Serializer for updating notification read status.
 * @export
 * @interface NotificationUpdate
 */
export interface NotificationUpdate {
    /**
     * 
     * @type {boolean}
     * @memberof NotificationUpdate
     */
    'is_read'?: boolean;
}
/**
 * Serializer for updating notification read status.
 * @export
 * @interface NotificationUpdateRequest
 */
export interface NotificationUpdateRequest {
    /**
     * 
     * @type {boolean}
     * @memberof NotificationUpdateRequest
     */
    'is_read'?: boolean;
}
/**
 * 
 * @export
 * @interface PaginatedAttachmentList
 */
export interface PaginatedAttachmentList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedAttachmentList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedAttachmentList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedAttachmentList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof PaginatedAttachmentList
     */
    'results'?: Array<Attachment>;
}
/**
 * 
 * @export
 * @interface PaginatedCertificateList
 */
export interface PaginatedCertificateList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedCertificateList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCertificateList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCertificateList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Certificate>}
     * @memberof PaginatedCertificateList
     */
    'results'?: Array<Certificate>;
}
/**
 * 
 * @export
 * @interface PaginatedChatRoomList
 */
export interface PaginatedChatRoomList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedChatRoomList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedChatRoomList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedChatRoomList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ChatRoom>}
     * @memberof PaginatedChatRoomList
     */
    'results'?: Array<ChatRoom>;
}
/**
 * 
 * @export
 * @interface PaginatedCityListList
 */
export interface PaginatedCityListList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedCityListList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCityListList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCityListList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CityList>}
     * @memberof PaginatedCityListList
     */
    'results'?: Array<CityList>;
}
/**
 * 
 * @export
 * @interface PaginatedCountryList
 */
export interface PaginatedCountryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedCountryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCountryList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCountryList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Country>}
     * @memberof PaginatedCountryList
     */
    'results'?: Array<Country>;
}
/**
 * 
 * @export
 * @interface PaginatedJobApplicationList
 */
export interface PaginatedJobApplicationList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedJobApplicationList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobApplicationList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobApplicationList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<JobApplication>}
     * @memberof PaginatedJobApplicationList
     */
    'results'?: Array<JobApplication>;
}
/**
 * 
 * @export
 * @interface PaginatedJobAssignmentList
 */
export interface PaginatedJobAssignmentList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedJobAssignmentList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobAssignmentList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobAssignmentList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<JobAssignment>}
     * @memberof PaginatedJobAssignmentList
     */
    'results'?: Array<JobAssignment>;
}
/**
 * 
 * @export
 * @interface PaginatedJobAssignmentReviewList
 */
export interface PaginatedJobAssignmentReviewList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedJobAssignmentReviewList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobAssignmentReviewList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobAssignmentReviewList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<JobAssignmentReview>}
     * @memberof PaginatedJobAssignmentReviewList
     */
    'results'?: Array<JobAssignmentReview>;
}
/**
 * 
 * @export
 * @interface PaginatedJobList
 */
export interface PaginatedJobList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedJobList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Job>}
     * @memberof PaginatedJobList
     */
    'results'?: Array<Job>;
}
/**
 * 
 * @export
 * @interface PaginatedJobSearchList
 */
export interface PaginatedJobSearchList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedJobSearchList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobSearchList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedJobSearchList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<JobSearch>}
     * @memberof PaginatedJobSearchList
     */
    'results'?: Array<JobSearch>;
}
/**
 * 
 * @export
 * @interface PaginatedLanguageList
 */
export interface PaginatedLanguageList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedLanguageList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLanguageList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedLanguageList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Language>}
     * @memberof PaginatedLanguageList
     */
    'results'?: Array<Language>;
}
/**
 * 
 * @export
 * @interface PaginatedMasterResumeList
 */
export interface PaginatedMasterResumeList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMasterResumeList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMasterResumeList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMasterResumeList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<MasterResume>}
     * @memberof PaginatedMasterResumeList
     */
    'results'?: Array<MasterResume>;
}
/**
 * 
 * @export
 * @interface PaginatedMasterSearchList
 */
export interface PaginatedMasterSearchList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMasterSearchList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMasterSearchList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMasterSearchList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<MasterSearch>}
     * @memberof PaginatedMasterSearchList
     */
    'results'?: Array<MasterSearch>;
}
/**
 * 
 * @export
 * @interface PaginatedMasterSkillList
 */
export interface PaginatedMasterSkillList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMasterSkillList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMasterSkillList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMasterSkillList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<MasterSkill>}
     * @memberof PaginatedMasterSkillList
     */
    'results'?: Array<MasterSkill>;
}
/**
 * 
 * @export
 * @interface PaginatedMessageList
 */
export interface PaginatedMessageList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedMessageList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMessageList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedMessageList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Message>}
     * @memberof PaginatedMessageList
     */
    'results'?: Array<Message>;
}
/**
 * 
 * @export
 * @interface PaginatedNotificationList
 */
export interface PaginatedNotificationList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedNotificationList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedNotificationList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedNotificationList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Notification>}
     * @memberof PaginatedNotificationList
     */
    'results'?: Array<Notification>;
}
/**
 * 
 * @export
 * @interface PaginatedPortfolioItemList
 */
export interface PaginatedPortfolioItemList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPortfolioItemList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPortfolioItemList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPortfolioItemList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PortfolioItem>}
     * @memberof PaginatedPortfolioItemList
     */
    'results'?: Array<PortfolioItem>;
}
/**
 * 
 * @export
 * @interface PaginatedProfessionList
 */
export interface PaginatedProfessionList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedProfessionList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProfessionList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedProfessionList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Profession>}
     * @memberof PaginatedProfessionList
     */
    'results'?: Array<Profession>;
}
/**
 * 
 * @export
 * @interface PaginatedPublicMasterProfileList
 */
export interface PaginatedPublicMasterProfileList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPublicMasterProfileList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPublicMasterProfileList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPublicMasterProfileList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PublicMasterProfile>}
     * @memberof PaginatedPublicMasterProfileList
     */
    'results'?: Array<PublicMasterProfile>;
}
/**
 * 
 * @export
 * @interface PaginatedReviewList
 */
export interface PaginatedReviewList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedReviewList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedReviewList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedReviewList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Review>}
     * @memberof PaginatedReviewList
     */
    'results'?: Array<Review>;
}
/**
 * 
 * @export
 * @interface PaginatedServiceAreaList
 */
export interface PaginatedServiceAreaList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedServiceAreaList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedServiceAreaList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedServiceAreaList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ServiceArea>}
     * @memberof PaginatedServiceAreaList
     */
    'results'?: Array<ServiceArea>;
}
/**
 * 
 * @export
 * @interface PaginatedServiceCategoryList
 */
export interface PaginatedServiceCategoryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedServiceCategoryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedServiceCategoryList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedServiceCategoryList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ServiceCategory>}
     * @memberof PaginatedServiceCategoryList
     */
    'results'?: Array<ServiceCategory>;
}
/**
 * 
 * @export
 * @interface PaginatedServiceSubcategoryList
 */
export interface PaginatedServiceSubcategoryList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedServiceSubcategoryList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedServiceSubcategoryList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedServiceSubcategoryList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ServiceSubcategory>}
     * @memberof PaginatedServiceSubcategoryList
     */
    'results'?: Array<ServiceSubcategory>;
}
/**
 * 
 * @export
 * @interface PaginatedSimpleContactList
 */
export interface PaginatedSimpleContactList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSimpleContactList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSimpleContactList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSimpleContactList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<SimpleContact>}
     * @memberof PaginatedSimpleContactList
     */
    'results'?: Array<SimpleContact>;
}
/**
 * 
 * @export
 * @interface PaginatedSkillDetailList
 */
export interface PaginatedSkillDetailList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSkillDetailList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSkillDetailList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSkillDetailList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<SkillDetail>}
     * @memberof PaginatedSkillDetailList
     */
    'results'?: Array<SkillDetail>;
}
/**
 * 
 * @export
 * @interface PaginatedSupportFAQList
 */
export interface PaginatedSupportFAQList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSupportFAQList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSupportFAQList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSupportFAQList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<SupportFAQ>}
     * @memberof PaginatedSupportFAQList
     */
    'results'?: Array<SupportFAQ>;
}
/**
 * 
 * @export
 * @interface PaginatedSystemSettingsList
 */
export interface PaginatedSystemSettingsList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedSystemSettingsList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSystemSettingsList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedSystemSettingsList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<SystemSettings>}
     * @memberof PaginatedSystemSettingsList
     */
    'results'?: Array<SystemSettings>;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedCertificateRequest
 */
export interface PatchedCertificateRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedCertificateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedCertificateRequest
     */
    'issuing_organization'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedCertificateRequest
     */
    'issue_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedCertificateRequest
     */
    'expiry_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedCertificateRequest
     */
    'certificate_number'?: string;
}
/**
 * Serializer for chat rooms.
 * @export
 * @interface PatchedChatRoomRequest
 */
export interface PatchedChatRoomRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedChatRoomRequest
     */
    'job'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedChatRoomRequest
     */
    'title'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedChatRoomRequest
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {ChatTypeEnum}
     * @memberof PatchedChatRoomRequest
     */
    'chat_type'?: ChatTypeEnum;
}
/**
 * Serializer for City model.
 * @export
 * @interface PatchedCityRequest
 */
export interface PatchedCityRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedCityRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedCityRequest
     */
    'code'?: string;
}
/**
 * Serializer for Country model.
 * @export
 * @interface PatchedCountryRequest
 */
export interface PatchedCountryRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedCountryRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedCountryRequest
     */
    'code'?: string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedEmployerProfileCreateUpdateRequest
 */
export interface PatchedEmployerProfileCreateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedEmployerProfileCreateUpdateRequest
     */
    'contact_phone'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedEmployerProfileCreateUpdateRequest
     */
    'preferred_services'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedEmployerProfileCreateUpdateRequest
     */
    'favorite_masters'?: Array<number>;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedJobApplicationRequest
 */
export interface PatchedJobApplicationRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedJobApplicationRequest
     */
    'applicant'?: number | null;
    /**
     * 
     * @type {JobApplicationStatusEnum}
     * @memberof PatchedJobApplicationRequest
     */
    'status'?: JobApplicationStatusEnum;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedJobAssignmentRequest
 */
export interface PatchedJobAssignmentRequest {
    /**
     * 
     * @type {JobAssignmentStatusEnum}
     * @memberof PatchedJobAssignmentRequest
     */
    'status'?: JobAssignmentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobAssignmentRequest
     */
    'started_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobAssignmentRequest
     */
    'completed_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobAssignmentRequest
     */
    'progress_notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobAssignmentRequest
     */
    'completion_notes'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedJobAssignmentRequest
     */
    'client_rating'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobAssignmentRequest
     */
    'client_review'?: string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedJobRequest
 */
export interface PatchedJobRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedJobRequest
     */
    'service_subcategory'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobRequest
     */
    'description'?: string;
    /**
     * 
     * @type {Status30eEnum}
     * @memberof PatchedJobRequest
     */
    'status'?: Status30eEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobRequest
     */
    'location'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedJobRequest
     */
    'city'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobRequest
     */
    'service_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobRequest
     */
    'service_time'?: string | null;
    /**
     * 
     * @type {UrgencyEnum}
     * @memberof PatchedJobRequest
     */
    'urgency'?: UrgencyEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobRequest
     */
    'budget_min'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobRequest
     */
    'budget_max'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobRequest
     */
    'final_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedJobRequest
     */
    'special_requirements'?: string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedMasterProfileCreateUpdateRequest
 */
export interface PatchedMasterProfileCreateUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'profession'?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'service_areas'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'services_offered'?: Array<number>;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'works_remotely'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'accepts_clients_at_location'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'travels_to_clients'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'is_available'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'hourly_rate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'response_time_hours'?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'work_experience_start_year'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'education_institution'?: string;
    /**
     * e.g., 2005-2009
     * @type {string}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'education_years'?: string;
    /**
     * List of languages spoken
     * @type {any}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'languages'?: any;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'about_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterProfileCreateUpdateRequest
     */
    'current_location'?: string;
}
/**
 * 
 * @export
 * @interface PatchedMasterResumeRequest
 */
export interface PatchedMasterResumeRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterResumeRequest
     */
    'master'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterResumeRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedMasterResumeRequest
     */
    'content'?: string;
    /**
     * 
     * @type {MasterResumeStatusEnum}
     * @memberof PatchedMasterResumeRequest
     */
    'status'?: MasterResumeStatusEnum;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedMasterSkillRequest
 */
export interface PatchedMasterSkillRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterSkillRequest
     */
    'skill_id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedMasterSkillRequest
     */
    'is_primary_skill'?: boolean;
    /**
     * 
     * @type {ProficiencyLevelEnum}
     * @memberof PatchedMasterSkillRequest
     */
    'proficiency_level'?: ProficiencyLevelEnum;
    /**
     * 
     * @type {number}
     * @memberof PatchedMasterSkillRequest
     */
    'years_of_experience'?: number;
}
/**
 * Serializer for chat messages.
 * @export
 * @interface PatchedMessageRequest
 */
export interface PatchedMessageRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedMessageRequest
     */
    'chat_room'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedMessageRequest
     */
    'content'?: string;
    /**
     * 
     * @type {MessageMessageTypeEnum}
     * @memberof PatchedMessageRequest
     */
    'message_type'?: MessageMessageTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof PatchedMessageRequest
     */
    'reply_to'?: number | null;
}
/**
 * Serializer for updating notification read status.
 * @export
 * @interface PatchedNotificationUpdateRequest
 */
export interface PatchedNotificationUpdateRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PatchedNotificationUpdateRequest
     */
    'is_read'?: boolean;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PatchedPortfolioItemRequest
 */
export interface PatchedPortfolioItemRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedPortfolioItemRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedPortfolioItemRequest
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedPortfolioItemRequest
     */
    'skill_used_id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPortfolioItemRequest
     */
    'is_featured'?: boolean;
}
/**
 * 
 * @export
 * @interface PatchedProgressUpdateRequest
 */
export interface PatchedProgressUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedProgressUpdateRequest
     */
    'progress_notes'?: string;
}
/**
 * Serializer for creating and updating service areas.
 * @export
 * @interface PatchedServiceAreaCreateUpdateRequest
 */
export interface PatchedServiceAreaCreateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdateRequest
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdateRequest
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdateRequest
     */
    'country'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdateRequest
     */
    'latitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdateRequest
     */
    'longitude'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof PatchedServiceAreaCreateUpdateRequest
     */
    'postal_codes'?: any;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceAreaCreateUpdateRequest
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedServiceAreaCreateUpdateRequest
     */
    'service_categories'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdateRequest
     */
    'base_price_multiplier'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceAreaCreateUpdateRequest
     */
    'travel_fee'?: string;
}
/**
 * Serializer for creating and updating service categories.
 * @export
 * @interface PatchedServiceCategoryCreateUpdateRequest
 */
export interface PatchedServiceCategoryCreateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'color'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'banner_image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'commission_rate'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'min_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'max_price'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'estimated_duration_min'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'estimated_duration_max'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'meta_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'meta_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'keywords'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'requires_license'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'requires_insurance'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceCategoryCreateUpdateRequest
     */
    'requires_background_check'?: boolean;
}
/**
 * Serializer for creating and updating service subcategories.
 * @export
 * @interface PatchedServiceSubcategoryCreateUpdateRequest
 */
export interface PatchedServiceSubcategoryCreateUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'category'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'icon'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'base_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'price_range_min'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'price_range_max'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'estimated_duration'?: number | null;
    /**
     * 
     * @type {ComplexityLevelEnum}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'complexity_level'?: ComplexityLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'safety_requirements'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'meta_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedServiceSubcategoryCreateUpdateRequest
     */
    'meta_description'?: string;
}
/**
 * Minimal contact serializer for submissions.
 * @export
 * @interface PatchedSimpleContactRequest
 */
export interface PatchedSimpleContactRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedSimpleContactRequest
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedSimpleContactRequest
     */
    'last_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedSimpleContactRequest
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedSimpleContactRequest
     */
    'user'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedSimpleContactRequest
     */
    'subject'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedSimpleContactRequest
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedSimpleContactRequest
     */
    'phone'?: string;
    /**
     * 
     * @type {EnquiryTypeEnum}
     * @memberof PatchedSimpleContactRequest
     */
    'enquiry_type'?: EnquiryTypeEnum;
}
/**
 * Serializer for creating and updating support FAQ items.
 * @export
 * @interface PatchedSupportFAQCreateUpdateRequest
 */
export interface PatchedSupportFAQCreateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedSupportFAQCreateUpdateRequest
     */
    'question'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedSupportFAQCreateUpdateRequest
     */
    'answer'?: string;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof PatchedSupportFAQCreateUpdateRequest
     */
    'category'?: CategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof PatchedSupportFAQCreateUpdateRequest
     */
    'sort_order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedSupportFAQCreateUpdateRequest
     */
    'is_popular'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedSupportFAQCreateUpdateRequest
     */
    'is_active'?: boolean;
}
/**
 * Serializer for creating and updating system settings.
 * @export
 * @interface PatchedSystemSettingsCreateUpdateRequest
 */
export interface PatchedSystemSettingsCreateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdateRequest
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdateRequest
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdateRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedSystemSettingsCreateUpdateRequest
     */
    'is_public'?: boolean;
    /**
     * 
     * @type {SettingTypeEnum}
     * @memberof PatchedSystemSettingsCreateUpdateRequest
     */
    'setting_type'?: SettingTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdateRequest
     */
    'validation_regex'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdateRequest
     */
    'min_value'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdateRequest
     */
    'max_value'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedSystemSettingsCreateUpdateRequest
     */
    'requires_admin'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedSystemSettingsCreateUpdateRequest
     */
    'category'?: string;
}
/**
 * Serializer for user notification settings.
 * @export
 * @interface PatchedUserNotificationSettingsRequest
 */
export interface PatchedUserNotificationSettingsRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'sms_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'push_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'email_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'task_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'specialist_messages'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'task_updates'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'marketing_emails'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'promotional_sms'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'newsletter'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'system_alerts'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'security_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'quiet_hours_enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'quiet_hours_start'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserNotificationSettingsRequest
     */
    'quiet_hours_end'?: string | null;
}
/**
 * Serializer for updating user profile - enhanced version of api_users EditUserSettingsView
 * @export
 * @interface PatchedUserUpdateRequest
 */
export interface PatchedUserUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedUserUpdateRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserUpdateRequest
     */
    'photo_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserUpdateRequest
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserUpdateRequest
     */
    'last_name'?: string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PortfolioItem
 */
export interface PortfolioItem {
    /**
     * 
     * @type {number}
     * @memberof PortfolioItem
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PortfolioItem
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PortfolioItem
     */
    'description'?: string;
    /**
     * 
     * @type {MasterSkillSkill}
     * @memberof PortfolioItem
     */
    'skill_used': MasterSkillSkill;
    /**
     * 
     * @type {boolean}
     * @memberof PortfolioItem
     */
    'is_featured'?: boolean;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof PortfolioItem
     */
    'attachments': Array<Attachment>;
    /**
     * 
     * @type {string}
     * @memberof PortfolioItem
     */
    'created_at': string;
}
/**
 * Basic portfolio item serializer.
 * @export
 * @interface PortfolioItemBasic
 */
export interface PortfolioItemBasic {
    /**
     * 
     * @type {number}
     * @memberof PortfolioItemBasic
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PortfolioItemBasic
     */
    'title': string;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof PortfolioItemBasic
     */
    'attachments': Array<Attachment>;
    /**
     * 
     * @type {string}
     * @memberof PortfolioItemBasic
     */
    'description'?: string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface PortfolioItemRequest
 */
export interface PortfolioItemRequest {
    /**
     * 
     * @type {string}
     * @memberof PortfolioItemRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PortfolioItemRequest
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof PortfolioItemRequest
     */
    'skill_used_id'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof PortfolioItemRequest
     */
    'is_featured'?: boolean;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface Profession
 */
export interface Profession {
    /**
     * 
     * @type {number}
     * @memberof Profession
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Profession
     */
    'name': string;
}
/**
 * Basic profession information.
 * @export
 * @interface ProfessionBasic
 */
export interface ProfessionBasic {
    /**
     * 
     * @type {number}
     * @memberof ProfessionBasic
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProfessionBasic
     */
    'name': string;
}
/**
 * * `beginner` - Beginner * `intermediate` - Intermediate * `advanced` - Advanced * `expert` - Expert
 * @export
 * @enum {string}
 */

export enum ProficiencyLevelEnum {
    beginner = 'beginner',
    intermediate = 'intermediate',
    advanced = 'advanced',
    expert = 'expert'
}


/**
 * 
 * @export
 * @interface PublicMasterProfile
 */
export interface PublicMasterProfile {
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfile
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof PublicMasterProfile
     */
    'user': AssignmentMasterUser;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfile
     */
    'works_remotely'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfile
     */
    'accepts_clients_at_location'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfile
     */
    'travels_to_clients'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfile
     */
    'is_available'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfile
     */
    'hourly_rate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfile
     */
    'response_time_hours'?: number;
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfile
     */
    'work_experience_start_year'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfile
     */
    'education_institution'?: string;
    /**
     * e.g., 2005-2009
     * @type {string}
     * @memberof PublicMasterProfile
     */
    'education_years'?: string;
    /**
     * List of languages spoken
     * @type {any}
     * @memberof PublicMasterProfile
     */
    'languages'?: any;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfile
     */
    'about_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfile
     */
    'current_location'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfile
     */
    'is_online'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfile
     */
    'last_seen'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfile
     */
    'is_verified_provider'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfile
     */
    'is_top_master'?: boolean;
    /**
     * 
     * @type {PublicMasterProfileProfession}
     * @memberof PublicMasterProfile
     */
    'profession': PublicMasterProfileProfession;
}
/**
 * Detailed serializer for master profile.
 * @export
 * @interface PublicMasterProfileDetail
 */
export interface PublicMasterProfileDetail {
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfileDetail
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof PublicMasterProfileDetail
     */
    'user': AssignmentMasterUser;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'works_remotely'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'accepts_clients_at_location'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'travels_to_clients'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'is_available'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetail
     */
    'hourly_rate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfileDetail
     */
    'response_time_hours'?: number;
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfileDetail
     */
    'work_experience_start_year'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetail
     */
    'education_institution'?: string;
    /**
     * e.g., 2005-2009
     * @type {string}
     * @memberof PublicMasterProfileDetail
     */
    'education_years'?: string;
    /**
     * List of languages spoken
     * @type {any}
     * @memberof PublicMasterProfileDetail
     */
    'languages'?: any;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetail
     */
    'about_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetail
     */
    'current_location'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'is_online'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileDetail
     */
    'last_seen'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'is_verified_provider'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicMasterProfileDetail
     */
    'is_top_master'?: boolean;
    /**
     * 
     * @type {PublicMasterProfileProfession}
     * @memberof PublicMasterProfileDetail
     */
    'profession': PublicMasterProfileProfession;
    /**
     * 
     * @type {Array<MasterSkill>}
     * @memberof PublicMasterProfileDetail
     */
    'skills': Array<MasterSkill>;
    /**
     * 
     * @type {Array<PortfolioItem>}
     * @memberof PublicMasterProfileDetail
     */
    'portfolio_items': Array<PortfolioItem>;
    /**
     * 
     * @type {Array<Certificate>}
     * @memberof PublicMasterProfileDetail
     */
    'certificates': Array<Certificate>;
    /**
     * 
     * @type {MasterRecommendationStatistics}
     * @memberof PublicMasterProfileDetail
     */
    'statistics': MasterRecommendationStatistics;
}
/**
 * 
 * @export
 * @interface PublicMasterProfileProfession
 */
export interface PublicMasterProfileProfession {
    /**
     * 
     * @type {number}
     * @memberof PublicMasterProfileProfession
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PublicMasterProfileProfession
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface RatingRequest
 */
export interface RatingRequest {
    /**
     * 
     * @type {number}
     * @memberof RatingRequest
     */
    'client_rating'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof RatingRequest
     */
    'client_review'?: string;
}
/**
 * Serializer for reading review data with nested serializers.
 * @export
 * @interface Review
 */
export interface Review {
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    'id': number;
    /**
     * 
     * @type {JobApplicationJob}
     * @memberof Review
     */
    'job': JobApplicationJob;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof Review
     */
    'reviewer': AssignmentMasterUser;
    /**
     * 
     * @type {ReviewMaster}
     * @memberof Review
     */
    'master': ReviewMaster;
    /**
     * 
     * @type {number}
     * @memberof Review
     */
    'rating': number;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    'comment'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Review
     */
    'is_verified': boolean;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    'updated_at': string;
}
/**
 * Serializer for review analytics data with OpenAPI support.
 * @export
 * @interface ReviewAnalytics
 */
export interface ReviewAnalytics {
    /**
     * Total number of reviews
     * @type {number}
     * @memberof ReviewAnalytics
     */
    'total_reviews': number;
    /**
     * Average rating across all reviews
     * @type {string}
     * @memberof ReviewAnalytics
     */
    'average_rating': string;
    /**
     * Distribution of ratings (1-5 stars)
     * @type {Array<{ [key: string]: any; }>}
     * @memberof ReviewAnalytics
     */
    'rating_distribution': Array<{ [key: string]: any; }>;
}
/**
 * 
 * @export
 * @interface ReviewMaster
 */
export interface ReviewMaster {
    /**
     * 
     * @type {number}
     * @memberof ReviewMaster
     */
    'id': number;
    /**
     * 
     * @type {AssignmentMasterUser}
     * @memberof ReviewMaster
     */
    'user': AssignmentMasterUser;
}
/**
 * * `member` - Member * `admin` - Admin * `moderator` - Moderator
 * @export
 * @enum {string}
 */

export enum RoleEnum {
    member = 'member',
    admin = 'admin',
    moderator = 'moderator'
}


/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface ServiceArea
 */
export interface ServiceArea {
    /**
     * 
     * @type {number}
     * @memberof ServiceArea
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'latitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'longitude'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceArea
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'base_price_multiplier'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceArea
     */
    'travel_fee'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceArea
     */
    'service_categories': Array<number>;
}
/**
 * Serializer for creating and updating service areas.
 * @export
 * @interface ServiceAreaCreateUpdate
 */
export interface ServiceAreaCreateUpdate {
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'latitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'longitude'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ServiceAreaCreateUpdate
     */
    'postal_codes'?: any;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceAreaCreateUpdate
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceAreaCreateUpdate
     */
    'service_categories': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'base_price_multiplier'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdate
     */
    'travel_fee'?: string;
}
/**
 * Serializer for creating and updating service areas.
 * @export
 * @interface ServiceAreaCreateUpdateRequest
 */
export interface ServiceAreaCreateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdateRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdateRequest
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdateRequest
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdateRequest
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdateRequest
     */
    'latitude'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdateRequest
     */
    'longitude'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ServiceAreaCreateUpdateRequest
     */
    'postal_codes'?: any;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceAreaCreateUpdateRequest
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceAreaCreateUpdateRequest
     */
    'service_categories': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdateRequest
     */
    'base_price_multiplier'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceAreaCreateUpdateRequest
     */
    'travel_fee'?: string;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface ServiceCategory
 */
export interface ServiceCategory {
    /**
     * 
     * @type {number}
     * @memberof ServiceCategory
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'color'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategory
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ServiceCategory
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'banner_image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategory
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'commission_rate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategory
     */
    'slug': string;
    /**
     * 
     * @type {Array<ServiceSubcategory>}
     * @memberof ServiceCategory
     */
    'subcategories': Array<ServiceSubcategory>;
}
/**
 * Serializer for creating and updating service categories.
 * @export
 * @interface ServiceCategoryCreateUpdate
 */
export interface ServiceCategoryCreateUpdate {
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'color'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdate
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ServiceCategoryCreateUpdate
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'banner_image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdate
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'commission_rate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'min_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'max_price'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ServiceCategoryCreateUpdate
     */
    'estimated_duration_min'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ServiceCategoryCreateUpdate
     */
    'estimated_duration_max'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'meta_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'meta_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'keywords'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdate
     */
    'slug': string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdate
     */
    'requires_license'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdate
     */
    'requires_insurance'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdate
     */
    'requires_background_check'?: boolean;
}
/**
 * Serializer for creating and updating service categories.
 * @export
 * @interface ServiceCategoryCreateUpdateRequest
 */
export interface ServiceCategoryCreateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'color'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'banner_image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'commission_rate'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'min_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'max_price'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'estimated_duration_min'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'estimated_duration_max'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'meta_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'meta_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'keywords'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'requires_license'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'requires_insurance'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceCategoryCreateUpdateRequest
     */
    'requires_background_check'?: boolean;
}
/**
 * Service category with master count for home page.
 * @export
 * @interface ServiceCategoryWithCount
 */
export interface ServiceCategoryWithCount {
    /**
     * 
     * @type {number}
     * @memberof ServiceCategoryWithCount
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryWithCount
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryWithCount
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryWithCount
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceCategoryWithCount
     */
    'banner_image'?: string;
    /**
     * 
     * @type {number}
     * @memberof ServiceCategoryWithCount
     */
    'master_count': number;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface ServiceSubcategory
 */
export interface ServiceSubcategory {
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategory
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategory
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategory
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategory
     */
    'icon'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceSubcategory
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategory
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategory
     */
    'image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceSubcategory
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategory
     */
    'base_price'?: string | null;
    /**
     * 
     * @type {ComplexityLevelEnum}
     * @memberof ServiceSubcategory
     */
    'complexity_level'?: ComplexityLevelEnum;
}
/**
 * Basic service subcategory serializer.
 * @export
 * @interface ServiceSubcategoryBasic
 */
export interface ServiceSubcategoryBasic {
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategoryBasic
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryBasic
     */
    'name': string;
}
/**
 * Serializer for creating and updating service subcategories.
 * @export
 * @interface ServiceSubcategoryCreateUpdate
 */
export interface ServiceSubcategoryCreateUpdate {
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'category': number;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'icon'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'base_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'price_range_min'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'price_range_max'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'estimated_duration'?: number | null;
    /**
     * 
     * @type {ComplexityLevelEnum}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'complexity_level'?: ComplexityLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'safety_requirements'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'meta_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdate
     */
    'meta_description'?: string;
}
/**
 * Serializer for creating and updating service subcategories.
 * @export
 * @interface ServiceSubcategoryCreateUpdateRequest
 */
export interface ServiceSubcategoryCreateUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'category': number;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'icon'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'sort_order'?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'image'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'featured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'base_price'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'price_range_min'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'price_range_max'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'estimated_duration'?: number | null;
    /**
     * 
     * @type {ComplexityLevelEnum}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'complexity_level'?: ComplexityLevelEnum;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'safety_requirements'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'meta_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceSubcategoryCreateUpdateRequest
     */
    'meta_description'?: string;
}
/**
 * * `string` - String * `integer` - Целое * `boolean` - Boolean * `json` - JSON * `file` - Файл
 * @export
 * @enum {string}
 */

export enum SettingTypeEnum {
    string = 'string',
    integer = 'integer',
    boolean = 'boolean',
    json = 'json',
    file = 'file'
}


/**
 * Minimal contact serializer for submissions.
 * @export
 * @interface SimpleContact
 */
export interface SimpleContact {
    /**
     * 
     * @type {number}
     * @memberof SimpleContact
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof SimpleContact
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleContact
     */
    'last_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SimpleContact
     */
    'email': string;
    /**
     * 
     * @type {number}
     * @memberof SimpleContact
     */
    'user'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof SimpleContact
     */
    'subject': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleContact
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleContact
     */
    'phone': string;
    /**
     * 
     * @type {EnquiryTypeEnum}
     * @memberof SimpleContact
     */
    'enquiry_type': EnquiryTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SimpleContact
     */
    'ip_address': string | null;
    /**
     * 
     * @type {string}
     * @memberof SimpleContact
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleContact
     */
    'updated_at': string;
}
/**
 * Minimal contact serializer for submissions.
 * @export
 * @interface SimpleContactRequest
 */
export interface SimpleContactRequest {
    /**
     * 
     * @type {string}
     * @memberof SimpleContactRequest
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleContactRequest
     */
    'last_name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SimpleContactRequest
     */
    'email': string;
    /**
     * 
     * @type {number}
     * @memberof SimpleContactRequest
     */
    'user'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof SimpleContactRequest
     */
    'subject': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleContactRequest
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof SimpleContactRequest
     */
    'phone': string;
    /**
     * 
     * @type {EnquiryTypeEnum}
     * @memberof SimpleContactRequest
     */
    'enquiry_type': EnquiryTypeEnum;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface SkillDetail
 */
export interface SkillDetail {
    /**
     * 
     * @type {number}
     * @memberof SkillDetail
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof SkillDetail
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SkillDetail
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof SkillDetail
     */
    'category': number;
    /**
     * 
     * @type {boolean}
     * @memberof SkillDetail
     */
    'is_active'?: boolean;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface SkillDetailRequest
 */
export interface SkillDetailRequest {
    /**
     * 
     * @type {string}
     * @memberof SkillDetailRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SkillDetailRequest
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof SkillDetailRequest
     */
    'category': number;
    /**
     * 
     * @type {boolean}
     * @memberof SkillDetailRequest
     */
    'is_active'?: boolean;
}
/**
 * * `draft` - Draft * `published` - Published * `assigned` - Assigned * `in_progress` - In Progress * `completed` - Completed * `cancelled` - Cancelled
 * @export
 * @enum {string}
 */

export enum Status30eEnum {
    draft = 'draft',
    published = 'published',
    assigned = 'assigned',
    in_progress = 'in_progress',
    completed = 'completed',
    cancelled = 'cancelled'
}


/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface SupportFAQ
 */
export interface SupportFAQ {
    /**
     * 
     * @type {number}
     * @memberof SupportFAQ
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof SupportFAQ
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof SupportFAQ
     */
    'answer': string;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof SupportFAQ
     */
    'category'?: CategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof SupportFAQ
     */
    'language'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SupportFAQ
     */
    'sort_order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SupportFAQ
     */
    'is_popular'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SupportFAQ
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SupportFAQ
     */
    'view_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof SupportFAQ
     */
    'created_at': string;
}
/**
 * Serializer for creating and updating support FAQ items.
 * @export
 * @interface SupportFAQCreateUpdate
 */
export interface SupportFAQCreateUpdate {
    /**
     * 
     * @type {string}
     * @memberof SupportFAQCreateUpdate
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof SupportFAQCreateUpdate
     */
    'answer': string;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof SupportFAQCreateUpdate
     */
    'category'?: CategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof SupportFAQCreateUpdate
     */
    'sort_order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SupportFAQCreateUpdate
     */
    'is_popular'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SupportFAQCreateUpdate
     */
    'is_active'?: boolean;
}
/**
 * Serializer for creating and updating support FAQ items.
 * @export
 * @interface SupportFAQCreateUpdateRequest
 */
export interface SupportFAQCreateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SupportFAQCreateUpdateRequest
     */
    'question': string;
    /**
     * 
     * @type {string}
     * @memberof SupportFAQCreateUpdateRequest
     */
    'answer': string;
    /**
     * 
     * @type {CategoryEnum}
     * @memberof SupportFAQCreateUpdateRequest
     */
    'category'?: CategoryEnum;
    /**
     * 
     * @type {number}
     * @memberof SupportFAQCreateUpdateRequest
     */
    'sort_order'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SupportFAQCreateUpdateRequest
     */
    'is_popular'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SupportFAQCreateUpdateRequest
     */
    'is_active'?: boolean;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface SystemSettings
 */
export interface SystemSettings {
    /**
     * 
     * @type {number}
     * @memberof SystemSettings
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof SystemSettings
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettings
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettings
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SystemSettings
     */
    'is_public'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SystemSettings
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {SettingTypeEnum}
     * @memberof SystemSettings
     */
    'setting_type'?: SettingTypeEnum;
}
/**
 * Serializer for creating and updating system settings.
 * @export
 * @interface SystemSettingsCreateUpdate
 */
export interface SystemSettingsCreateUpdate {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SystemSettingsCreateUpdate
     */
    'is_public'?: boolean;
    /**
     * 
     * @type {SettingTypeEnum}
     * @memberof SystemSettingsCreateUpdate
     */
    'setting_type'?: SettingTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'validation_regex'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'min_value'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'max_value'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SystemSettingsCreateUpdate
     */
    'requires_admin'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdate
     */
    'category'?: string;
}
/**
 * Serializer for creating and updating system settings.
 * @export
 * @interface SystemSettingsCreateUpdateRequest
 */
export interface SystemSettingsCreateUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdateRequest
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdateRequest
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdateRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SystemSettingsCreateUpdateRequest
     */
    'is_public'?: boolean;
    /**
     * 
     * @type {SettingTypeEnum}
     * @memberof SystemSettingsCreateUpdateRequest
     */
    'setting_type'?: SettingTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdateRequest
     */
    'validation_regex'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdateRequest
     */
    'min_value'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdateRequest
     */
    'max_value'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SystemSettingsCreateUpdateRequest
     */
    'requires_admin'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsCreateUpdateRequest
     */
    'category'?: string;
}
/**
 * * `low` - Low * `medium` - Medium * `high` - High * `urgent` - Urgent
 * @export
 * @enum {string}
 */

export enum UrgencyEnum {
    low = 'low',
    medium = 'medium',
    high = 'high',
    urgent = 'urgent'
}


/**
 * Serializer for user profile information - enhanced version of api_users
 * @export
 * @interface UserDetail
 */
export interface UserDetail {
    /**
     * 
     * @type {number}
     * @memberof UserDetail
     */
    'id': number;
    /**
     * Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
     * @type {string}
     * @memberof UserDetail
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'date_joined': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'last_login': string | null;
    /**
     * Отметьте, если пользователь должен считаться активным. Уберите эту отметку вместо удаления учётной записи.
     * @type {boolean}
     * @memberof UserDetail
     */
    'is_active'?: boolean;
    /**
     * Отметьте, если пользователь может входить в административную часть сайта.
     * @type {boolean}
     * @memberof UserDetail
     */
    'is_staff': boolean;
    /**
     * Указывает, что пользователь имеет все права без явного их назначения.
     * @type {boolean}
     * @memberof UserDetail
     */
    'is_superuser': boolean;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'groups': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'permissions': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'photo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserDetail
     */
    'photo_url'?: string | null;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface UserDetailChild
 */
export interface UserDetailChild {
    /**
     * 
     * @type {number}
     * @memberof UserDetailChild
     */
    'id': number;
    /**
     * Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
     * @type {string}
     * @memberof UserDetailChild
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailChild
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailChild
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailChild
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailChild
     */
    'photo_url': string | null;
}
/**
 * Serializer for models with timestamp fields.
 * @export
 * @interface UserDetailChildRequest
 */
export interface UserDetailChildRequest {
    /**
     * Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
     * @type {string}
     * @memberof UserDetailChildRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailChildRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailChildRequest
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDetailChildRequest
     */
    'last_name'?: string;
}
/**
 * Serializer for user notification settings.
 * @export
 * @interface UserNotificationSettings
 */
export interface UserNotificationSettings {
    /**
     * 
     * @type {number}
     * @memberof UserNotificationSettings
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'sms_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'push_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'email_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'task_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'specialist_messages'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'task_updates'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'marketing_emails'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'promotional_sms'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'newsletter'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'system_alerts'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'security_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettings
     */
    'quiet_hours_enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserNotificationSettings
     */
    'quiet_hours_start'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserNotificationSettings
     */
    'quiet_hours_end'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserNotificationSettings
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof UserNotificationSettings
     */
    'updated_at': string;
}
/**
 * Serializer for user notification settings.
 * @export
 * @interface UserNotificationSettingsRequest
 */
export interface UserNotificationSettingsRequest {
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettingsRequest
     */
    'sms_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettingsRequest
     */
    'push_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettingsRequest
     */
    'email_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettingsRequest
     */
    'task_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettingsRequest
     */
    'specialist_messages'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettingsRequest
     */
    'task_updates'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettingsRequest
     */
    'marketing_emails'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettingsRequest
     */
    'promotional_sms'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettingsRequest
     */
    'newsletter'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettingsRequest
     */
    'system_alerts'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettingsRequest
     */
    'security_notifications'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserNotificationSettingsRequest
     */
    'quiet_hours_enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserNotificationSettingsRequest
     */
    'quiet_hours_start'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserNotificationSettingsRequest
     */
    'quiet_hours_end'?: string | null;
}
/**
 * Serializer for user profile display
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * 
     * @type {number}
     * @memberof UserProfile
     */
    'id': number;
    /**
     * Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_.
     * @type {string}
     * @memberof UserProfile
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'photo_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'groups': string;
}
/**
 * Serializer for updating user profile - enhanced version of api_users EditUserSettingsView
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'photo_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'last_name'?: string;
}
/**
 * Serializer for updating user profile - enhanced version of api_users EditUserSettingsView
 * @export
 * @interface UserUpdateRequest
 */
export interface UserUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'photo_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    'last_name'?: string;
}
/**
 * 
 * @export
 * @interface Wrapper
 */
export interface Wrapper {
    /**
     * 
     * @type {WrapperAssignment}
     * @memberof Wrapper
     */
    'assignment': WrapperAssignment;
}
/**
 * 
 * @export
 * @interface WrapperAssignment
 */
export interface WrapperAssignment {
    /**
     * 
     * @type {number}
     * @memberof WrapperAssignment
     */
    'id': number;
    /**
     * 
     * @type {JobAssignmentStatusEnum}
     * @memberof WrapperAssignment
     */
    'status'?: JobAssignmentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof WrapperAssignment
     */
    'assigned_at': string;
    /**
     * 
     * @type {string}
     * @memberof WrapperAssignment
     */
    'started_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WrapperAssignment
     */
    'completed_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WrapperAssignment
     */
    'progress_notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof WrapperAssignment
     */
    'completion_notes'?: string;
    /**
     * 
     * @type {number}
     * @memberof WrapperAssignment
     */
    'client_rating'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof WrapperAssignment
     */
    'client_review'?: string;
    /**
     * 
     * @type {JobApplicationJob}
     * @memberof WrapperAssignment
     */
    'job': JobApplicationJob;
    /**
     * 
     * @type {JobAssignmentMaster}
     * @memberof WrapperAssignment
     */
    'master': JobAssignmentMaster;
    /**
     * 
     * @type {JobAssignmentAcceptedApplication}
     * @memberof WrapperAssignment
     */
    'accepted_application': JobAssignmentAcceptedApplication;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof WrapperAssignment
     */
    'attachments': Array<Attachment>;
}

/**
 * SchemaApi - axios parameter creator
 * @export
 */
export const SchemaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve: async (format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchemaApi - functional programming interface
 * @export
 */
export const SchemaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchemaApiAxiosParamCreator(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async schemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.schemaRetrieve(format, lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchemaApi - factory interface
 * @export
 */
export const SchemaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchemaApiFp(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.schemaRetrieve(format, lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchemaApi - interface
 * @export
 * @interface SchemaApi
 */
export interface SchemaApiInterface {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {'json' | 'yaml'} [format] 
     * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApiInterface
     */
    schemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: AxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

}

/**
 * Request parameters for schemaRetrieve operation in SchemaApi.
 * @export
 * @interface SchemaApiSchemaRetrieveRequest
 */
export interface SchemaApiSchemaRetrieveRequest {
    /**
     * 
     * @type {'json' | 'yaml'}
     * @memberof SchemaApiSchemaRetrieve
     */
    readonly format?: 'json' | 'yaml'

    /**
     * 
     * @type {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'}
     * @memberof SchemaApiSchemaRetrieve
     */
    readonly lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'ckb' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'ug' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'
}

/**
 * SchemaApi - object-oriented interface
 * @export
 * @class SchemaApi
 * @extends {BaseAPI}
 */
export class SchemaApi extends BaseAPI implements SchemaApiInterface {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {SchemaApiSchemaRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchemaApi
     */
    public schemaRetrieve(requestParameters: SchemaApiSchemaRetrieveRequest = {}, options?: AxiosRequestConfig) {
        return SchemaApiFp(this.configuration).schemaRetrieve(requestParameters.format, requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1Api - axios parameter creator
 * @export
 */
export const V1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accept a job application
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsAccept: async (id: number, jobApplicationRequest: JobApplicationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsAccept', 'id', id)
            // verify required parameter 'jobApplicationRequest' is not null or undefined
            assertParamExists('v1ApplicationsAccept', 'jobApplicationRequest', jobApplicationRequest)
            const localVarPath = `/api/v1/applications/{id}/accept/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobApplicationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reject a job application
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsAcceptReject: async (id: number, jobApplicationRequest: JobApplicationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsAcceptReject', 'id', id)
            // verify required parameter 'jobApplicationRequest' is not null or undefined
            assertParamExists('v1ApplicationsAcceptReject', 'jobApplicationRequest', jobApplicationRequest)
            const localVarPath = `/api/v1/applications/{id}/reject/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobApplicationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing job applications.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsCreate: async (jobApplicationRequest: JobApplicationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobApplicationRequest' is not null or undefined
            assertParamExists('v1ApplicationsCreate', 'jobApplicationRequest', jobApplicationRequest)
            const localVarPath = `/api/v1/applications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobApplicationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsDestroy', 'id', id)
            const localVarPath = `/api/v1/applications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} [amountMax] 
         * @param {number} [amountMin] 
         * @param {string} [appliedAtAfter] 
         * @param {string} [appliedAtBefore] 
         * @param {number} [jobServiceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [jobUrgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {number} [jobId] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {'accepted' | 'pending' | 'rejected' | 'withdrawn'} [status] * &#x60;pending&#x60; - Pending * &#x60;accepted&#x60; - Accepted * &#x60;rejected&#x60; - Rejected * &#x60;withdrawn&#x60; - Withdrawn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsList: async (amountMax?: number, amountMin?: number, appliedAtAfter?: string, appliedAtBefore?: string, jobServiceSubcategory?: number, jobUrgency?: 'high' | 'low' | 'medium' | 'urgent', jobId?: number, ordering?: string, page?: number, pageSize?: number, search?: string, status?: 'accepted' | 'pending' | 'rejected' | 'withdrawn', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/applications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (amountMax !== undefined) {
                localVarQueryParameter['amount_max'] = amountMax;
            }

            if (amountMin !== undefined) {
                localVarQueryParameter['amount_min'] = amountMin;
            }

            if (appliedAtAfter !== undefined) {
                localVarQueryParameter['applied_at_after'] = (appliedAtAfter as any instanceof Date) ?
                    (appliedAtAfter as any).toISOString().substr(0,10) :
                    appliedAtAfter;
            }

            if (appliedAtBefore !== undefined) {
                localVarQueryParameter['applied_at_before'] = (appliedAtBefore as any instanceof Date) ?
                    (appliedAtBefore as any).toISOString().substr(0,10) :
                    appliedAtBefore;
            }

            if (jobServiceSubcategory !== undefined) {
                localVarQueryParameter['job__service_subcategory'] = jobServiceSubcategory;
            }

            if (jobUrgency !== undefined) {
                localVarQueryParameter['job__urgency'] = jobUrgency;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {PatchedJobApplicationRequest} [patchedJobApplicationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsPartialUpdate: async (id: number, patchedJobApplicationRequest?: PatchedJobApplicationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/applications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedJobApplicationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsRetrieve', 'id', id)
            const localVarPath = `/api/v1/applications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsUpdate: async (id: number, jobApplicationRequest: JobApplicationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsUpdate', 'id', id)
            // verify required parameter 'jobApplicationRequest' is not null or undefined
            assertParamExists('v1ApplicationsUpdate', 'jobApplicationRequest', jobApplicationRequest)
            const localVarPath = `/api/v1/applications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobApplicationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw a job by master
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsWithdraw: async (id: number, jobApplicationRequest: JobApplicationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ApplicationsWithdraw', 'id', id)
            // verify required parameter 'jobApplicationRequest' is not null or undefined
            assertParamExists('v1ApplicationsWithdraw', 'jobApplicationRequest', jobApplicationRequest)
            const localVarPath = `/api/v1/applications/{id}/withdraw/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobApplicationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assignmentId 
         * @param {Array<any>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsAttachmentsCreate: async (assignmentId: string, files: Array<any>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('v1AssignmentsAttachmentsCreate', 'assignmentId', assignmentId)
            // verify required parameter 'files' is not null or undefined
            assertParamExists('v1AssignmentsAttachmentsCreate', 'files', files)
            const localVarPath = `/api/v1/assignments/{assignment_id}/attachments/`
                .replace(`{${"assignment_id"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assignmentId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsAttachmentsDestroy: async (assignmentId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('v1AssignmentsAttachmentsDestroy', 'assignmentId', assignmentId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AssignmentsAttachmentsDestroy', 'id', id)
            const localVarPath = `/api/v1/assignments/{assignment_id}/attachments/{id}/`
                .replace(`{${"assignment_id"}}`, encodeURIComponent(String(assignmentId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} assignmentId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsAttachmentsList: async (assignmentId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'assignmentId' is not null or undefined
            assertParamExists('v1AssignmentsAttachmentsList', 'assignmentId', assignmentId)
            const localVarPath = `/api/v1/assignments/{assignment_id}/attachments/`
                .replace(`{${"assignment_id"}}`, encodeURIComponent(String(assignmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JobAssignmentRequest} [jobAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsCreate: async (jobAssignmentRequest?: JobAssignmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/assignments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobAssignmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsDestroy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AssignmentsDestroy', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/assignments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {PatchedJobAssignmentRequest} [patchedJobAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsPartialUpdate: async (id: string, patchedJobAssignmentRequest?: PatchedJobAssignmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AssignmentsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedJobAssignmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rate a completed job assignment
         * @param {string} id 
         * @param {RatingRequest} [ratingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsRateCreate: async (id: string, ratingRequest?: RatingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AssignmentsRateCreate', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/rate/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ratingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsRetrieve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AssignmentsRetrieve', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {JobAssignmentRequest} [jobAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsUpdate: async (id: string, jobAssignmentRequest?: JobAssignmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AssignmentsUpdate', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobAssignmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update progress notes for an assignment
         * @param {string} id 
         * @param {PatchedProgressUpdateRequest} [patchedProgressUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsUpdateProgressPartialUpdate: async (id: string, patchedProgressUpdateRequest?: PatchedProgressUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1AssignmentsUpdateProgressPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/update_progress/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedProgressUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authenticate or register a user using Firebase ID token.
         * @param {FireBaseAuthRequest} fireBaseAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthFirebaseCreate: async (fireBaseAuthRequest: FireBaseAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fireBaseAuthRequest' is not null or undefined
            assertParamExists('v1AuthFirebaseCreate', 'fireBaseAuthRequest', fireBaseAuthRequest)
            const localVarPath = `/api/v1/auth/firebase/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fireBaseAuthRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * User logout view - enhanced version of api_users LogOutView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthLogoutCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/logout/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing chat rooms
         * @param {ChatRoomCreateRequest} chatRoomCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsCreate: async (chatRoomCreateRequest: ChatRoomCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatRoomCreateRequest' is not null or undefined
            assertParamExists('v1ChatsRoomsCreate', 'chatRoomCreateRequest', chatRoomCreateRequest)
            const localVarPath = `/api/v1/chats/rooms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatRoomCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsDestroy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsDestroy', 'id', id)
            const localVarPath = `/api/v1/chats/rooms/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get chats for master
         * @param {number} masterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsForMaster: async (masterId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterId' is not null or undefined
            assertParamExists('v1ChatsRoomsForMaster', 'masterId', masterId)
            const localVarPath = `/api/v1/chats/rooms/for_master/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (masterId !== undefined) {
                localVarQueryParameter['master_id'] = masterId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Leave a chat room
         * @param {string} id 
         * @param {ChatRoomRequest} chatRoomRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsLeave: async (id: string, chatRoomRequest: ChatRoomRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsLeave', 'id', id)
            // verify required parameter 'chatRoomRequest' is not null or undefined
            assertParamExists('v1ChatsRoomsLeave', 'chatRoomRequest', chatRoomRequest)
            const localVarPath = `/api/v1/chats/rooms/{id}/leave/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatRoomRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/chats/rooms/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {MessageCreateRequest} messageCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessagesCreate: async (chatRoomId: string, messageCreateRequest: MessageCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatRoomId' is not null or undefined
            assertParamExists('v1ChatsRoomsMessagesCreate', 'chatRoomId', chatRoomId)
            // verify required parameter 'messageCreateRequest' is not null or undefined
            assertParamExists('v1ChatsRoomsMessagesCreate', 'messageCreateRequest', messageCreateRequest)
            const localVarPath = `/api/v1/chats/rooms/{chat_room_id}/messages/`
                .replace(`{${"chat_room_id"}}`, encodeURIComponent(String(chatRoomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessagesDestroy: async (chatRoomId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatRoomId' is not null or undefined
            assertParamExists('v1ChatsRoomsMessagesDestroy', 'chatRoomId', chatRoomId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsMessagesDestroy', 'id', id)
            const localVarPath = `/api/v1/chats/rooms/{chat_room_id}/messages/{id}/`
                .replace(`{${"chat_room_id"}}`, encodeURIComponent(String(chatRoomId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessagesList: async (chatRoomId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatRoomId' is not null or undefined
            assertParamExists('v1ChatsRoomsMessagesList', 'chatRoomId', chatRoomId)
            const localVarPath = `/api/v1/chats/rooms/{chat_room_id}/messages/`
                .replace(`{${"chat_room_id"}}`, encodeURIComponent(String(chatRoomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} id 
         * @param {PatchedMessageRequest} [patchedMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessagesPartialUpdate: async (chatRoomId: string, id: string, patchedMessageRequest?: PatchedMessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatRoomId' is not null or undefined
            assertParamExists('v1ChatsRoomsMessagesPartialUpdate', 'chatRoomId', chatRoomId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsMessagesPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/chats/rooms/{chat_room_id}/messages/{id}/`
                .replace(`{${"chat_room_id"}}`, encodeURIComponent(String(chatRoomId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessagesRetrieve: async (chatRoomId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatRoomId' is not null or undefined
            assertParamExists('v1ChatsRoomsMessagesRetrieve', 'chatRoomId', chatRoomId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsMessagesRetrieve', 'id', id)
            const localVarPath = `/api/v1/chats/rooms/{chat_room_id}/messages/{id}/`
                .replace(`{${"chat_room_id"}}`, encodeURIComponent(String(chatRoomId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} id 
         * @param {MessageUpdateRequest} messageUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessagesUpdate: async (chatRoomId: string, id: string, messageUpdateRequest: MessageUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatRoomId' is not null or undefined
            assertParamExists('v1ChatsRoomsMessagesUpdate', 'chatRoomId', chatRoomId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsMessagesUpdate', 'id', id)
            // verify required parameter 'messageUpdateRequest' is not null or undefined
            assertParamExists('v1ChatsRoomsMessagesUpdate', 'messageUpdateRequest', messageUpdateRequest)
            const localVarPath = `/api/v1/chats/rooms/{chat_room_id}/messages/{id}/`
                .replace(`{${"chat_room_id"}}`, encodeURIComponent(String(chatRoomId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {PatchedChatRoomRequest} [patchedChatRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsPartialUpdate: async (id: string, patchedChatRoomRequest?: PatchedChatRoomRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/chats/rooms/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedChatRoomRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsRetrieve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsRetrieve', 'id', id)
            const localVarPath = `/api/v1/chats/rooms/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {ChatRoomRequest} chatRoomRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsUpdate: async (id: string, chatRoomRequest: ChatRoomRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ChatsRoomsUpdate', 'id', id)
            // verify required parameter 'chatRoomRequest' is not null or undefined
            assertParamExists('v1ChatsRoomsUpdate', 'chatRoomRequest', chatRoomRequest)
            const localVarPath = `/api/v1/chats/rooms/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chatRoomRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create contact with throttling.
         * @param {SimpleContactRequest} simpleContactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsCreate: async (simpleContactRequest: SimpleContactRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'simpleContactRequest' is not null or undefined
            assertParamExists('v1ContactsCreate', 'simpleContactRequest', simpleContactRequest)
            const localVarPath = `/api/v1/contacts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(simpleContactRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {number} id A unique integer value identifying this simple contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ContactsDestroy', 'id', id)
            const localVarPath = `/api/v1/contacts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get available enquiry types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsEnquiryTypesRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/contacts/enquiry_types/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/contacts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {number} id A unique integer value identifying this simple contact.
         * @param {PatchedSimpleContactRequest} [patchedSimpleContactRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsPartialUpdate: async (id: number, patchedSimpleContactRequest?: PatchedSimpleContactRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ContactsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/contacts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedSimpleContactRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {number} id A unique integer value identifying this simple contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ContactsRetrieve', 'id', id)
            const localVarPath = `/api/v1/contacts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {number} id A unique integer value identifying this simple contact.
         * @param {SimpleContactRequest} simpleContactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsUpdate: async (id: number, simpleContactRequest: SimpleContactRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ContactsUpdate', 'id', id)
            // verify required parameter 'simpleContactRequest' is not null or undefined
            assertParamExists('v1ContactsUpdate', 'simpleContactRequest', simpleContactRequest)
            const localVarPath = `/api/v1/contacts/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(simpleContactRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Languages - Read-only (managed via admin/fixtures).
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {boolean} [isActive] 
         * @param {boolean} [isDefault] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreLanguagesList: async (idIn?: Array<number>, isActive?: boolean, isDefault?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/core/languages/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (idIn) {
                localVarQueryParameter['id__in'] = idIn.join(COLLECTION_FORMATS.csv);
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (isDefault !== undefined) {
                localVarQueryParameter['is_default'] = isDefault;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Languages - Read-only (managed via admin/fixtures).
         * @param {number} id A unique integer value identifying this Language.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreLanguagesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreLanguagesRetrieve', 'id', id)
            const localVarPath = `/api/v1/core/languages/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {ServiceAreaCreateUpdateRequest} serviceAreaCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasCreate: async (serviceAreaCreateUpdateRequest: ServiceAreaCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceAreaCreateUpdateRequest' is not null or undefined
            assertParamExists('v1CoreServiceAreasCreate', 'serviceAreaCreateUpdateRequest', serviceAreaCreateUpdateRequest)
            const localVarPath = `/api/v1/core/service-areas/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceAreaCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceAreasDestroy', 'id', id)
            const localVarPath = `/api/v1/core/service-areas/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasList: async (idIn?: Array<number>, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/core/service-areas/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (idIn) {
                localVarQueryParameter['id__in'] = idIn.join(COLLECTION_FORMATS.csv);
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {PatchedServiceAreaCreateUpdateRequest} [patchedServiceAreaCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasPartialUpdate: async (id: number, patchedServiceAreaCreateUpdateRequest?: PatchedServiceAreaCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceAreasPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/core/service-areas/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedServiceAreaCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceAreasRetrieve', 'id', id)
            const localVarPath = `/api/v1/core/service-areas/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {ServiceAreaCreateUpdateRequest} serviceAreaCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasUpdate: async (id: number, serviceAreaCreateUpdateRequest: ServiceAreaCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceAreasUpdate', 'id', id)
            // verify required parameter 'serviceAreaCreateUpdateRequest' is not null or undefined
            assertParamExists('v1CoreServiceAreasUpdate', 'serviceAreaCreateUpdateRequest', serviceAreaCreateUpdateRequest)
            const localVarPath = `/api/v1/core/service-areas/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceAreaCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {ServiceCategoryCreateUpdateRequest} serviceCategoryCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesCreate: async (serviceCategoryCreateUpdateRequest: ServiceCategoryCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceCategoryCreateUpdateRequest' is not null or undefined
            assertParamExists('v1CoreServiceCategoriesCreate', 'serviceCategoryCreateUpdateRequest', serviceCategoryCreateUpdateRequest)
            const localVarPath = `/api/v1/core/service-categories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceCategoryCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceCategoriesDestroy', 'id', id)
            const localVarPath = `/api/v1/core/service-categories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {boolean} [featured] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesList: async (featured?: boolean, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/core/service-categories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (featured !== undefined) {
                localVarQueryParameter['featured'] = featured;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {PatchedServiceCategoryCreateUpdateRequest} [patchedServiceCategoryCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesPartialUpdate: async (id: number, patchedServiceCategoryCreateUpdateRequest?: PatchedServiceCategoryCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceCategoriesPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/core/service-categories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedServiceCategoryCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceCategoriesRetrieve', 'id', id)
            const localVarPath = `/api/v1/core/service-categories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {ServiceCategoryCreateUpdateRequest} serviceCategoryCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesUpdate: async (id: number, serviceCategoryCreateUpdateRequest: ServiceCategoryCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceCategoriesUpdate', 'id', id)
            // verify required parameter 'serviceCategoryCreateUpdateRequest' is not null or undefined
            assertParamExists('v1CoreServiceCategoriesUpdate', 'serviceCategoryCreateUpdateRequest', serviceCategoryCreateUpdateRequest)
            const localVarPath = `/api/v1/core/service-categories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceCategoryCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {ServiceSubcategoryCreateUpdateRequest} serviceSubcategoryCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesCreate: async (serviceSubcategoryCreateUpdateRequest: ServiceSubcategoryCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceSubcategoryCreateUpdateRequest' is not null or undefined
            assertParamExists('v1CoreServiceSubcategoriesCreate', 'serviceSubcategoryCreateUpdateRequest', serviceSubcategoryCreateUpdateRequest)
            const localVarPath = `/api/v1/core/service-subcategories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceSubcategoryCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceSubcategoriesDestroy', 'id', id)
            const localVarPath = `/api/v1/core/service-subcategories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} [category] 
         * @param {boolean} [featured] 
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesList: async (category?: number, featured?: boolean, idIn?: Array<number>, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/core/service-subcategories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (featured !== undefined) {
                localVarQueryParameter['featured'] = featured;
            }

            if (idIn) {
                localVarQueryParameter['id__in'] = idIn.join(COLLECTION_FORMATS.csv);
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {PatchedServiceSubcategoryCreateUpdateRequest} [patchedServiceSubcategoryCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesPartialUpdate: async (id: number, patchedServiceSubcategoryCreateUpdateRequest?: PatchedServiceSubcategoryCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceSubcategoriesPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/core/service-subcategories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedServiceSubcategoryCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceSubcategoriesRetrieve', 'id', id)
            const localVarPath = `/api/v1/core/service-subcategories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {ServiceSubcategoryCreateUpdateRequest} serviceSubcategoryCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesUpdate: async (id: number, serviceSubcategoryCreateUpdateRequest: ServiceSubcategoryCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreServiceSubcategoriesUpdate', 'id', id)
            // verify required parameter 'serviceSubcategoryCreateUpdateRequest' is not null or undefined
            assertParamExists('v1CoreServiceSubcategoriesUpdate', 'serviceSubcategoryCreateUpdateRequest', serviceSubcategoryCreateUpdateRequest)
            const localVarPath = `/api/v1/core/service-subcategories/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(serviceSubcategoryCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {SupportFAQCreateUpdateRequest} supportFAQCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqCreate: async (supportFAQCreateUpdateRequest: SupportFAQCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'supportFAQCreateUpdateRequest' is not null or undefined
            assertParamExists('v1CoreSupportFaqCreate', 'supportFAQCreateUpdateRequest', supportFAQCreateUpdateRequest)
            const localVarPath = `/api/v1/core/support/faq/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(supportFAQCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSupportFaqDestroy', 'id', id)
            const localVarPath = `/api/v1/core/support/faq/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist'} [category] * &#x60;general&#x60; - Основная информация * &#x60;specialist&#x60; - Specialist * &#x60;reviews&#x60; - Reviews * &#x60;account&#x60; - Аккаунт * &#x60;search&#x60; - Найти * &#x60;safety&#x60; - Safety
         * @param {boolean} [isActive] 
         * @param {number} [language] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqList: async (category?: 'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist', isActive?: boolean, language?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/core/support/faq/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {PatchedSupportFAQCreateUpdateRequest} [patchedSupportFAQCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqPartialUpdate: async (id: number, patchedSupportFAQCreateUpdateRequest?: PatchedSupportFAQCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSupportFaqPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/core/support/faq/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedSupportFAQCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSupportFaqRetrieve', 'id', id)
            const localVarPath = `/api/v1/core/support/faq/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {SupportFAQCreateUpdateRequest} supportFAQCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqUpdate: async (id: number, supportFAQCreateUpdateRequest: SupportFAQCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSupportFaqUpdate', 'id', id)
            // verify required parameter 'supportFAQCreateUpdateRequest' is not null or undefined
            assertParamExists('v1CoreSupportFaqUpdate', 'supportFAQCreateUpdateRequest', supportFAQCreateUpdateRequest)
            const localVarPath = `/api/v1/core/support/faq/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(supportFAQCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {SystemSettingsCreateUpdateRequest} systemSettingsCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsCreate: async (systemSettingsCreateUpdateRequest: SystemSettingsCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemSettingsCreateUpdateRequest' is not null or undefined
            assertParamExists('v1CoreSystemSettingsCreate', 'systemSettingsCreateUpdateRequest', systemSettingsCreateUpdateRequest)
            const localVarPath = `/api/v1/core/system-settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemSettingsCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSystemSettingsDestroy', 'id', id)
            const localVarPath = `/api/v1/core/system-settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {string} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsList: async (category?: string, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/core/system-settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {PatchedSystemSettingsCreateUpdateRequest} [patchedSystemSettingsCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsPartialUpdate: async (id: number, patchedSystemSettingsCreateUpdateRequest?: PatchedSystemSettingsCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSystemSettingsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/core/system-settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedSystemSettingsCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSystemSettingsRetrieve', 'id', id)
            const localVarPath = `/api/v1/core/system-settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {SystemSettingsCreateUpdateRequest} systemSettingsCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsUpdate: async (id: number, systemSettingsCreateUpdateRequest: SystemSettingsCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1CoreSystemSettingsUpdate', 'id', id)
            // verify required parameter 'systemSettingsCreateUpdateRequest' is not null or undefined
            assertParamExists('v1CoreSystemSettingsUpdate', 'systemSettingsCreateUpdateRequest', systemSettingsCreateUpdateRequest)
            const localVarPath = `/api/v1/core/system-settings/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemSettingsCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns featured categories, recommended masters, and statistics for the home page. Prioritizes top masters first, then fills with additional masters if needed.
         * @summary Get home page data with master recommendations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1HomeClientRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/home/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get job recommendations for master based on skills, location, and preferences.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1HomeMasterNewJobsList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/home/master/new-jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Complete an assignment with optional rating and review
         * @param {string} id 
         * @param {JobAssignmentCompletionRequest} [jobAssignmentCompletionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobAssignmentsComplete: async (id: string, jobAssignmentCompletionRequest?: JobAssignmentCompletionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobAssignmentsComplete', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/complete/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobAssignmentCompletionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start an assignment
         * @param {string} id 
         * @param {JobAssignmentRequest} [jobAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobAssignmentsStart: async (id: string, jobAssignmentRequest?: JobAssignmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobAssignmentsStart', 'id', id)
            const localVarPath = `/api/v1/assignments/{id}/start/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobAssignmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Apply to a job.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobApplyRequest} jobApplyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsApply: async (id: number, jobApplyRequest: JobApplyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsApply', 'id', id)
            // verify required parameter 'jobApplyRequest' is not null or undefined
            assertParamExists('v1JobsApply', 'jobApplyRequest', jobApplyRequest)
            const localVarPath = `/api/v1/jobs/{id}/apply/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobApplyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobId 
         * @param {Array<any>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsAttachmentsCreate: async (jobId: string, files: Array<any>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('v1JobsAttachmentsCreate', 'jobId', jobId)
            // verify required parameter 'files' is not null or undefined
            assertParamExists('v1JobsAttachmentsCreate', 'files', files)
            const localVarPath = `/api/v1/jobs/{job_id}/attachments/`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsAttachmentsDestroy: async (id: string, jobId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsAttachmentsDestroy', 'id', id)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('v1JobsAttachmentsDestroy', 'jobId', jobId)
            const localVarPath = `/api/v1/jobs/{job_id}/attachments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} jobId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsAttachmentsList: async (jobId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('v1JobsAttachmentsList', 'jobId', jobId)
            const localVarPath = `/api/v1/jobs/{job_id}/attachments/`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Toggle bookmark status for a job
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsBookmark: async (id: number, jobRequest: JobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsBookmark', 'id', id)
            // verify required parameter 'jobRequest' is not null or undefined
            assertParamExists('v1JobsBookmark', 'jobRequest', jobRequest)
            const localVarPath = `/api/v1/jobs/{id}/bookmark/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel a job. Only allowed if job is in PUBLISHED or ASSIGNED state.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsCancel: async (id: number, jobRequest: JobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsCancel', 'id', id)
            // verify required parameter 'jobRequest' is not null or undefined
            assertParamExists('v1JobsCancel', 'jobRequest', jobRequest)
            const localVarPath = `/api/v1/jobs/{id}/cancel/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing jobs.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsCreate: async (jobRequest: JobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobRequest' is not null or undefined
            assertParamExists('v1JobsCreate', 'jobRequest', jobRequest)
            const localVarPath = `/api/v1/jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsDestroy', 'id', id)
            const localVarPath = `/api/v1/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Toggle favorite status for a job
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsFavorite: async (id: number, jobRequest: JobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsFavorite', 'id', id)
            // verify required parameter 'jobRequest' is not null or undefined
            assertParamExists('v1JobsFavorite', 'jobRequest', jobRequest)
            const localVarPath = `/api/v1/jobs/{id}/favorite/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing jobs.
         * @param {string} [city] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceCategory] 
         * @param {string} [serviceDateFrom] 
         * @param {string} [serviceDateTo] 
         * @param {number} [serviceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsList: async (city?: string, maxPrice?: number, minPrice?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceCategory?: number, serviceDateFrom?: string, serviceDateTo?: string, serviceSubcategory?: number, urgency?: 'high' | 'low' | 'medium' | 'urgent', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['max_price'] = maxPrice;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['min_price'] = minPrice;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (serviceCategory !== undefined) {
                localVarQueryParameter['service_category'] = serviceCategory;
            }

            if (serviceDateFrom !== undefined) {
                localVarQueryParameter['service_date_from'] = (serviceDateFrom as any instanceof Date) ?
                    (serviceDateFrom as any).toISOString().substr(0,10) :
                    serviceDateFrom;
            }

            if (serviceDateTo !== undefined) {
                localVarQueryParameter['service_date_to'] = (serviceDateTo as any instanceof Date) ?
                    (serviceDateTo as any).toISOString().substr(0,10) :
                    serviceDateTo;
            }

            if (serviceSubcategory !== undefined) {
                localVarQueryParameter['service_subcategory'] = serviceSubcategory;
            }

            if (urgency !== undefined) {
                localVarQueryParameter['urgency'] = urgency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get completed job history for master
         * @param {string} [city] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceCategory] 
         * @param {string} [serviceDateFrom] 
         * @param {string} [serviceDateTo] 
         * @param {number} [serviceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsMasterHistory: async (city?: string, maxPrice?: number, minPrice?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceCategory?: number, serviceDateFrom?: string, serviceDateTo?: string, serviceSubcategory?: number, urgency?: 'high' | 'low' | 'medium' | 'urgent', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/jobs/master_history/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['max_price'] = maxPrice;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['min_price'] = minPrice;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (serviceCategory !== undefined) {
                localVarQueryParameter['service_category'] = serviceCategory;
            }

            if (serviceDateFrom !== undefined) {
                localVarQueryParameter['service_date_from'] = (serviceDateFrom as any instanceof Date) ?
                    (serviceDateFrom as any).toISOString().substr(0,10) :
                    serviceDateFrom;
            }

            if (serviceDateTo !== undefined) {
                localVarQueryParameter['service_date_to'] = (serviceDateTo as any instanceof Date) ?
                    (serviceDateTo as any).toISOString().substr(0,10) :
                    serviceDateTo;
            }

            if (serviceSubcategory !== undefined) {
                localVarQueryParameter['service_subcategory'] = serviceSubcategory;
            }

            if (urgency !== undefined) {
                localVarQueryParameter['urgency'] = urgency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get jobs currently in progress for master
         * @param {string} [city] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceCategory] 
         * @param {string} [serviceDateFrom] 
         * @param {string} [serviceDateTo] 
         * @param {number} [serviceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsMasterInProgress: async (city?: string, maxPrice?: number, minPrice?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceCategory?: number, serviceDateFrom?: string, serviceDateTo?: string, serviceSubcategory?: number, urgency?: 'high' | 'low' | 'medium' | 'urgent', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/jobs/master_in_progress/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['max_price'] = maxPrice;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['min_price'] = minPrice;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (serviceCategory !== undefined) {
                localVarQueryParameter['service_category'] = serviceCategory;
            }

            if (serviceDateFrom !== undefined) {
                localVarQueryParameter['service_date_from'] = (serviceDateFrom as any instanceof Date) ?
                    (serviceDateFrom as any).toISOString().substr(0,10) :
                    serviceDateFrom;
            }

            if (serviceDateTo !== undefined) {
                localVarQueryParameter['service_date_to'] = (serviceDateTo as any instanceof Date) ?
                    (serviceDateTo as any).toISOString().substr(0,10) :
                    serviceDateTo;
            }

            if (serviceSubcategory !== undefined) {
                localVarQueryParameter['service_subcategory'] = serviceSubcategory;
            }

            if (urgency !== undefined) {
                localVarQueryParameter['urgency'] = urgency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {PatchedJobRequest} [patchedJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsPartialUpdate: async (id: number, patchedJobRequest?: PatchedJobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedJobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish a draft job. Only allowed if job is in DRAFT state.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsPublish: async (id: number, jobRequest: JobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsPublish', 'id', id)
            // verify required parameter 'jobRequest' is not null or undefined
            assertParamExists('v1JobsPublish', 'jobRequest', jobRequest)
            const localVarPath = `/api/v1/jobs/{id}/publish/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsRetrieve', 'id', id)
            const localVarPath = `/api/v1/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsUpdate: async (id: number, jobRequest: JobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1JobsUpdate', 'id', id)
            // verify required parameter 'jobRequest' is not null or undefined
            assertParamExists('v1JobsUpdate', 'jobRequest', jobRequest)
            const localVarPath = `/api/v1/jobs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing cities.
         * @param {CityRequest} cityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesCreate: async (cityRequest: CityRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cityRequest' is not null or undefined
            assertParamExists('v1LocationsCitiesCreate', 'cityRequest', cityRequest)
            const localVarPath = `/api/v1/locations/cities/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cityRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing cities.
         * @param {number} id A unique integer value identifying this City.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1LocationsCitiesDestroy', 'id', id)
            const localVarPath = `/api/v1/locations/cities/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing cities.
         * @param {number} [country] 
         * @param {boolean} [isDeleted] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesList: async (country?: number, isDeleted?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/locations/cities/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (isDeleted !== undefined) {
                localVarQueryParameter['is_deleted'] = isDeleted;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing cities.
         * @param {number} id A unique integer value identifying this City.
         * @param {PatchedCityRequest} [patchedCityRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesPartialUpdate: async (id: number, patchedCityRequest?: PatchedCityRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1LocationsCitiesPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/locations/cities/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedCityRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing cities.
         * @param {number} id A unique integer value identifying this City.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1LocationsCitiesRetrieve', 'id', id)
            const localVarPath = `/api/v1/locations/cities/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing cities.
         * @param {number} id A unique integer value identifying this City.
         * @param {CityRequest} cityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesUpdate: async (id: number, cityRequest: CityRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1LocationsCitiesUpdate', 'id', id)
            // verify required parameter 'cityRequest' is not null or undefined
            assertParamExists('v1LocationsCitiesUpdate', 'cityRequest', cityRequest)
            const localVarPath = `/api/v1/locations/cities/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cityRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing countries.
         * @param {CountryRequest} countryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesCreate: async (countryRequest: CountryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryRequest' is not null or undefined
            assertParamExists('v1LocationsCountriesCreate', 'countryRequest', countryRequest)
            const localVarPath = `/api/v1/locations/countries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(countryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing countries.
         * @param {number} id A unique integer value identifying this Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1LocationsCountriesDestroy', 'id', id)
            const localVarPath = `/api/v1/locations/countries/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing countries.
         * @param {boolean} [isDeleted] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesList: async (isDeleted?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/locations/countries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (isDeleted !== undefined) {
                localVarQueryParameter['is_deleted'] = isDeleted;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing countries.
         * @param {number} id A unique integer value identifying this Country.
         * @param {PatchedCountryRequest} [patchedCountryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesPartialUpdate: async (id: number, patchedCountryRequest?: PatchedCountryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1LocationsCountriesPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/locations/countries/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedCountryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing countries.
         * @param {number} id A unique integer value identifying this Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1LocationsCountriesRetrieve', 'id', id)
            const localVarPath = `/api/v1/locations/countries/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing countries.
         * @param {number} id A unique integer value identifying this Country.
         * @param {CountryRequest} countryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesUpdate: async (id: number, countryRequest: CountryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1LocationsCountriesUpdate', 'id', id)
            // verify required parameter 'countryRequest' is not null or undefined
            assertParamExists('v1LocationsCountriesUpdate', 'countryRequest', countryRequest)
            const localVarPath = `/api/v1/locations/countries/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(countryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get notification counts for current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsCount: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications/count/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {NotificationCreateRequest} notificationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsCreate: async (notificationCreateRequest: NotificationCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationCreateRequest' is not null or undefined
            assertParamExists('v1NotificationsCreate', 'notificationCreateRequest', notificationCreateRequest)
            const localVarPath = `/api/v1/notifications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsDestroy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1NotificationsDestroy', 'id', id)
            const localVarPath = `/api/v1/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark all notifications as read for current user
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsMarkAllRead: async (notificationRequest: NotificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationRequest' is not null or undefined
            assertParamExists('v1NotificationsMarkAllRead', 'notificationRequest', notificationRequest)
            const localVarPath = `/api/v1/notifications/mark-all-read/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark specific notification as read
         * @param {string} id 
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsMarkRead: async (id: string, notificationRequest: NotificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1NotificationsMarkRead', 'id', id)
            // verify required parameter 'notificationRequest' is not null or undefined
            assertParamExists('v1NotificationsMarkRead', 'notificationRequest', notificationRequest)
            const localVarPath = `/api/v1/notifications/{id}/mark-read/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark specific notification as unread
         * @param {string} id 
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsMarkUnread: async (id: string, notificationRequest: NotificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1NotificationsMarkUnread', 'id', id)
            // verify required parameter 'notificationRequest' is not null or undefined
            assertParamExists('v1NotificationsMarkUnread', 'notificationRequest', notificationRequest)
            const localVarPath = `/api/v1/notifications/{id}/mark-unread/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {PatchedNotificationUpdateRequest} [patchedNotificationUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsPartialUpdate: async (id: string, patchedNotificationUpdateRequest?: PatchedNotificationUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1NotificationsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedNotificationUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get recent notifications (last 7 days)
         * @param {number} [days] Number of days to look back
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsRecent: async (days?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications/recent/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (days !== undefined) {
                localVarQueryParameter['days'] = days;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsRetrieve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1NotificationsRetrieve', 'id', id)
            const localVarPath = `/api/v1/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get unread notifications for current user
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsUnread: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/notifications/unread/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {NotificationUpdateRequest} [notificationUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsUpdate: async (id: string, notificationUpdateRequest?: NotificationUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1NotificationsUpdate', 'id', id)
            const localVarPath = `/api/v1/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileControlCreate: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile/control/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PatchedUserNotificationSettingsRequest} [patchedUserNotificationSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileNotificationSettingsPartialUpdate: async (patchedUserNotificationSettingsRequest?: PatchedUserNotificationSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile/notification-settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedUserNotificationSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileNotificationSettingsRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile/notification-settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserNotificationSettingsRequest} [userNotificationSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileNotificationSettingsUpdate: async (userNotificationSettingsRequest?: UserNotificationSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile/notification-settings/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userNotificationSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve or update authenticated user\'s profile, including profile image upload.
         * @param {PatchedUserUpdateRequest} [patchedUserUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfilePartialUpdate: async (patchedUserUpdateRequest?: PatchedUserUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedUserUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve or update authenticated user\'s profile, including profile image upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve or update authenticated user\'s profile, including profile image upload.
         * @param {UserUpdateRequest} [userUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileUpdate: async (userUpdateRequest?: UserUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Archive a published resume.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResumeRequest} masterResumeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesArchive: async (id: number, masterResumeRequest: MasterResumeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ResumesArchive', 'id', id)
            // verify required parameter 'masterResumeRequest' is not null or undefined
            assertParamExists('v1ResumesArchive', 'masterResumeRequest', masterResumeRequest)
            const localVarPath = `/api/v1/resumes/{id}/archive/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterResumeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {MasterResumeRequest} masterResumeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesCreate: async (masterResumeRequest: MasterResumeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterResumeRequest' is not null or undefined
            assertParamExists('v1ResumesCreate', 'masterResumeRequest', masterResumeRequest)
            const localVarPath = `/api/v1/resumes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterResumeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesDestroy: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ResumesDestroy', 'id', id)
            const localVarPath = `/api/v1/resumes/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/resumes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {PatchedMasterResumeRequest} [patchedMasterResumeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesPartialUpdate: async (id: number, patchedMasterResumeRequest?: PatchedMasterResumeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ResumesPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/resumes/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMasterResumeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publish a draft resume. Only allowed if in DRAFT state.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResumeRequest} masterResumeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesPublish: async (id: number, masterResumeRequest: MasterResumeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ResumesPublish', 'id', id)
            // verify required parameter 'masterResumeRequest' is not null or undefined
            assertParamExists('v1ResumesPublish', 'masterResumeRequest', masterResumeRequest)
            const localVarPath = `/api/v1/resumes/{id}/publish/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterResumeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ResumesRetrieve', 'id', id)
            const localVarPath = `/api/v1/resumes/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResumeRequest} masterResumeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesUpdate: async (id: number, masterResumeRequest: MasterResumeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ResumesUpdate', 'id', id)
            // verify required parameter 'masterResumeRequest' is not null or undefined
            assertParamExists('v1ResumesUpdate', 'masterResumeRequest', masterResumeRequest)
            const localVarPath = `/api/v1/resumes/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterResumeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get review analytics for a specific master
         * @param {number} masterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ReviewsAnalyticsRetrieve: async (masterId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterId' is not null or undefined
            assertParamExists('v1ReviewsAnalyticsRetrieve', 'masterId', masterId)
            const localVarPath = `/api/v1/reviews/analytics/{master_id}/`
                .replace(`{${"master_id"}}`, encodeURIComponent(String(masterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get review data from job assignments
         * @param {boolean} [isVerified] 
         * @param {number} [job] 
         * @param {number} [master] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [rating] 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ReviewsAssignmentsList: async (isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/reviews/assignments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (isVerified !== undefined) {
                localVarQueryParameter['is_verified'] = isVerified;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (master !== undefined) {
                localVarQueryParameter['master'] = master;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rating !== undefined) {
                localVarQueryParameter['rating'] = rating;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all reviews for a specific job
         * @param {number} jobId 
         * @param {boolean} [isVerified] 
         * @param {number} [job] 
         * @param {number} [master] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [rating] 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ReviewsJobList: async (jobId: number, isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('v1ReviewsJobList', 'jobId', jobId)
            const localVarPath = `/api/v1/reviews/job/{job_id}/`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (isVerified !== undefined) {
                localVarQueryParameter['is_verified'] = isVerified;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (master !== undefined) {
                localVarQueryParameter['master'] = master;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rating !== undefined) {
                localVarQueryParameter['rating'] = rating;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Comprehensive review management with additional actions.
         * @param {boolean} [isVerified] 
         * @param {number} [job] 
         * @param {number} [master] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [rating] 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ReviewsList: async (isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/reviews/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (isVerified !== undefined) {
                localVarQueryParameter['is_verified'] = isVerified;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (master !== undefined) {
                localVarQueryParameter['master'] = master;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rating !== undefined) {
                localVarQueryParameter['rating'] = rating;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all reviews for a specific master
         * @param {number} masterId 
         * @param {boolean} [isVerified] 
         * @param {number} [job] 
         * @param {number} [master] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [rating] 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ReviewsMasterList: async (masterId: number, isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterId' is not null or undefined
            assertParamExists('v1ReviewsMasterList', 'masterId', masterId)
            const localVarPath = `/api/v1/reviews/master/{master_id}/`
                .replace(`{${"master_id"}}`, encodeURIComponent(String(masterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (isVerified !== undefined) {
                localVarQueryParameter['is_verified'] = isVerified;
            }

            if (job !== undefined) {
                localVarQueryParameter['job'] = job;
            }

            if (master !== undefined) {
                localVarQueryParameter['master'] = master;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (rating !== undefined) {
                localVarQueryParameter['rating'] = rating;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Comprehensive review management with additional actions.
         * @param {number} id A unique integer value identifying this Review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ReviewsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1ReviewsRetrieve', 'id', id)
            const localVarPath = `/api/v1/reviews/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search jobs with optimized search serializer.
         * @param {number} [budgetMaxLte] 
         * @param {number} [budgetMinGte] 
         * @param {number} [city] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceSubcategoryCategory] 
         * @param {'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published'} [status] * &#x60;draft&#x60; - Draft * &#x60;published&#x60; - Published * &#x60;assigned&#x60; - Assigned * &#x60;in_progress&#x60; - In Progress * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SearchJobsList: async (budgetMaxLte?: number, budgetMinGte?: number, city?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceSubcategoryCategory?: number, status?: 'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published', urgency?: 'high' | 'low' | 'medium' | 'urgent', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/search/jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (budgetMaxLte !== undefined) {
                localVarQueryParameter['budget_max__lte'] = budgetMaxLte;
            }

            if (budgetMinGte !== undefined) {
                localVarQueryParameter['budget_min__gte'] = budgetMinGte;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (serviceSubcategoryCategory !== undefined) {
                localVarQueryParameter['service_subcategory__category'] = serviceSubcategoryCategory;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (urgency !== undefined) {
                localVarQueryParameter['urgency'] = urgency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search masters by keywords, profession, location, and other criteria. Returns paginated list of master profiles with portfolio items and skills.
         * @summary Search for masters
         * @param {boolean} [isAvailable] 
         * @param {boolean} [isTopMaster] 
         * @param {boolean} [isVerifiedProvider] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [profession] 
         * @param {string} [search] A search term.
         * @param {number} [servicesOfferedCategory] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SearchMastersList: async (isAvailable?: boolean, isTopMaster?: boolean, isVerifiedProvider?: boolean, ordering?: string, page?: number, pageSize?: number, profession?: number, search?: string, servicesOfferedCategory?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/search/masters/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (isAvailable !== undefined) {
                localVarQueryParameter['is_available'] = isAvailable;
            }

            if (isTopMaster !== undefined) {
                localVarQueryParameter['is_top_master'] = isTopMaster;
            }

            if (isVerifiedProvider !== undefined) {
                localVarQueryParameter['is_verified_provider'] = isVerifiedProvider;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (profession !== undefined) {
                localVarQueryParameter['profession'] = profession;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (servicesOfferedCategory !== undefined) {
                localVarQueryParameter['services_offered__category'] = servicesOfferedCategory;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Master Profile Details
         * @param {number} id A unique integer value identifying this Master Profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMastersDetails: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMastersDetails', 'id', id)
            const localVarPath = `/api/v1/users/masters/{id}/details/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMastersList: async (idIn?: Array<number>, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/masters/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (idIn) {
                localVarQueryParameter['id__in'] = idIn.join(COLLECTION_FORMATS.csv);
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Master Profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMastersRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMastersRetrieve', 'id', id)
            const localVarPath = `/api/v1/users/masters/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update online status for master
         * @param {MasterOnlineStatusRequestRequest} [masterOnlineStatusRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMastersUpdateOnlineStatus: async (masterOnlineStatusRequestRequest?: MasterOnlineStatusRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterOnlineStatusRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for certificates.
         * @param {CertificateRequest} certificateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesCreate: async (certificateRequest: CertificateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificateRequest' is not null or undefined
            assertParamExists('v1UsersMyCertificatesCreate', 'certificateRequest', certificateRequest)
            const localVarPath = `/api/v1/users/my/certificates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(certificateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesDestroy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyCertificatesDestroy', 'id', id)
            const localVarPath = `/api/v1/users/my/certificates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for certificates.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/certificates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {PatchedCertificateRequest} [patchedCertificateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesPartialUpdate: async (id: string, patchedCertificateRequest?: PatchedCertificateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyCertificatesPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/users/my/certificates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedCertificateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesRetrieve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyCertificatesRetrieve', 'id', id)
            const localVarPath = `/api/v1/users/my/certificates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {CertificateRequest} certificateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesUpdate: async (id: string, certificateRequest: CertificateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyCertificatesUpdate', 'id', id)
            // verify required parameter 'certificateRequest' is not null or undefined
            assertParamExists('v1UsersMyCertificatesUpdate', 'certificateRequest', certificateRequest)
            const localVarPath = `/api/v1/users/my/certificates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(certificateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmployerProfileCreateUpdateRequest} [employerProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerCreateCreate: async (employerProfileCreateUpdateRequest?: EmployerProfileCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/employer/create/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employerProfileCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PatchedEmployerProfileCreateUpdateRequest} [patchedEmployerProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerPartialUpdate: async (patchedEmployerProfileCreateUpdateRequest?: PatchedEmployerProfileCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/employer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedEmployerProfileCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/employer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmployerProfileCreateUpdateRequest} [employerProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerUpdate: async (employerProfileCreateUpdateRequest?: EmployerProfileCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/employer/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(employerProfileCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MasterProfileCreateUpdateRequest} [masterProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterCreateCreate: async (masterProfileCreateUpdateRequest?: MasterProfileCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/master/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterProfileCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PatchedMasterProfileCreateUpdateRequest} [patchedMasterProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterPartialUpdate: async (patchedMasterProfileCreateUpdateRequest?: PatchedMasterProfileCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/master/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMasterProfileCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterRetrieve: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/master/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MasterProfileCreateUpdateRequest} [masterProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterUpdate: async (masterProfileCreateUpdateRequest?: MasterProfileCreateUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/master/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterProfileCreateUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} portfolioId 
         * @param {Array<any>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioAttachmentsCreate: async (portfolioId: string, files: Array<any>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('v1UsersMyPortfolioAttachmentsCreate', 'portfolioId', portfolioId)
            // verify required parameter 'files' is not null or undefined
            assertParamExists('v1UsersMyPortfolioAttachmentsCreate', 'files', files)
            const localVarPath = `/api/v1/users/my/portfolio/{portfolio_id}/attachments/`
                .replace(`{${"portfolio_id"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} portfolioId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioAttachmentsDestroy: async (id: string, portfolioId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyPortfolioAttachmentsDestroy', 'id', id)
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('v1UsersMyPortfolioAttachmentsDestroy', 'portfolioId', portfolioId)
            const localVarPath = `/api/v1/users/my/portfolio/{portfolio_id}/attachments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"portfolio_id"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} portfolioId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioAttachmentsList: async (portfolioId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioId' is not null or undefined
            assertParamExists('v1UsersMyPortfolioAttachmentsList', 'portfolioId', portfolioId)
            const localVarPath = `/api/v1/users/my/portfolio/{portfolio_id}/attachments/`
                .replace(`{${"portfolio_id"}}`, encodeURIComponent(String(portfolioId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master portfolio items.
         * @param {PortfolioItemRequest} portfolioItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioCreate: async (portfolioItemRequest: PortfolioItemRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioItemRequest' is not null or undefined
            assertParamExists('v1UsersMyPortfolioCreate', 'portfolioItemRequest', portfolioItemRequest)
            const localVarPath = `/api/v1/users/my/portfolio/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(portfolioItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioDestroy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyPortfolioDestroy', 'id', id)
            const localVarPath = `/api/v1/users/my/portfolio/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/portfolio/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {PatchedPortfolioItemRequest} [patchedPortfolioItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioPartialUpdate: async (id: string, patchedPortfolioItemRequest?: PatchedPortfolioItemRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyPortfolioPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/users/my/portfolio/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedPortfolioItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioRetrieve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyPortfolioRetrieve', 'id', id)
            const localVarPath = `/api/v1/users/my/portfolio/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {PortfolioItemRequest} portfolioItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioUpdate: async (id: string, portfolioItemRequest: PortfolioItemRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMyPortfolioUpdate', 'id', id)
            // verify required parameter 'portfolioItemRequest' is not null or undefined
            assertParamExists('v1UsersMyPortfolioUpdate', 'portfolioItemRequest', portfolioItemRequest)
            const localVarPath = `/api/v1/users/my/portfolio/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(portfolioItemRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master skills.
         * @param {MasterSkillRequest} masterSkillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsCreate: async (masterSkillRequest: MasterSkillRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterSkillRequest' is not null or undefined
            assertParamExists('v1UsersMySkillsCreate', 'masterSkillRequest', masterSkillRequest)
            const localVarPath = `/api/v1/users/my/skills/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterSkillRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsDestroy: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMySkillsDestroy', 'id', id)
            const localVarPath = `/api/v1/users/my/skills/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master skills.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsList: async (ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/my/skills/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {PatchedMasterSkillRequest} [patchedMasterSkillRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsPartialUpdate: async (id: string, patchedMasterSkillRequest?: PatchedMasterSkillRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMySkillsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/users/my/skills/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedMasterSkillRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsRetrieve: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMySkillsRetrieve', 'id', id)
            const localVarPath = `/api/v1/users/my/skills/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {MasterSkillRequest} masterSkillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsUpdate: async (id: string, masterSkillRequest: MasterSkillRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersMySkillsUpdate', 'id', id)
            // verify required parameter 'masterSkillRequest' is not null or undefined
            assertParamExists('v1UsersMySkillsUpdate', 'masterSkillRequest', masterSkillRequest)
            const localVarPath = `/api/v1/users/my/skills/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(masterSkillRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [category] 
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersProfessionsList: async (category?: number, idIn?: Array<number>, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/professions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (idIn) {
                localVarQueryParameter['id__in'] = idIn.join(COLLECTION_FORMATS.csv);
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Profession.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersProfessionsRetrieve: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1UsersProfessionsRetrieve', 'id', id)
            const localVarPath = `/api/v1/users/professions/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all available skills.
         * @param {number} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersSkillsList: async (category?: number, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/skills/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1Api - functional programming interface
 * @export
 */
export const V1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Accept a job application
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsAccept(id: number, jobApplicationRequest: JobApplicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplicationApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsAccept(id, jobApplicationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reject a job application
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsAcceptReject(id: number, jobApplicationRequest: JobApplicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplicationApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsAcceptReject(id, jobApplicationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing job applications.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsCreate(jobApplicationRequest: JobApplicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsCreate(jobApplicationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} [amountMax] 
         * @param {number} [amountMin] 
         * @param {string} [appliedAtAfter] 
         * @param {string} [appliedAtBefore] 
         * @param {number} [jobServiceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [jobUrgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {number} [jobId] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {'accepted' | 'pending' | 'rejected' | 'withdrawn'} [status] * &#x60;pending&#x60; - Pending * &#x60;accepted&#x60; - Accepted * &#x60;rejected&#x60; - Rejected * &#x60;withdrawn&#x60; - Withdrawn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsList(amountMax?: number, amountMin?: number, appliedAtAfter?: string, appliedAtBefore?: string, jobServiceSubcategory?: number, jobUrgency?: 'high' | 'low' | 'medium' | 'urgent', jobId?: number, ordering?: string, page?: number, pageSize?: number, search?: string, status?: 'accepted' | 'pending' | 'rejected' | 'withdrawn', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJobApplicationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsList(amountMax, amountMin, appliedAtAfter, appliedAtBefore, jobServiceSubcategory, jobUrgency, jobId, ordering, page, pageSize, search, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {PatchedJobApplicationRequest} [patchedJobApplicationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsPartialUpdate(id: number, patchedJobApplicationRequest?: PatchedJobApplicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsPartialUpdate(id, patchedJobApplicationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsUpdate(id: number, jobApplicationRequest: JobApplicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsUpdate(id, jobApplicationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Withdraw a job by master
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ApplicationsWithdraw(id: number, jobApplicationRequest: JobApplicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApplicationApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ApplicationsWithdraw(id, jobApplicationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} assignmentId 
         * @param {Array<any>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsAttachmentsCreate(assignmentId: string, files: Array<any>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsAttachmentsCreate(assignmentId, files, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} assignmentId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsAttachmentsDestroy(assignmentId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsAttachmentsDestroy(assignmentId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} assignmentId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsAttachmentsList(assignmentId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAttachmentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsAttachmentsList(assignmentId, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {JobAssignmentRequest} [jobAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsCreate(jobAssignmentRequest?: JobAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsCreate(jobAssignmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsDestroy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJobAssignmentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {PatchedJobAssignmentRequest} [patchedJobAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsPartialUpdate(id: string, patchedJobAssignmentRequest?: PatchedJobAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsPartialUpdate(id, patchedJobAssignmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Rate a completed job assignment
         * @param {string} id 
         * @param {RatingRequest} [ratingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsRateCreate(id: string, ratingRequest?: RatingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsRateCreate(id, ratingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {JobAssignmentRequest} [jobAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsUpdate(id: string, jobAssignmentRequest?: JobAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsUpdate(id, jobAssignmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update progress notes for an assignment
         * @param {string} id 
         * @param {PatchedProgressUpdateRequest} [patchedProgressUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AssignmentsUpdateProgressPartialUpdate(id: string, patchedProgressUpdateRequest?: PatchedProgressUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignmentApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AssignmentsUpdateProgressPartialUpdate(id, patchedProgressUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Authenticate or register a user using Firebase ID token.
         * @param {FireBaseAuthRequest} fireBaseAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthFirebaseCreate(fireBaseAuthRequest: FireBaseAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirebaseAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthFirebaseCreate(fireBaseAuthRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * User logout view - enhanced version of api_users LogOutView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1AuthLogoutCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1AuthLogoutCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing chat rooms
         * @param {ChatRoomCreateRequest} chatRoomCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsCreate(chatRoomCreateRequest: ChatRoomCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoomCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsCreate(chatRoomCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsDestroy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get chats for master
         * @param {number} masterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsForMaster(masterId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChatRoomForSearchResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsForMaster(masterId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Leave a chat room
         * @param {string} id 
         * @param {ChatRoomRequest} chatRoomRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsLeave(id: string, chatRoomRequest: ChatRoomRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsLeave(id, chatRoomRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedChatRoomList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {MessageCreateRequest} messageCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsMessagesCreate(chatRoomId: string, messageCreateRequest: MessageCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsMessagesCreate(chatRoomId, messageCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsMessagesDestroy(chatRoomId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsMessagesDestroy(chatRoomId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsMessagesList(chatRoomId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMessageList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsMessagesList(chatRoomId, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} id 
         * @param {PatchedMessageRequest} [patchedMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsMessagesPartialUpdate(chatRoomId: string, id: string, patchedMessageRequest?: PatchedMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsMessagesPartialUpdate(chatRoomId, id, patchedMessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsMessagesRetrieve(chatRoomId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsMessagesRetrieve(chatRoomId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} id 
         * @param {MessageUpdateRequest} messageUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsMessagesUpdate(chatRoomId: string, id: string, messageUpdateRequest: MessageUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsMessagesUpdate(chatRoomId, id, messageUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {PatchedChatRoomRequest} [patchedChatRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsPartialUpdate(id: string, patchedChatRoomRequest?: PatchedChatRoomRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsPartialUpdate(id, patchedChatRoomRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {ChatRoomRequest} chatRoomRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ChatsRoomsUpdate(id: string, chatRoomRequest: ChatRoomRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatRoom>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ChatsRoomsUpdate(id, chatRoomRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create contact with throttling.
         * @param {SimpleContactRequest} simpleContactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsCreate(simpleContactRequest: SimpleContactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsCreate(simpleContactRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {number} id A unique integer value identifying this simple contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get available enquiry types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsEnquiryTypesRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsEnquiryTypesRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSimpleContactList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {number} id A unique integer value identifying this simple contact.
         * @param {PatchedSimpleContactRequest} [patchedSimpleContactRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsPartialUpdate(id: number, patchedSimpleContactRequest?: PatchedSimpleContactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsPartialUpdate(id, patchedSimpleContactRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {number} id A unique integer value identifying this simple contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {number} id A unique integer value identifying this simple contact.
         * @param {SimpleContactRequest} simpleContactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ContactsUpdate(id: number, simpleContactRequest: SimpleContactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleContact>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ContactsUpdate(id, simpleContactRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Languages - Read-only (managed via admin/fixtures).
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {boolean} [isActive] 
         * @param {boolean} [isDefault] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreLanguagesList(idIn?: Array<number>, isActive?: boolean, isDefault?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedLanguageList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreLanguagesList(idIn, isActive, isDefault, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Languages - Read-only (managed via admin/fixtures).
         * @param {number} id A unique integer value identifying this Language.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreLanguagesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Language>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreLanguagesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {ServiceAreaCreateUpdateRequest} serviceAreaCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceAreasCreate(serviceAreaCreateUpdateRequest: ServiceAreaCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAreaCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceAreasCreate(serviceAreaCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceAreasDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceAreasDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceAreasList(idIn?: Array<number>, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedServiceAreaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceAreasList(idIn, isActive, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {PatchedServiceAreaCreateUpdateRequest} [patchedServiceAreaCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceAreasPartialUpdate(id: number, patchedServiceAreaCreateUpdateRequest?: PatchedServiceAreaCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAreaCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceAreasPartialUpdate(id, patchedServiceAreaCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceAreasRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceArea>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceAreasRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {ServiceAreaCreateUpdateRequest} serviceAreaCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceAreasUpdate(id: number, serviceAreaCreateUpdateRequest: ServiceAreaCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAreaCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceAreasUpdate(id, serviceAreaCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {ServiceCategoryCreateUpdateRequest} serviceCategoryCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceCategoriesCreate(serviceCategoryCreateUpdateRequest: ServiceCategoryCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceCategoryCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceCategoriesCreate(serviceCategoryCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceCategoriesDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceCategoriesDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {boolean} [featured] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceCategoriesList(featured?: boolean, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedServiceCategoryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceCategoriesList(featured, isActive, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {PatchedServiceCategoryCreateUpdateRequest} [patchedServiceCategoryCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceCategoriesPartialUpdate(id: number, patchedServiceCategoryCreateUpdateRequest?: PatchedServiceCategoryCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceCategoryCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceCategoriesPartialUpdate(id, patchedServiceCategoryCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceCategoriesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceCategoriesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {ServiceCategoryCreateUpdateRequest} serviceCategoryCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceCategoriesUpdate(id: number, serviceCategoryCreateUpdateRequest: ServiceCategoryCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceCategoryCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceCategoriesUpdate(id, serviceCategoryCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {ServiceSubcategoryCreateUpdateRequest} serviceSubcategoryCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceSubcategoriesCreate(serviceSubcategoryCreateUpdateRequest: ServiceSubcategoryCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceSubcategoryCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceSubcategoriesCreate(serviceSubcategoryCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceSubcategoriesDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceSubcategoriesDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} [category] 
         * @param {boolean} [featured] 
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceSubcategoriesList(category?: number, featured?: boolean, idIn?: Array<number>, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedServiceSubcategoryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceSubcategoriesList(category, featured, idIn, isActive, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {PatchedServiceSubcategoryCreateUpdateRequest} [patchedServiceSubcategoryCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceSubcategoriesPartialUpdate(id: number, patchedServiceSubcategoryCreateUpdateRequest?: PatchedServiceSubcategoryCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceSubcategoryCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceSubcategoriesPartialUpdate(id, patchedServiceSubcategoryCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceSubcategoriesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceSubcategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceSubcategoriesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {ServiceSubcategoryCreateUpdateRequest} serviceSubcategoryCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreServiceSubcategoriesUpdate(id: number, serviceSubcategoryCreateUpdateRequest: ServiceSubcategoryCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceSubcategoryCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreServiceSubcategoriesUpdate(id, serviceSubcategoryCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {SupportFAQCreateUpdateRequest} supportFAQCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSupportFaqCreate(supportFAQCreateUpdateRequest: SupportFAQCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportFAQCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSupportFaqCreate(supportFAQCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSupportFaqDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSupportFaqDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist'} [category] * &#x60;general&#x60; - Основная информация * &#x60;specialist&#x60; - Specialist * &#x60;reviews&#x60; - Reviews * &#x60;account&#x60; - Аккаунт * &#x60;search&#x60; - Найти * &#x60;safety&#x60; - Safety
         * @param {boolean} [isActive] 
         * @param {number} [language] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSupportFaqList(category?: 'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist', isActive?: boolean, language?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSupportFAQList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSupportFaqList(category, isActive, language, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {PatchedSupportFAQCreateUpdateRequest} [patchedSupportFAQCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSupportFaqPartialUpdate(id: number, patchedSupportFAQCreateUpdateRequest?: PatchedSupportFAQCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportFAQCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSupportFaqPartialUpdate(id, patchedSupportFAQCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSupportFaqRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportFAQ>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSupportFaqRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {SupportFAQCreateUpdateRequest} supportFAQCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSupportFaqUpdate(id: number, supportFAQCreateUpdateRequest: SupportFAQCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportFAQCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSupportFaqUpdate(id, supportFAQCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {SystemSettingsCreateUpdateRequest} systemSettingsCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSystemSettingsCreate(systemSettingsCreateUpdateRequest: SystemSettingsCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSystemSettingsCreate(systemSettingsCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSystemSettingsDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSystemSettingsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {string} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSystemSettingsList(category?: string, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSystemSettingsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSystemSettingsList(category, isActive, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {PatchedSystemSettingsCreateUpdateRequest} [patchedSystemSettingsCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSystemSettingsPartialUpdate(id: number, patchedSystemSettingsCreateUpdateRequest?: PatchedSystemSettingsCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSystemSettingsPartialUpdate(id, patchedSystemSettingsCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSystemSettingsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSystemSettingsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {SystemSettingsCreateUpdateRequest} systemSettingsCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1CoreSystemSettingsUpdate(id: number, systemSettingsCreateUpdateRequest: SystemSettingsCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSettingsCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1CoreSystemSettingsUpdate(id, systemSettingsCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns featured categories, recommended masters, and statistics for the home page. Prioritizes top masters first, then fills with additional masters if needed.
         * @summary Get home page data with master recommendations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1HomeClientRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomePageData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1HomeClientRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get job recommendations for master based on skills, location, and preferences.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1HomeMasterNewJobsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJobSearchList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1HomeMasterNewJobsList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Complete an assignment with optional rating and review
         * @param {string} id 
         * @param {JobAssignmentCompletionRequest} [jobAssignmentCompletionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobAssignmentsComplete(id: string, jobAssignmentCompletionRequest?: JobAssignmentCompletionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignmentApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobAssignmentsComplete(id, jobAssignmentCompletionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Start an assignment
         * @param {string} id 
         * @param {JobAssignmentRequest} [jobAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobAssignmentsStart(id: string, jobAssignmentRequest?: JobAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobAssignmentApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobAssignmentsStart(id, jobAssignmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Apply to a job.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobApplyRequest} jobApplyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsApply(id: number, jobApplyRequest: JobApplyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsApply(id, jobApplyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} jobId 
         * @param {Array<any>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsAttachmentsCreate(jobId: string, files: Array<any>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsAttachmentsCreate(jobId, files, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsAttachmentsDestroy(id: string, jobId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsAttachmentsDestroy(id, jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} jobId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsAttachmentsList(jobId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAttachmentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsAttachmentsList(jobId, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Toggle bookmark status for a job
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsBookmark(id: number, jobRequest: JobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsBookmark(id, jobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancel a job. Only allowed if job is in PUBLISHED or ASSIGNED state.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsCancel(id: number, jobRequest: JobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsCancel(id, jobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing jobs.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsCreate(jobRequest: JobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsCreate(jobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Toggle favorite status for a job
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsFavorite(id: number, jobRequest: JobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsFavorite(id, jobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing jobs.
         * @param {string} [city] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceCategory] 
         * @param {string} [serviceDateFrom] 
         * @param {string} [serviceDateTo] 
         * @param {number} [serviceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsList(city?: string, maxPrice?: number, minPrice?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceCategory?: number, serviceDateFrom?: string, serviceDateTo?: string, serviceSubcategory?: number, urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJobList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsList(city, maxPrice, minPrice, ordering, page, pageSize, search, serviceCategory, serviceDateFrom, serviceDateTo, serviceSubcategory, urgency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get completed job history for master
         * @param {string} [city] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceCategory] 
         * @param {string} [serviceDateFrom] 
         * @param {string} [serviceDateTo] 
         * @param {number} [serviceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsMasterHistory(city?: string, maxPrice?: number, minPrice?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceCategory?: number, serviceDateFrom?: string, serviceDateTo?: string, serviceSubcategory?: number, urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJobList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsMasterHistory(city, maxPrice, minPrice, ordering, page, pageSize, search, serviceCategory, serviceDateFrom, serviceDateTo, serviceSubcategory, urgency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get jobs currently in progress for master
         * @param {string} [city] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceCategory] 
         * @param {string} [serviceDateFrom] 
         * @param {string} [serviceDateTo] 
         * @param {number} [serviceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsMasterInProgress(city?: string, maxPrice?: number, minPrice?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceCategory?: number, serviceDateFrom?: string, serviceDateTo?: string, serviceSubcategory?: number, urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJobList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsMasterInProgress(city, maxPrice, minPrice, ordering, page, pageSize, search, serviceCategory, serviceDateFrom, serviceDateTo, serviceSubcategory, urgency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {PatchedJobRequest} [patchedJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsPartialUpdate(id: number, patchedJobRequest?: PatchedJobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsPartialUpdate(id, patchedJobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publish a draft job. Only allowed if job is in DRAFT state.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsPublish(id: number, jobRequest: JobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobApiAction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsPublish(id, jobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsUpdate(id: number, jobRequest: JobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1JobsUpdate(id, jobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing cities.
         * @param {CityRequest} cityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCitiesCreate(cityRequest: CityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<City>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCitiesCreate(cityRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing cities.
         * @param {number} id A unique integer value identifying this City.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCitiesDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCitiesDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing cities.
         * @param {number} [country] 
         * @param {boolean} [isDeleted] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCitiesList(country?: number, isDeleted?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCityListList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCitiesList(country, isDeleted, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing cities.
         * @param {number} id A unique integer value identifying this City.
         * @param {PatchedCityRequest} [patchedCityRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCitiesPartialUpdate(id: number, patchedCityRequest?: PatchedCityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<City>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCitiesPartialUpdate(id, patchedCityRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing cities.
         * @param {number} id A unique integer value identifying this City.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCitiesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CityList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCitiesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing cities.
         * @param {number} id A unique integer value identifying this City.
         * @param {CityRequest} cityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCitiesUpdate(id: number, cityRequest: CityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<City>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCitiesUpdate(id, cityRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing countries.
         * @param {CountryRequest} countryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCountriesCreate(countryRequest: CountryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCountriesCreate(countryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing countries.
         * @param {number} id A unique integer value identifying this Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCountriesDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCountriesDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing countries.
         * @param {boolean} [isDeleted] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCountriesList(isDeleted?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCountryList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCountriesList(isDeleted, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing countries.
         * @param {number} id A unique integer value identifying this Country.
         * @param {PatchedCountryRequest} [patchedCountryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCountriesPartialUpdate(id: number, patchedCountryRequest?: PatchedCountryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCountriesPartialUpdate(id, patchedCountryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing countries.
         * @param {number} id A unique integer value identifying this Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCountriesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCountriesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing countries.
         * @param {number} id A unique integer value identifying this Country.
         * @param {CountryRequest} countryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1LocationsCountriesUpdate(id: number, countryRequest: CountryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1LocationsCountriesUpdate(id, countryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get notification counts for current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsCount(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsCount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {NotificationCreateRequest} notificationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsCreate(notificationCreateRequest: NotificationCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsCreate(notificationCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsDestroy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedNotificationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mark all notifications as read for current user
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsMarkAllRead(notificationRequest: NotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsMarkAllRead(notificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mark specific notification as read
         * @param {string} id 
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsMarkRead(id: string, notificationRequest: NotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsMarkRead(id, notificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mark specific notification as unread
         * @param {string} id 
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsMarkUnread(id: string, notificationRequest: NotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsMarkUnread(id, notificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {PatchedNotificationUpdateRequest} [patchedNotificationUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsPartialUpdate(id: string, patchedNotificationUpdateRequest?: PatchedNotificationUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsPartialUpdate(id, patchedNotificationUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get recent notifications (last 7 days)
         * @param {number} [days] Number of days to look back
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsRecent(days?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedNotificationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsRecent(days, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get unread notifications for current user
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsUnread(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedNotificationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsUnread(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {NotificationUpdateRequest} [notificationUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1NotificationsUpdate(id: string, notificationUpdateRequest?: NotificationUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1NotificationsUpdate(id, notificationUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfileControlCreate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfileControlCreate(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PatchedUserNotificationSettingsRequest} [patchedUserNotificationSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfileNotificationSettingsPartialUpdate(patchedUserNotificationSettingsRequest?: PatchedUserNotificationSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserNotificationSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfileNotificationSettingsPartialUpdate(patchedUserNotificationSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfileNotificationSettingsRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserNotificationSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfileNotificationSettingsRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserNotificationSettingsRequest} [userNotificationSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfileNotificationSettingsUpdate(userNotificationSettingsRequest?: UserNotificationSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserNotificationSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfileNotificationSettingsUpdate(userNotificationSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve or update authenticated user\'s profile, including profile image upload.
         * @param {PatchedUserUpdateRequest} [patchedUserUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfilePartialUpdate(patchedUserUpdateRequest?: PatchedUserUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfilePartialUpdate(patchedUserUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve or update authenticated user\'s profile, including profile image upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfileRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfileRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve or update authenticated user\'s profile, including profile image upload.
         * @param {UserUpdateRequest} [userUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ProfileUpdate(userUpdateRequest?: UserUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ProfileUpdate(userUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Archive a published resume.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResumeRequest} masterResumeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesArchive(id: number, masterResumeRequest: MasterResumeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesArchive(id, masterResumeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {MasterResumeRequest} masterResumeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesCreate(masterResumeRequest: MasterResumeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterResume>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesCreate(masterResumeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesDestroy(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMasterResumeList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {PatchedMasterResumeRequest} [patchedMasterResumeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesPartialUpdate(id: number, patchedMasterResumeRequest?: PatchedMasterResumeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterResume>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesPartialUpdate(id, patchedMasterResumeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Publish a draft resume. Only allowed if in DRAFT state.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResumeRequest} masterResumeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesPublish(id: number, masterResumeRequest: MasterResumeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesPublish(id, masterResumeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterResume>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResumeRequest} masterResumeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ResumesUpdate(id: number, masterResumeRequest: MasterResumeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterResume>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ResumesUpdate(id, masterResumeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get review analytics for a specific master
         * @param {number} masterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ReviewsAnalyticsRetrieve(masterId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReviewAnalytics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ReviewsAnalyticsRetrieve(masterId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get review data from job assignments
         * @param {boolean} [isVerified] 
         * @param {number} [job] 
         * @param {number} [master] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [rating] 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ReviewsAssignmentsList(isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJobAssignmentReviewList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ReviewsAssignmentsList(isVerified, job, master, ordering, page, pageSize, rating, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all reviews for a specific job
         * @param {number} jobId 
         * @param {boolean} [isVerified] 
         * @param {number} [job] 
         * @param {number} [master] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [rating] 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ReviewsJobList(jobId: number, isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedReviewList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ReviewsJobList(jobId, isVerified, job, master, ordering, page, pageSize, rating, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Comprehensive review management with additional actions.
         * @param {boolean} [isVerified] 
         * @param {number} [job] 
         * @param {number} [master] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [rating] 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ReviewsList(isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedReviewList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ReviewsList(isVerified, job, master, ordering, page, pageSize, rating, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all reviews for a specific master
         * @param {number} masterId 
         * @param {boolean} [isVerified] 
         * @param {number} [job] 
         * @param {number} [master] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [rating] 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ReviewsMasterList(masterId: number, isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedReviewList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ReviewsMasterList(masterId, isVerified, job, master, ordering, page, pageSize, rating, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Comprehensive review management with additional actions.
         * @param {number} id A unique integer value identifying this Review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ReviewsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Review>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1ReviewsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search jobs with optimized search serializer.
         * @param {number} [budgetMaxLte] 
         * @param {number} [budgetMinGte] 
         * @param {number} [city] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceSubcategoryCategory] 
         * @param {'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published'} [status] * &#x60;draft&#x60; - Draft * &#x60;published&#x60; - Published * &#x60;assigned&#x60; - Assigned * &#x60;in_progress&#x60; - In Progress * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SearchJobsList(budgetMaxLte?: number, budgetMinGte?: number, city?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceSubcategoryCategory?: number, status?: 'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published', urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedJobSearchList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SearchJobsList(budgetMaxLte, budgetMinGte, city, ordering, page, pageSize, search, serviceSubcategoryCategory, status, urgency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search masters by keywords, profession, location, and other criteria. Returns paginated list of master profiles with portfolio items and skills.
         * @summary Search for masters
         * @param {boolean} [isAvailable] 
         * @param {boolean} [isTopMaster] 
         * @param {boolean} [isVerifiedProvider] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [profession] 
         * @param {string} [search] A search term.
         * @param {number} [servicesOfferedCategory] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SearchMastersList(isAvailable?: boolean, isTopMaster?: boolean, isVerifiedProvider?: boolean, ordering?: string, page?: number, pageSize?: number, profession?: number, search?: string, servicesOfferedCategory?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMasterSearchList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SearchMastersList(isAvailable, isTopMaster, isVerifiedProvider, ordering, page, pageSize, profession, search, servicesOfferedCategory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Master Profile Details
         * @param {number} id A unique integer value identifying this Master Profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMastersDetails(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicMasterProfileDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMastersDetails(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMastersList(idIn?: Array<number>, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPublicMasterProfileList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMastersList(idIn, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Master Profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMastersRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicMasterProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMastersRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update online status for master
         * @param {MasterOnlineStatusRequestRequest} [masterOnlineStatusRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMastersUpdateOnlineStatus(masterOnlineStatusRequestRequest?: MasterOnlineStatusRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterOnlineStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMastersUpdateOnlineStatus(masterOnlineStatusRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for certificates.
         * @param {CertificateRequest} certificateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyCertificatesCreate(certificateRequest: CertificateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Certificate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyCertificatesCreate(certificateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyCertificatesDestroy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyCertificatesDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for certificates.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyCertificatesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCertificateList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyCertificatesList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {PatchedCertificateRequest} [patchedCertificateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyCertificatesPartialUpdate(id: string, patchedCertificateRequest?: PatchedCertificateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Certificate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyCertificatesPartialUpdate(id, patchedCertificateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyCertificatesRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Certificate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyCertificatesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {CertificateRequest} certificateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyCertificatesUpdate(id: string, certificateRequest: CertificateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Certificate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyCertificatesUpdate(id, certificateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EmployerProfileCreateUpdateRequest} [employerProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyEmployerCreateCreate(employerProfileCreateUpdateRequest?: EmployerProfileCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyEmployerCreateCreate(employerProfileCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PatchedEmployerProfileCreateUpdateRequest} [patchedEmployerProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyEmployerPartialUpdate(patchedEmployerProfileCreateUpdateRequest?: PatchedEmployerProfileCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyEmployerPartialUpdate(patchedEmployerProfileCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyEmployerRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyEmployerRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {EmployerProfileCreateUpdateRequest} [employerProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyEmployerUpdate(employerProfileCreateUpdateRequest?: EmployerProfileCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployerProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyEmployerUpdate(employerProfileCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MasterProfileCreateUpdateRequest} [masterProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyMasterCreateCreate(masterProfileCreateUpdateRequest?: MasterProfileCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyMasterCreateCreate(masterProfileCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PatchedMasterProfileCreateUpdateRequest} [patchedMasterProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyMasterPartialUpdate(patchedMasterProfileCreateUpdateRequest?: PatchedMasterProfileCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyMasterPartialUpdate(patchedMasterProfileCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyMasterRetrieve(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyMasterRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MasterProfileCreateUpdateRequest} [masterProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyMasterUpdate(masterProfileCreateUpdateRequest?: MasterProfileCreateUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterProfileCreateUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyMasterUpdate(masterProfileCreateUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} portfolioId 
         * @param {Array<any>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioAttachmentsCreate(portfolioId: string, files: Array<any>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioAttachmentsCreate(portfolioId, files, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} portfolioId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioAttachmentsDestroy(id: string, portfolioId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioAttachmentsDestroy(id, portfolioId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} portfolioId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioAttachmentsList(portfolioId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAttachmentList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioAttachmentsList(portfolioId, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master portfolio items.
         * @param {PortfolioItemRequest} portfolioItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioCreate(portfolioItemRequest: PortfolioItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioCreate(portfolioItemRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioDestroy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPortfolioItemList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {PatchedPortfolioItemRequest} [patchedPortfolioItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioPartialUpdate(id: string, patchedPortfolioItemRequest?: PatchedPortfolioItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioPartialUpdate(id, patchedPortfolioItemRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {PortfolioItemRequest} portfolioItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMyPortfolioUpdate(id: string, portfolioItemRequest: PortfolioItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMyPortfolioUpdate(id, portfolioItemRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master skills.
         * @param {MasterSkillRequest} masterSkillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMySkillsCreate(masterSkillRequest: MasterSkillRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterSkill>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMySkillsCreate(masterSkillRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMySkillsDestroy(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMySkillsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master skills.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMySkillsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedMasterSkillList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMySkillsList(ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {PatchedMasterSkillRequest} [patchedMasterSkillRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMySkillsPartialUpdate(id: string, patchedMasterSkillRequest?: PatchedMasterSkillRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterSkill>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMySkillsPartialUpdate(id, patchedMasterSkillRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMySkillsRetrieve(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterSkill>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMySkillsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {MasterSkillRequest} masterSkillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersMySkillsUpdate(id: string, masterSkillRequest: MasterSkillRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterSkill>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersMySkillsUpdate(id, masterSkillRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [category] 
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersProfessionsList(category?: number, idIn?: Array<number>, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedProfessionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersProfessionsList(category, idIn, isActive, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Profession.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersProfessionsRetrieve(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersProfessionsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all available skills.
         * @param {number} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1UsersSkillsList(category?: number, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSkillDetailList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1UsersSkillsList(category, isActive, ordering, page, pageSize, search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1Api - factory interface
 * @export
 */
export const V1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ApiFp(configuration)
    return {
        /**
         * Accept a job application
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsAccept(id: number, jobApplicationRequest: JobApplicationRequest, options?: any): AxiosPromise<JobApplicationApiAction> {
            return localVarFp.v1ApplicationsAccept(id, jobApplicationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Reject a job application
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsAcceptReject(id: number, jobApplicationRequest: JobApplicationRequest, options?: any): AxiosPromise<JobApplicationApiAction> {
            return localVarFp.v1ApplicationsAcceptReject(id, jobApplicationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing job applications.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsCreate(jobApplicationRequest: JobApplicationRequest, options?: any): AxiosPromise<JobApplication> {
            return localVarFp.v1ApplicationsCreate(jobApplicationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1ApplicationsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} [amountMax] 
         * @param {number} [amountMin] 
         * @param {string} [appliedAtAfter] 
         * @param {string} [appliedAtBefore] 
         * @param {number} [jobServiceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [jobUrgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {number} [jobId] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {'accepted' | 'pending' | 'rejected' | 'withdrawn'} [status] * &#x60;pending&#x60; - Pending * &#x60;accepted&#x60; - Accepted * &#x60;rejected&#x60; - Rejected * &#x60;withdrawn&#x60; - Withdrawn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsList(amountMax?: number, amountMin?: number, appliedAtAfter?: string, appliedAtBefore?: string, jobServiceSubcategory?: number, jobUrgency?: 'high' | 'low' | 'medium' | 'urgent', jobId?: number, ordering?: string, page?: number, pageSize?: number, search?: string, status?: 'accepted' | 'pending' | 'rejected' | 'withdrawn', options?: any): AxiosPromise<PaginatedJobApplicationList> {
            return localVarFp.v1ApplicationsList(amountMax, amountMin, appliedAtAfter, appliedAtBefore, jobServiceSubcategory, jobUrgency, jobId, ordering, page, pageSize, search, status, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {PatchedJobApplicationRequest} [patchedJobApplicationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsPartialUpdate(id: number, patchedJobApplicationRequest?: PatchedJobApplicationRequest, options?: any): AxiosPromise<JobApplication> {
            return localVarFp.v1ApplicationsPartialUpdate(id, patchedJobApplicationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsRetrieve(id: number, options?: any): AxiosPromise<JobApplication> {
            return localVarFp.v1ApplicationsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing job applications.
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsUpdate(id: number, jobApplicationRequest: JobApplicationRequest, options?: any): AxiosPromise<JobApplication> {
            return localVarFp.v1ApplicationsUpdate(id, jobApplicationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Withdraw a job by master
         * @param {number} id A unique integer value identifying this Job Application.
         * @param {JobApplicationRequest} jobApplicationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ApplicationsWithdraw(id: number, jobApplicationRequest: JobApplicationRequest, options?: any): AxiosPromise<JobApplicationApiAction> {
            return localVarFp.v1ApplicationsWithdraw(id, jobApplicationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assignmentId 
         * @param {Array<any>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsAttachmentsCreate(assignmentId: string, files: Array<any>, options?: any): AxiosPromise<void> {
            return localVarFp.v1AssignmentsAttachmentsCreate(assignmentId, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assignmentId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsAttachmentsDestroy(assignmentId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1AssignmentsAttachmentsDestroy(assignmentId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} assignmentId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsAttachmentsList(assignmentId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedAttachmentList> {
            return localVarFp.v1AssignmentsAttachmentsList(assignmentId, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JobAssignmentRequest} [jobAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsCreate(jobAssignmentRequest?: JobAssignmentRequest, options?: any): AxiosPromise<JobAssignment> {
            return localVarFp.v1AssignmentsCreate(jobAssignmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1AssignmentsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedJobAssignmentList> {
            return localVarFp.v1AssignmentsList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {PatchedJobAssignmentRequest} [patchedJobAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsPartialUpdate(id: string, patchedJobAssignmentRequest?: PatchedJobAssignmentRequest, options?: any): AxiosPromise<JobAssignment> {
            return localVarFp.v1AssignmentsPartialUpdate(id, patchedJobAssignmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Rate a completed job assignment
         * @param {string} id 
         * @param {RatingRequest} [ratingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsRateCreate(id: string, ratingRequest?: RatingRequest, options?: any): AxiosPromise<CResponse> {
            return localVarFp.v1AssignmentsRateCreate(id, ratingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsRetrieve(id: string, options?: any): AxiosPromise<JobAssignment> {
            return localVarFp.v1AssignmentsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {JobAssignmentRequest} [jobAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsUpdate(id: string, jobAssignmentRequest?: JobAssignmentRequest, options?: any): AxiosPromise<JobAssignment> {
            return localVarFp.v1AssignmentsUpdate(id, jobAssignmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update progress notes for an assignment
         * @param {string} id 
         * @param {PatchedProgressUpdateRequest} [patchedProgressUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AssignmentsUpdateProgressPartialUpdate(id: string, patchedProgressUpdateRequest?: PatchedProgressUpdateRequest, options?: any): AxiosPromise<JobAssignmentApiAction> {
            return localVarFp.v1AssignmentsUpdateProgressPartialUpdate(id, patchedProgressUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Authenticate or register a user using Firebase ID token.
         * @param {FireBaseAuthRequest} fireBaseAuthRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthFirebaseCreate(fireBaseAuthRequest: FireBaseAuthRequest, options?: any): AxiosPromise<FirebaseAuthResponse> {
            return localVarFp.v1AuthFirebaseCreate(fireBaseAuthRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * User logout view - enhanced version of api_users LogOutView
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1AuthLogoutCreate(options?: any): AxiosPromise<LogoutResponse> {
            return localVarFp.v1AuthLogoutCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing chat rooms
         * @param {ChatRoomCreateRequest} chatRoomCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsCreate(chatRoomCreateRequest: ChatRoomCreateRequest, options?: any): AxiosPromise<ChatRoomCreate> {
            return localVarFp.v1ChatsRoomsCreate(chatRoomCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1ChatsRoomsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get chats for master
         * @param {number} masterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsForMaster(masterId: number, options?: any): AxiosPromise<Array<ChatRoomForSearchResponse>> {
            return localVarFp.v1ChatsRoomsForMaster(masterId, options).then((request) => request(axios, basePath));
        },
        /**
         * Leave a chat room
         * @param {string} id 
         * @param {ChatRoomRequest} chatRoomRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsLeave(id: string, chatRoomRequest: ChatRoomRequest, options?: any): AxiosPromise<ChatRoom> {
            return localVarFp.v1ChatsRoomsLeave(id, chatRoomRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedChatRoomList> {
            return localVarFp.v1ChatsRoomsList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {MessageCreateRequest} messageCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessagesCreate(chatRoomId: string, messageCreateRequest: MessageCreateRequest, options?: any): AxiosPromise<MessageCreate> {
            return localVarFp.v1ChatsRoomsMessagesCreate(chatRoomId, messageCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessagesDestroy(chatRoomId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1ChatsRoomsMessagesDestroy(chatRoomId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessagesList(chatRoomId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedMessageList> {
            return localVarFp.v1ChatsRoomsMessagesList(chatRoomId, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} id 
         * @param {PatchedMessageRequest} [patchedMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessagesPartialUpdate(chatRoomId: string, id: string, patchedMessageRequest?: PatchedMessageRequest, options?: any): AxiosPromise<Message> {
            return localVarFp.v1ChatsRoomsMessagesPartialUpdate(chatRoomId, id, patchedMessageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessagesRetrieve(chatRoomId: string, id: string, options?: any): AxiosPromise<Message> {
            return localVarFp.v1ChatsRoomsMessagesRetrieve(chatRoomId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} chatRoomId 
         * @param {string} id 
         * @param {MessageUpdateRequest} messageUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsMessagesUpdate(chatRoomId: string, id: string, messageUpdateRequest: MessageUpdateRequest, options?: any): AxiosPromise<MessageUpdate> {
            return localVarFp.v1ChatsRoomsMessagesUpdate(chatRoomId, id, messageUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {PatchedChatRoomRequest} [patchedChatRoomRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsPartialUpdate(id: string, patchedChatRoomRequest?: PatchedChatRoomRequest, options?: any): AxiosPromise<ChatRoom> {
            return localVarFp.v1ChatsRoomsPartialUpdate(id, patchedChatRoomRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsRetrieve(id: string, options?: any): AxiosPromise<ChatRoom> {
            return localVarFp.v1ChatsRoomsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing chat rooms
         * @param {string} id 
         * @param {ChatRoomRequest} chatRoomRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ChatsRoomsUpdate(id: string, chatRoomRequest: ChatRoomRequest, options?: any): AxiosPromise<ChatRoom> {
            return localVarFp.v1ChatsRoomsUpdate(id, chatRoomRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create contact with throttling.
         * @param {SimpleContactRequest} simpleContactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsCreate(simpleContactRequest: SimpleContactRequest, options?: any): AxiosPromise<SimpleContact> {
            return localVarFp.v1ContactsCreate(simpleContactRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {number} id A unique integer value identifying this simple contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1ContactsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get available enquiry types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsEnquiryTypesRetrieve(options?: any): AxiosPromise<SimpleContact> {
            return localVarFp.v1ContactsEnquiryTypesRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedSimpleContactList> {
            return localVarFp.v1ContactsList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {number} id A unique integer value identifying this simple contact.
         * @param {PatchedSimpleContactRequest} [patchedSimpleContactRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsPartialUpdate(id: number, patchedSimpleContactRequest?: PatchedSimpleContactRequest, options?: any): AxiosPromise<SimpleContact> {
            return localVarFp.v1ContactsPartialUpdate(id, patchedSimpleContactRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {number} id A unique integer value identifying this simple contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsRetrieve(id: number, options?: any): AxiosPromise<SimpleContact> {
            return localVarFp.v1ContactsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Contact enquiries API with minimal code.
         * @param {number} id A unique integer value identifying this simple contact.
         * @param {SimpleContactRequest} simpleContactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ContactsUpdate(id: number, simpleContactRequest: SimpleContactRequest, options?: any): AxiosPromise<SimpleContact> {
            return localVarFp.v1ContactsUpdate(id, simpleContactRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Languages - Read-only (managed via admin/fixtures).
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {boolean} [isActive] 
         * @param {boolean} [isDefault] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreLanguagesList(idIn?: Array<number>, isActive?: boolean, isDefault?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedLanguageList> {
            return localVarFp.v1CoreLanguagesList(idIn, isActive, isDefault, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Languages - Read-only (managed via admin/fixtures).
         * @param {number} id A unique integer value identifying this Language.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreLanguagesRetrieve(id: number, options?: any): AxiosPromise<Language> {
            return localVarFp.v1CoreLanguagesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {ServiceAreaCreateUpdateRequest} serviceAreaCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasCreate(serviceAreaCreateUpdateRequest: ServiceAreaCreateUpdateRequest, options?: any): AxiosPromise<ServiceAreaCreateUpdate> {
            return localVarFp.v1CoreServiceAreasCreate(serviceAreaCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1CoreServiceAreasDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasList(idIn?: Array<number>, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedServiceAreaList> {
            return localVarFp.v1CoreServiceAreasList(idIn, isActive, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {PatchedServiceAreaCreateUpdateRequest} [patchedServiceAreaCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasPartialUpdate(id: number, patchedServiceAreaCreateUpdateRequest?: PatchedServiceAreaCreateUpdateRequest, options?: any): AxiosPromise<ServiceAreaCreateUpdate> {
            return localVarFp.v1CoreServiceAreasPartialUpdate(id, patchedServiceAreaCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasRetrieve(id: number, options?: any): AxiosPromise<ServiceArea> {
            return localVarFp.v1CoreServiceAreasRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Areas - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Area.
         * @param {ServiceAreaCreateUpdateRequest} serviceAreaCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceAreasUpdate(id: number, serviceAreaCreateUpdateRequest: ServiceAreaCreateUpdateRequest, options?: any): AxiosPromise<ServiceAreaCreateUpdate> {
            return localVarFp.v1CoreServiceAreasUpdate(id, serviceAreaCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {ServiceCategoryCreateUpdateRequest} serviceCategoryCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesCreate(serviceCategoryCreateUpdateRequest: ServiceCategoryCreateUpdateRequest, options?: any): AxiosPromise<ServiceCategoryCreateUpdate> {
            return localVarFp.v1CoreServiceCategoriesCreate(serviceCategoryCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1CoreServiceCategoriesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {boolean} [featured] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesList(featured?: boolean, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedServiceCategoryList> {
            return localVarFp.v1CoreServiceCategoriesList(featured, isActive, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {PatchedServiceCategoryCreateUpdateRequest} [patchedServiceCategoryCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesPartialUpdate(id: number, patchedServiceCategoryCreateUpdateRequest?: PatchedServiceCategoryCreateUpdateRequest, options?: any): AxiosPromise<ServiceCategoryCreateUpdate> {
            return localVarFp.v1CoreServiceCategoriesPartialUpdate(id, patchedServiceCategoryCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesRetrieve(id: number, options?: any): AxiosPromise<ServiceCategory> {
            return localVarFp.v1CoreServiceCategoriesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Categories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Category.
         * @param {ServiceCategoryCreateUpdateRequest} serviceCategoryCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceCategoriesUpdate(id: number, serviceCategoryCreateUpdateRequest: ServiceCategoryCreateUpdateRequest, options?: any): AxiosPromise<ServiceCategoryCreateUpdate> {
            return localVarFp.v1CoreServiceCategoriesUpdate(id, serviceCategoryCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {ServiceSubcategoryCreateUpdateRequest} serviceSubcategoryCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesCreate(serviceSubcategoryCreateUpdateRequest: ServiceSubcategoryCreateUpdateRequest, options?: any): AxiosPromise<ServiceSubcategoryCreateUpdate> {
            return localVarFp.v1CoreServiceSubcategoriesCreate(serviceSubcategoryCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1CoreServiceSubcategoriesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} [category] 
         * @param {boolean} [featured] 
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesList(category?: number, featured?: boolean, idIn?: Array<number>, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedServiceSubcategoryList> {
            return localVarFp.v1CoreServiceSubcategoriesList(category, featured, idIn, isActive, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {PatchedServiceSubcategoryCreateUpdateRequest} [patchedServiceSubcategoryCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesPartialUpdate(id: number, patchedServiceSubcategoryCreateUpdateRequest?: PatchedServiceSubcategoryCreateUpdateRequest, options?: any): AxiosPromise<ServiceSubcategoryCreateUpdate> {
            return localVarFp.v1CoreServiceSubcategoriesPartialUpdate(id, patchedServiceSubcategoryCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesRetrieve(id: number, options?: any): AxiosPromise<ServiceSubcategory> {
            return localVarFp.v1CoreServiceSubcategoriesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Service Subcategories - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Service Subcategory.
         * @param {ServiceSubcategoryCreateUpdateRequest} serviceSubcategoryCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreServiceSubcategoriesUpdate(id: number, serviceSubcategoryCreateUpdateRequest: ServiceSubcategoryCreateUpdateRequest, options?: any): AxiosPromise<ServiceSubcategoryCreateUpdate> {
            return localVarFp.v1CoreServiceSubcategoriesUpdate(id, serviceSubcategoryCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {SupportFAQCreateUpdateRequest} supportFAQCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqCreate(supportFAQCreateUpdateRequest: SupportFAQCreateUpdateRequest, options?: any): AxiosPromise<SupportFAQCreateUpdate> {
            return localVarFp.v1CoreSupportFaqCreate(supportFAQCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1CoreSupportFaqDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist'} [category] * &#x60;general&#x60; - Основная информация * &#x60;specialist&#x60; - Specialist * &#x60;reviews&#x60; - Reviews * &#x60;account&#x60; - Аккаунт * &#x60;search&#x60; - Найти * &#x60;safety&#x60; - Safety
         * @param {boolean} [isActive] 
         * @param {number} [language] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqList(category?: 'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist', isActive?: boolean, language?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedSupportFAQList> {
            return localVarFp.v1CoreSupportFaqList(category, isActive, language, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {PatchedSupportFAQCreateUpdateRequest} [patchedSupportFAQCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqPartialUpdate(id: number, patchedSupportFAQCreateUpdateRequest?: PatchedSupportFAQCreateUpdateRequest, options?: any): AxiosPromise<SupportFAQCreateUpdate> {
            return localVarFp.v1CoreSupportFaqPartialUpdate(id, patchedSupportFAQCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqRetrieve(id: number, options?: any): AxiosPromise<SupportFAQ> {
            return localVarFp.v1CoreSupportFaqRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Support FAQs - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this Support FAQ.
         * @param {SupportFAQCreateUpdateRequest} supportFAQCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSupportFaqUpdate(id: number, supportFAQCreateUpdateRequest: SupportFAQCreateUpdateRequest, options?: any): AxiosPromise<SupportFAQCreateUpdate> {
            return localVarFp.v1CoreSupportFaqUpdate(id, supportFAQCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {SystemSettingsCreateUpdateRequest} systemSettingsCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsCreate(systemSettingsCreateUpdateRequest: SystemSettingsCreateUpdateRequest, options?: any): AxiosPromise<SystemSettingsCreateUpdate> {
            return localVarFp.v1CoreSystemSettingsCreate(systemSettingsCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1CoreSystemSettingsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {string} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsList(category?: string, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedSystemSettingsList> {
            return localVarFp.v1CoreSystemSettingsList(category, isActive, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {PatchedSystemSettingsCreateUpdateRequest} [patchedSystemSettingsCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsPartialUpdate(id: number, patchedSystemSettingsCreateUpdateRequest?: PatchedSystemSettingsCreateUpdateRequest, options?: any): AxiosPromise<SystemSettingsCreateUpdate> {
            return localVarFp.v1CoreSystemSettingsPartialUpdate(id, patchedSystemSettingsCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsRetrieve(id: number, options?: any): AxiosPromise<SystemSettings> {
            return localVarFp.v1CoreSystemSettingsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * System Settings - Full CRUD with authenticated access.
         * @param {number} id A unique integer value identifying this System Setting.
         * @param {SystemSettingsCreateUpdateRequest} systemSettingsCreateUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CoreSystemSettingsUpdate(id: number, systemSettingsCreateUpdateRequest: SystemSettingsCreateUpdateRequest, options?: any): AxiosPromise<SystemSettingsCreateUpdate> {
            return localVarFp.v1CoreSystemSettingsUpdate(id, systemSettingsCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns featured categories, recommended masters, and statistics for the home page. Prioritizes top masters first, then fills with additional masters if needed.
         * @summary Get home page data with master recommendations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1HomeClientRetrieve(options?: any): AxiosPromise<HomePageData> {
            return localVarFp.v1HomeClientRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Get job recommendations for master based on skills, location, and preferences.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1HomeMasterNewJobsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedJobSearchList> {
            return localVarFp.v1HomeMasterNewJobsList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Complete an assignment with optional rating and review
         * @param {string} id 
         * @param {JobAssignmentCompletionRequest} [jobAssignmentCompletionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobAssignmentsComplete(id: string, jobAssignmentCompletionRequest?: JobAssignmentCompletionRequest, options?: any): AxiosPromise<JobAssignmentApiAction> {
            return localVarFp.v1JobAssignmentsComplete(id, jobAssignmentCompletionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Start an assignment
         * @param {string} id 
         * @param {JobAssignmentRequest} [jobAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobAssignmentsStart(id: string, jobAssignmentRequest?: JobAssignmentRequest, options?: any): AxiosPromise<JobAssignmentApiAction> {
            return localVarFp.v1JobAssignmentsStart(id, jobAssignmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Apply to a job.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobApplyRequest} jobApplyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsApply(id: number, jobApplyRequest: JobApplyRequest, options?: any): AxiosPromise<JobApiAction> {
            return localVarFp.v1JobsApply(id, jobApplyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobId 
         * @param {Array<any>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsAttachmentsCreate(jobId: string, files: Array<any>, options?: any): AxiosPromise<void> {
            return localVarFp.v1JobsAttachmentsCreate(jobId, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsAttachmentsDestroy(id: string, jobId: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1JobsAttachmentsDestroy(id, jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} jobId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsAttachmentsList(jobId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedAttachmentList> {
            return localVarFp.v1JobsAttachmentsList(jobId, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Toggle bookmark status for a job
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsBookmark(id: number, jobRequest: JobRequest, options?: any): AxiosPromise<CResponse> {
            return localVarFp.v1JobsBookmark(id, jobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel a job. Only allowed if job is in PUBLISHED or ASSIGNED state.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsCancel(id: number, jobRequest: JobRequest, options?: any): AxiosPromise<JobApiAction> {
            return localVarFp.v1JobsCancel(id, jobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing jobs.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsCreate(jobRequest: JobRequest, options?: any): AxiosPromise<Job> {
            return localVarFp.v1JobsCreate(jobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1JobsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Toggle favorite status for a job
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsFavorite(id: number, jobRequest: JobRequest, options?: any): AxiosPromise<CResponse> {
            return localVarFp.v1JobsFavorite(id, jobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing jobs.
         * @param {string} [city] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceCategory] 
         * @param {string} [serviceDateFrom] 
         * @param {string} [serviceDateTo] 
         * @param {number} [serviceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsList(city?: string, maxPrice?: number, minPrice?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceCategory?: number, serviceDateFrom?: string, serviceDateTo?: string, serviceSubcategory?: number, urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: any): AxiosPromise<PaginatedJobList> {
            return localVarFp.v1JobsList(city, maxPrice, minPrice, ordering, page, pageSize, search, serviceCategory, serviceDateFrom, serviceDateTo, serviceSubcategory, urgency, options).then((request) => request(axios, basePath));
        },
        /**
         * Get completed job history for master
         * @param {string} [city] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceCategory] 
         * @param {string} [serviceDateFrom] 
         * @param {string} [serviceDateTo] 
         * @param {number} [serviceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsMasterHistory(city?: string, maxPrice?: number, minPrice?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceCategory?: number, serviceDateFrom?: string, serviceDateTo?: string, serviceSubcategory?: number, urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: any): AxiosPromise<PaginatedJobList> {
            return localVarFp.v1JobsMasterHistory(city, maxPrice, minPrice, ordering, page, pageSize, search, serviceCategory, serviceDateFrom, serviceDateTo, serviceSubcategory, urgency, options).then((request) => request(axios, basePath));
        },
        /**
         * Get jobs currently in progress for master
         * @param {string} [city] 
         * @param {number} [maxPrice] 
         * @param {number} [minPrice] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceCategory] 
         * @param {string} [serviceDateFrom] 
         * @param {string} [serviceDateTo] 
         * @param {number} [serviceSubcategory] 
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsMasterInProgress(city?: string, maxPrice?: number, minPrice?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceCategory?: number, serviceDateFrom?: string, serviceDateTo?: string, serviceSubcategory?: number, urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: any): AxiosPromise<PaginatedJobList> {
            return localVarFp.v1JobsMasterInProgress(city, maxPrice, minPrice, ordering, page, pageSize, search, serviceCategory, serviceDateFrom, serviceDateTo, serviceSubcategory, urgency, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {PatchedJobRequest} [patchedJobRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsPartialUpdate(id: number, patchedJobRequest?: PatchedJobRequest, options?: any): AxiosPromise<Job> {
            return localVarFp.v1JobsPartialUpdate(id, patchedJobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish a draft job. Only allowed if job is in DRAFT state.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsPublish(id: number, jobRequest: JobRequest, options?: any): AxiosPromise<JobApiAction> {
            return localVarFp.v1JobsPublish(id, jobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsRetrieve(id: number, options?: any): AxiosPromise<Job> {
            return localVarFp.v1JobsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing jobs.
         * @param {number} id A unique integer value identifying this Job.
         * @param {JobRequest} jobRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsUpdate(id: number, jobRequest: JobRequest, options?: any): AxiosPromise<Job> {
            return localVarFp.v1JobsUpdate(id, jobRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing cities.
         * @param {CityRequest} cityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesCreate(cityRequest: CityRequest, options?: any): AxiosPromise<City> {
            return localVarFp.v1LocationsCitiesCreate(cityRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing cities.
         * @param {number} id A unique integer value identifying this City.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1LocationsCitiesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing cities.
         * @param {number} [country] 
         * @param {boolean} [isDeleted] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesList(country?: number, isDeleted?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedCityListList> {
            return localVarFp.v1LocationsCitiesList(country, isDeleted, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing cities.
         * @param {number} id A unique integer value identifying this City.
         * @param {PatchedCityRequest} [patchedCityRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesPartialUpdate(id: number, patchedCityRequest?: PatchedCityRequest, options?: any): AxiosPromise<City> {
            return localVarFp.v1LocationsCitiesPartialUpdate(id, patchedCityRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing cities.
         * @param {number} id A unique integer value identifying this City.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesRetrieve(id: number, options?: any): AxiosPromise<CityList> {
            return localVarFp.v1LocationsCitiesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing cities.
         * @param {number} id A unique integer value identifying this City.
         * @param {CityRequest} cityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCitiesUpdate(id: number, cityRequest: CityRequest, options?: any): AxiosPromise<City> {
            return localVarFp.v1LocationsCitiesUpdate(id, cityRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing countries.
         * @param {CountryRequest} countryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesCreate(countryRequest: CountryRequest, options?: any): AxiosPromise<Country> {
            return localVarFp.v1LocationsCountriesCreate(countryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing countries.
         * @param {number} id A unique integer value identifying this Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1LocationsCountriesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing countries.
         * @param {boolean} [isDeleted] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesList(isDeleted?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedCountryList> {
            return localVarFp.v1LocationsCountriesList(isDeleted, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing countries.
         * @param {number} id A unique integer value identifying this Country.
         * @param {PatchedCountryRequest} [patchedCountryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesPartialUpdate(id: number, patchedCountryRequest?: PatchedCountryRequest, options?: any): AxiosPromise<Country> {
            return localVarFp.v1LocationsCountriesPartialUpdate(id, patchedCountryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing countries.
         * @param {number} id A unique integer value identifying this Country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesRetrieve(id: number, options?: any): AxiosPromise<Country> {
            return localVarFp.v1LocationsCountriesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing countries.
         * @param {number} id A unique integer value identifying this Country.
         * @param {CountryRequest} countryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1LocationsCountriesUpdate(id: number, countryRequest: CountryRequest, options?: any): AxiosPromise<Country> {
            return localVarFp.v1LocationsCountriesUpdate(id, countryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get notification counts for current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsCount(options?: any): AxiosPromise<any> {
            return localVarFp.v1NotificationsCount(options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {NotificationCreateRequest} notificationCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsCreate(notificationCreateRequest: NotificationCreateRequest, options?: any): AxiosPromise<NotificationCreate> {
            return localVarFp.v1NotificationsCreate(notificationCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1NotificationsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedNotificationList> {
            return localVarFp.v1NotificationsList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark all notifications as read for current user
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsMarkAllRead(notificationRequest: NotificationRequest, options?: any): AxiosPromise<any> {
            return localVarFp.v1NotificationsMarkAllRead(notificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark specific notification as read
         * @param {string} id 
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsMarkRead(id: string, notificationRequest: NotificationRequest, options?: any): AxiosPromise<Notification> {
            return localVarFp.v1NotificationsMarkRead(id, notificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark specific notification as unread
         * @param {string} id 
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsMarkUnread(id: string, notificationRequest: NotificationRequest, options?: any): AxiosPromise<Notification> {
            return localVarFp.v1NotificationsMarkUnread(id, notificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {PatchedNotificationUpdateRequest} [patchedNotificationUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsPartialUpdate(id: string, patchedNotificationUpdateRequest?: PatchedNotificationUpdateRequest, options?: any): AxiosPromise<NotificationUpdate> {
            return localVarFp.v1NotificationsPartialUpdate(id, patchedNotificationUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get recent notifications (last 7 days)
         * @param {number} [days] Number of days to look back
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsRecent(days?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedNotificationList> {
            return localVarFp.v1NotificationsRecent(days, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsRetrieve(id: string, options?: any): AxiosPromise<Notification> {
            return localVarFp.v1NotificationsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get unread notifications for current user
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsUnread(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedNotificationList> {
            return localVarFp.v1NotificationsUnread(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * ViewSet for managing notifications with clean actions.
         * @param {string} id 
         * @param {NotificationUpdateRequest} [notificationUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1NotificationsUpdate(id: string, notificationUpdateRequest?: NotificationUpdateRequest, options?: any): AxiosPromise<NotificationUpdate> {
            return localVarFp.v1NotificationsUpdate(id, notificationUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileControlCreate(options?: any): AxiosPromise<void> {
            return localVarFp.v1ProfileControlCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatchedUserNotificationSettingsRequest} [patchedUserNotificationSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileNotificationSettingsPartialUpdate(patchedUserNotificationSettingsRequest?: PatchedUserNotificationSettingsRequest, options?: any): AxiosPromise<UserNotificationSettings> {
            return localVarFp.v1ProfileNotificationSettingsPartialUpdate(patchedUserNotificationSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileNotificationSettingsRetrieve(options?: any): AxiosPromise<UserNotificationSettings> {
            return localVarFp.v1ProfileNotificationSettingsRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserNotificationSettingsRequest} [userNotificationSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileNotificationSettingsUpdate(userNotificationSettingsRequest?: UserNotificationSettingsRequest, options?: any): AxiosPromise<UserNotificationSettings> {
            return localVarFp.v1ProfileNotificationSettingsUpdate(userNotificationSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve or update authenticated user\'s profile, including profile image upload.
         * @param {PatchedUserUpdateRequest} [patchedUserUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfilePartialUpdate(patchedUserUpdateRequest?: PatchedUserUpdateRequest, options?: any): AxiosPromise<UserUpdate> {
            return localVarFp.v1ProfilePartialUpdate(patchedUserUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve or update authenticated user\'s profile, including profile image upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileRetrieve(options?: any): AxiosPromise<UserDetail> {
            return localVarFp.v1ProfileRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve or update authenticated user\'s profile, including profile image upload.
         * @param {UserUpdateRequest} [userUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ProfileUpdate(userUpdateRequest?: UserUpdateRequest, options?: any): AxiosPromise<UserUpdate> {
            return localVarFp.v1ProfileUpdate(userUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Archive a published resume.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResumeRequest} masterResumeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesArchive(id: number, masterResumeRequest: MasterResumeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1ResumesArchive(id, masterResumeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {MasterResumeRequest} masterResumeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesCreate(masterResumeRequest: MasterResumeRequest, options?: any): AxiosPromise<MasterResume> {
            return localVarFp.v1ResumesCreate(masterResumeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesDestroy(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1ResumesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedMasterResumeList> {
            return localVarFp.v1ResumesList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {PatchedMasterResumeRequest} [patchedMasterResumeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesPartialUpdate(id: number, patchedMasterResumeRequest?: PatchedMasterResumeRequest, options?: any): AxiosPromise<MasterResume> {
            return localVarFp.v1ResumesPartialUpdate(id, patchedMasterResumeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Publish a draft resume. Only allowed if in DRAFT state.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResumeRequest} masterResumeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesPublish(id: number, masterResumeRequest: MasterResumeRequest, options?: any): AxiosPromise<void> {
            return localVarFp.v1ResumesPublish(id, masterResumeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesRetrieve(id: number, options?: any): AxiosPromise<MasterResume> {
            return localVarFp.v1ResumesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * CRUD for Master resumes. Masters manage their own resumes, public sees published.
         * @param {number} id A unique integer value identifying this master resume.
         * @param {MasterResumeRequest} masterResumeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ResumesUpdate(id: number, masterResumeRequest: MasterResumeRequest, options?: any): AxiosPromise<MasterResume> {
            return localVarFp.v1ResumesUpdate(id, masterResumeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get review analytics for a specific master
         * @param {number} masterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ReviewsAnalyticsRetrieve(masterId: number, options?: any): AxiosPromise<ReviewAnalytics> {
            return localVarFp.v1ReviewsAnalyticsRetrieve(masterId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get review data from job assignments
         * @param {boolean} [isVerified] 
         * @param {number} [job] 
         * @param {number} [master] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [rating] 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ReviewsAssignmentsList(isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options?: any): AxiosPromise<PaginatedJobAssignmentReviewList> {
            return localVarFp.v1ReviewsAssignmentsList(isVerified, job, master, ordering, page, pageSize, rating, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all reviews for a specific job
         * @param {number} jobId 
         * @param {boolean} [isVerified] 
         * @param {number} [job] 
         * @param {number} [master] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [rating] 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ReviewsJobList(jobId: number, isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options?: any): AxiosPromise<PaginatedReviewList> {
            return localVarFp.v1ReviewsJobList(jobId, isVerified, job, master, ordering, page, pageSize, rating, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Comprehensive review management with additional actions.
         * @param {boolean} [isVerified] 
         * @param {number} [job] 
         * @param {number} [master] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [rating] 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ReviewsList(isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options?: any): AxiosPromise<PaginatedReviewList> {
            return localVarFp.v1ReviewsList(isVerified, job, master, ordering, page, pageSize, rating, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all reviews for a specific master
         * @param {number} masterId 
         * @param {boolean} [isVerified] 
         * @param {number} [job] 
         * @param {number} [master] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [rating] 
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ReviewsMasterList(masterId: number, isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options?: any): AxiosPromise<PaginatedReviewList> {
            return localVarFp.v1ReviewsMasterList(masterId, isVerified, job, master, ordering, page, pageSize, rating, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Comprehensive review management with additional actions.
         * @param {number} id A unique integer value identifying this Review.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ReviewsRetrieve(id: number, options?: any): AxiosPromise<Review> {
            return localVarFp.v1ReviewsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Search jobs with optimized search serializer.
         * @param {number} [budgetMaxLte] 
         * @param {number} [budgetMinGte] 
         * @param {number} [city] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {number} [serviceSubcategoryCategory] 
         * @param {'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published'} [status] * &#x60;draft&#x60; - Draft * &#x60;published&#x60; - Published * &#x60;assigned&#x60; - Assigned * &#x60;in_progress&#x60; - In Progress * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled
         * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SearchJobsList(budgetMaxLte?: number, budgetMinGte?: number, city?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceSubcategoryCategory?: number, status?: 'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published', urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: any): AxiosPromise<PaginatedJobSearchList> {
            return localVarFp.v1SearchJobsList(budgetMaxLte, budgetMinGte, city, ordering, page, pageSize, search, serviceSubcategoryCategory, status, urgency, options).then((request) => request(axios, basePath));
        },
        /**
         * Search masters by keywords, profession, location, and other criteria. Returns paginated list of master profiles with portfolio items and skills.
         * @summary Search for masters
         * @param {boolean} [isAvailable] 
         * @param {boolean} [isTopMaster] 
         * @param {boolean} [isVerifiedProvider] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {number} [profession] 
         * @param {string} [search] A search term.
         * @param {number} [servicesOfferedCategory] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SearchMastersList(isAvailable?: boolean, isTopMaster?: boolean, isVerifiedProvider?: boolean, ordering?: string, page?: number, pageSize?: number, profession?: number, search?: string, servicesOfferedCategory?: number, options?: any): AxiosPromise<PaginatedMasterSearchList> {
            return localVarFp.v1SearchMastersList(isAvailable, isTopMaster, isVerifiedProvider, ordering, page, pageSize, profession, search, servicesOfferedCategory, options).then((request) => request(axios, basePath));
        },
        /**
         * Master Profile Details
         * @param {number} id A unique integer value identifying this Master Profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMastersDetails(id: number, options?: any): AxiosPromise<PublicMasterProfileDetail> {
            return localVarFp.v1UsersMastersDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMastersList(idIn?: Array<number>, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedPublicMasterProfileList> {
            return localVarFp.v1UsersMastersList(idIn, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Master Profile.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMastersRetrieve(id: number, options?: any): AxiosPromise<PublicMasterProfile> {
            return localVarFp.v1UsersMastersRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update online status for master
         * @param {MasterOnlineStatusRequestRequest} [masterOnlineStatusRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMastersUpdateOnlineStatus(masterOnlineStatusRequestRequest?: MasterOnlineStatusRequestRequest, options?: any): AxiosPromise<MasterOnlineStatusResponse> {
            return localVarFp.v1UsersMastersUpdateOnlineStatus(masterOnlineStatusRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for certificates.
         * @param {CertificateRequest} certificateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesCreate(certificateRequest: CertificateRequest, options?: any): AxiosPromise<Certificate> {
            return localVarFp.v1UsersMyCertificatesCreate(certificateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1UsersMyCertificatesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for certificates.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedCertificateList> {
            return localVarFp.v1UsersMyCertificatesList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {PatchedCertificateRequest} [patchedCertificateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesPartialUpdate(id: string, patchedCertificateRequest?: PatchedCertificateRequest, options?: any): AxiosPromise<Certificate> {
            return localVarFp.v1UsersMyCertificatesPartialUpdate(id, patchedCertificateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesRetrieve(id: string, options?: any): AxiosPromise<Certificate> {
            return localVarFp.v1UsersMyCertificatesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for certificates.
         * @param {string} id 
         * @param {CertificateRequest} certificateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyCertificatesUpdate(id: string, certificateRequest: CertificateRequest, options?: any): AxiosPromise<Certificate> {
            return localVarFp.v1UsersMyCertificatesUpdate(id, certificateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmployerProfileCreateUpdateRequest} [employerProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerCreateCreate(employerProfileCreateUpdateRequest?: EmployerProfileCreateUpdateRequest, options?: any): AxiosPromise<EmployerProfileCreateUpdate> {
            return localVarFp.v1UsersMyEmployerCreateCreate(employerProfileCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatchedEmployerProfileCreateUpdateRequest} [patchedEmployerProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerPartialUpdate(patchedEmployerProfileCreateUpdateRequest?: PatchedEmployerProfileCreateUpdateRequest, options?: any): AxiosPromise<EmployerProfileCreateUpdate> {
            return localVarFp.v1UsersMyEmployerPartialUpdate(patchedEmployerProfileCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerRetrieve(options?: any): AxiosPromise<EmployerProfileCreateUpdate> {
            return localVarFp.v1UsersMyEmployerRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EmployerProfileCreateUpdateRequest} [employerProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyEmployerUpdate(employerProfileCreateUpdateRequest?: EmployerProfileCreateUpdateRequest, options?: any): AxiosPromise<EmployerProfileCreateUpdate> {
            return localVarFp.v1UsersMyEmployerUpdate(employerProfileCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MasterProfileCreateUpdateRequest} [masterProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterCreateCreate(masterProfileCreateUpdateRequest?: MasterProfileCreateUpdateRequest, options?: any): AxiosPromise<MasterProfileCreateUpdate> {
            return localVarFp.v1UsersMyMasterCreateCreate(masterProfileCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatchedMasterProfileCreateUpdateRequest} [patchedMasterProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterPartialUpdate(patchedMasterProfileCreateUpdateRequest?: PatchedMasterProfileCreateUpdateRequest, options?: any): AxiosPromise<MasterProfileCreateUpdate> {
            return localVarFp.v1UsersMyMasterPartialUpdate(patchedMasterProfileCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterRetrieve(options?: any): AxiosPromise<MasterProfileCreateUpdate> {
            return localVarFp.v1UsersMyMasterRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MasterProfileCreateUpdateRequest} [masterProfileCreateUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyMasterUpdate(masterProfileCreateUpdateRequest?: MasterProfileCreateUpdateRequest, options?: any): AxiosPromise<MasterProfileCreateUpdate> {
            return localVarFp.v1UsersMyMasterUpdate(masterProfileCreateUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} portfolioId 
         * @param {Array<any>} files 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioAttachmentsCreate(portfolioId: string, files: Array<any>, options?: any): AxiosPromise<void> {
            return localVarFp.v1UsersMyPortfolioAttachmentsCreate(portfolioId, files, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} portfolioId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioAttachmentsDestroy(id: string, portfolioId: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1UsersMyPortfolioAttachmentsDestroy(id, portfolioId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} portfolioId 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioAttachmentsList(portfolioId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedAttachmentList> {
            return localVarFp.v1UsersMyPortfolioAttachmentsList(portfolioId, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master portfolio items.
         * @param {PortfolioItemRequest} portfolioItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioCreate(portfolioItemRequest: PortfolioItemRequest, options?: any): AxiosPromise<PortfolioItem> {
            return localVarFp.v1UsersMyPortfolioCreate(portfolioItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1UsersMyPortfolioDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedPortfolioItemList> {
            return localVarFp.v1UsersMyPortfolioList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {PatchedPortfolioItemRequest} [patchedPortfolioItemRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioPartialUpdate(id: string, patchedPortfolioItemRequest?: PatchedPortfolioItemRequest, options?: any): AxiosPromise<PortfolioItem> {
            return localVarFp.v1UsersMyPortfolioPartialUpdate(id, patchedPortfolioItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioRetrieve(id: string, options?: any): AxiosPromise<PortfolioItem> {
            return localVarFp.v1UsersMyPortfolioRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master portfolio items.
         * @param {string} id 
         * @param {PortfolioItemRequest} portfolioItemRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMyPortfolioUpdate(id: string, portfolioItemRequest: PortfolioItemRequest, options?: any): AxiosPromise<PortfolioItem> {
            return localVarFp.v1UsersMyPortfolioUpdate(id, portfolioItemRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master skills.
         * @param {MasterSkillRequest} masterSkillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsCreate(masterSkillRequest: MasterSkillRequest, options?: any): AxiosPromise<MasterSkill> {
            return localVarFp.v1UsersMySkillsCreate(masterSkillRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1UsersMySkillsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master skills.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedMasterSkillList> {
            return localVarFp.v1UsersMySkillsList(ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {PatchedMasterSkillRequest} [patchedMasterSkillRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsPartialUpdate(id: string, patchedMasterSkillRequest?: PatchedMasterSkillRequest, options?: any): AxiosPromise<MasterSkill> {
            return localVarFp.v1UsersMySkillsPartialUpdate(id, patchedMasterSkillRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsRetrieve(id: string, options?: any): AxiosPromise<MasterSkill> {
            return localVarFp.v1UsersMySkillsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Crud for service master skills.
         * @param {string} id 
         * @param {MasterSkillRequest} masterSkillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersMySkillsUpdate(id: string, masterSkillRequest: MasterSkillRequest, options?: any): AxiosPromise<MasterSkill> {
            return localVarFp.v1UsersMySkillsUpdate(id, masterSkillRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [category] 
         * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersProfessionsList(category?: number, idIn?: Array<number>, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedProfessionList> {
            return localVarFp.v1UsersProfessionsList(category, idIn, isActive, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this Profession.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersProfessionsRetrieve(id: number, options?: any): AxiosPromise<Profession> {
            return localVarFp.v1UsersProfessionsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List all available skills.
         * @param {number} [category] 
         * @param {boolean} [isActive] 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersSkillsList(category?: number, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: any): AxiosPromise<PaginatedSkillDetailList> {
            return localVarFp.v1UsersSkillsList(category, isActive, ordering, page, pageSize, search, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1Api - interface
 * @export
 * @interface V1Api
 */
export interface V1ApiInterface {
    /**
     * Accept a job application
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {JobApplicationRequest} jobApplicationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsAccept(id: number, jobApplicationRequest: JobApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<JobApplicationApiAction>;

    /**
     * Reject a job application
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {JobApplicationRequest} jobApplicationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsAcceptReject(id: number, jobApplicationRequest: JobApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<JobApplicationApiAction>;

    /**
     * ViewSet for managing job applications.
     * @param {JobApplicationRequest} jobApplicationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsCreate(jobApplicationRequest: JobApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<JobApplication>;

    /**
     * ViewSet for managing job applications.
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ViewSet for managing job applications.
     * @param {number} [amountMax] 
     * @param {number} [amountMin] 
     * @param {string} [appliedAtAfter] 
     * @param {string} [appliedAtBefore] 
     * @param {number} [jobServiceSubcategory] 
     * @param {'high' | 'low' | 'medium' | 'urgent'} [jobUrgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @param {number} [jobId] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {'accepted' | 'pending' | 'rejected' | 'withdrawn'} [status] * &#x60;pending&#x60; - Pending * &#x60;accepted&#x60; - Accepted * &#x60;rejected&#x60; - Rejected * &#x60;withdrawn&#x60; - Withdrawn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsList(amountMax?: number, amountMin?: number, appliedAtAfter?: string, appliedAtBefore?: string, jobServiceSubcategory?: number, jobUrgency?: 'high' | 'low' | 'medium' | 'urgent', jobId?: number, ordering?: string, page?: number, pageSize?: number, search?: string, status?: 'accepted' | 'pending' | 'rejected' | 'withdrawn', options?: AxiosRequestConfig): AxiosPromise<PaginatedJobApplicationList>;

    /**
     * ViewSet for managing job applications.
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {PatchedJobApplicationRequest} [patchedJobApplicationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsPartialUpdate(id: number, patchedJobApplicationRequest?: PatchedJobApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<JobApplication>;

    /**
     * ViewSet for managing job applications.
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<JobApplication>;

    /**
     * ViewSet for managing job applications.
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {JobApplicationRequest} jobApplicationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsUpdate(id: number, jobApplicationRequest: JobApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<JobApplication>;

    /**
     * Withdraw a job by master
     * @param {number} id A unique integer value identifying this Job Application.
     * @param {JobApplicationRequest} jobApplicationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ApplicationsWithdraw(id: number, jobApplicationRequest: JobApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<JobApplicationApiAction>;

    /**
     * 
     * @param {string} assignmentId 
     * @param {Array<any>} files 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsAttachmentsCreate(assignmentId: string, files: Array<any>, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} assignmentId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsAttachmentsDestroy(assignmentId: string, id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} assignmentId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsAttachmentsList(assignmentId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedAttachmentList>;

    /**
     * 
     * @param {JobAssignmentRequest} [jobAssignmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsCreate(jobAssignmentRequest?: JobAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<JobAssignment>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsDestroy(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedJobAssignmentList>;

    /**
     * 
     * @param {string} id 
     * @param {PatchedJobAssignmentRequest} [patchedJobAssignmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsPartialUpdate(id: string, patchedJobAssignmentRequest?: PatchedJobAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<JobAssignment>;

    /**
     * Rate a completed job assignment
     * @param {string} id 
     * @param {RatingRequest} [ratingRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsRateCreate(id: string, ratingRequest?: RatingRequest, options?: AxiosRequestConfig): AxiosPromise<CResponse>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsRetrieve(id: string, options?: AxiosRequestConfig): AxiosPromise<JobAssignment>;

    /**
     * 
     * @param {string} id 
     * @param {JobAssignmentRequest} [jobAssignmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsUpdate(id: string, jobAssignmentRequest?: JobAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<JobAssignment>;

    /**
     * Update progress notes for an assignment
     * @param {string} id 
     * @param {PatchedProgressUpdateRequest} [patchedProgressUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AssignmentsUpdateProgressPartialUpdate(id: string, patchedProgressUpdateRequest?: PatchedProgressUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<JobAssignmentApiAction>;

    /**
     * Authenticate or register a user using Firebase ID token.
     * @param {FireBaseAuthRequest} fireBaseAuthRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AuthFirebaseCreate(fireBaseAuthRequest: FireBaseAuthRequest, options?: AxiosRequestConfig): AxiosPromise<FirebaseAuthResponse>;

    /**
     * User logout view - enhanced version of api_users LogOutView
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1AuthLogoutCreate(options?: AxiosRequestConfig): AxiosPromise<LogoutResponse>;

    /**
     * ViewSet for managing chat rooms
     * @param {ChatRoomCreateRequest} chatRoomCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsCreate(chatRoomCreateRequest: ChatRoomCreateRequest, options?: AxiosRequestConfig): AxiosPromise<ChatRoomCreate>;

    /**
     * ViewSet for managing chat rooms
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsDestroy(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get chats for master
     * @param {number} masterId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsForMaster(masterId: number, options?: AxiosRequestConfig): AxiosPromise<Array<ChatRoomForSearchResponse>>;

    /**
     * Leave a chat room
     * @param {string} id 
     * @param {ChatRoomRequest} chatRoomRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsLeave(id: string, chatRoomRequest: ChatRoomRequest, options?: AxiosRequestConfig): AxiosPromise<ChatRoom>;

    /**
     * ViewSet for managing chat rooms
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedChatRoomList>;

    /**
     * 
     * @param {string} chatRoomId 
     * @param {MessageCreateRequest} messageCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsMessagesCreate(chatRoomId: string, messageCreateRequest: MessageCreateRequest, options?: AxiosRequestConfig): AxiosPromise<MessageCreate>;

    /**
     * 
     * @param {string} chatRoomId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsMessagesDestroy(chatRoomId: string, id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} chatRoomId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsMessagesList(chatRoomId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedMessageList>;

    /**
     * 
     * @param {string} chatRoomId 
     * @param {string} id 
     * @param {PatchedMessageRequest} [patchedMessageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsMessagesPartialUpdate(chatRoomId: string, id: string, patchedMessageRequest?: PatchedMessageRequest, options?: AxiosRequestConfig): AxiosPromise<Message>;

    /**
     * 
     * @param {string} chatRoomId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsMessagesRetrieve(chatRoomId: string, id: string, options?: AxiosRequestConfig): AxiosPromise<Message>;

    /**
     * 
     * @param {string} chatRoomId 
     * @param {string} id 
     * @param {MessageUpdateRequest} messageUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsMessagesUpdate(chatRoomId: string, id: string, messageUpdateRequest: MessageUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<MessageUpdate>;

    /**
     * ViewSet for managing chat rooms
     * @param {string} id 
     * @param {PatchedChatRoomRequest} [patchedChatRoomRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsPartialUpdate(id: string, patchedChatRoomRequest?: PatchedChatRoomRequest, options?: AxiosRequestConfig): AxiosPromise<ChatRoom>;

    /**
     * ViewSet for managing chat rooms
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsRetrieve(id: string, options?: AxiosRequestConfig): AxiosPromise<ChatRoom>;

    /**
     * ViewSet for managing chat rooms
     * @param {string} id 
     * @param {ChatRoomRequest} chatRoomRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ChatsRoomsUpdate(id: string, chatRoomRequest: ChatRoomRequest, options?: AxiosRequestConfig): AxiosPromise<ChatRoom>;

    /**
     * Create contact with throttling.
     * @param {SimpleContactRequest} simpleContactRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ContactsCreate(simpleContactRequest: SimpleContactRequest, options?: AxiosRequestConfig): AxiosPromise<SimpleContact>;

    /**
     * Contact enquiries API with minimal code.
     * @param {number} id A unique integer value identifying this simple contact.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ContactsDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get available enquiry types.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ContactsEnquiryTypesRetrieve(options?: AxiosRequestConfig): AxiosPromise<SimpleContact>;

    /**
     * Contact enquiries API with minimal code.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ContactsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedSimpleContactList>;

    /**
     * Contact enquiries API with minimal code.
     * @param {number} id A unique integer value identifying this simple contact.
     * @param {PatchedSimpleContactRequest} [patchedSimpleContactRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ContactsPartialUpdate(id: number, patchedSimpleContactRequest?: PatchedSimpleContactRequest, options?: AxiosRequestConfig): AxiosPromise<SimpleContact>;

    /**
     * Contact enquiries API with minimal code.
     * @param {number} id A unique integer value identifying this simple contact.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ContactsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<SimpleContact>;

    /**
     * Contact enquiries API with minimal code.
     * @param {number} id A unique integer value identifying this simple contact.
     * @param {SimpleContactRequest} simpleContactRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ContactsUpdate(id: number, simpleContactRequest: SimpleContactRequest, options?: AxiosRequestConfig): AxiosPromise<SimpleContact>;

    /**
     * Languages - Read-only (managed via admin/fixtures).
     * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
     * @param {boolean} [isActive] 
     * @param {boolean} [isDefault] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreLanguagesList(idIn?: Array<number>, isActive?: boolean, isDefault?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedLanguageList>;

    /**
     * Languages - Read-only (managed via admin/fixtures).
     * @param {number} id A unique integer value identifying this Language.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreLanguagesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<Language>;

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {ServiceAreaCreateUpdateRequest} serviceAreaCreateUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceAreasCreate(serviceAreaCreateUpdateRequest: ServiceAreaCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAreaCreateUpdate>;

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Area.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceAreasDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
     * @param {boolean} [isActive] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceAreasList(idIn?: Array<number>, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedServiceAreaList>;

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Area.
     * @param {PatchedServiceAreaCreateUpdateRequest} [patchedServiceAreaCreateUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceAreasPartialUpdate(id: number, patchedServiceAreaCreateUpdateRequest?: PatchedServiceAreaCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAreaCreateUpdate>;

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Area.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceAreasRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<ServiceArea>;

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Area.
     * @param {ServiceAreaCreateUpdateRequest} serviceAreaCreateUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceAreasUpdate(id: number, serviceAreaCreateUpdateRequest: ServiceAreaCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceAreaCreateUpdate>;

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {ServiceCategoryCreateUpdateRequest} serviceCategoryCreateUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceCategoriesCreate(serviceCategoryCreateUpdateRequest: ServiceCategoryCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceCategoryCreateUpdate>;

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceCategoriesDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {boolean} [featured] 
     * @param {boolean} [isActive] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceCategoriesList(featured?: boolean, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedServiceCategoryList>;

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Category.
     * @param {PatchedServiceCategoryCreateUpdateRequest} [patchedServiceCategoryCreateUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceCategoriesPartialUpdate(id: number, patchedServiceCategoryCreateUpdateRequest?: PatchedServiceCategoryCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceCategoryCreateUpdate>;

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceCategoriesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<ServiceCategory>;

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Category.
     * @param {ServiceCategoryCreateUpdateRequest} serviceCategoryCreateUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceCategoriesUpdate(id: number, serviceCategoryCreateUpdateRequest: ServiceCategoryCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceCategoryCreateUpdate>;

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {ServiceSubcategoryCreateUpdateRequest} serviceSubcategoryCreateUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceSubcategoriesCreate(serviceSubcategoryCreateUpdateRequest: ServiceSubcategoryCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceSubcategoryCreateUpdate>;

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Subcategory.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceSubcategoriesDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {number} [category] 
     * @param {boolean} [featured] 
     * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
     * @param {boolean} [isActive] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceSubcategoriesList(category?: number, featured?: boolean, idIn?: Array<number>, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedServiceSubcategoryList>;

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Subcategory.
     * @param {PatchedServiceSubcategoryCreateUpdateRequest} [patchedServiceSubcategoryCreateUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceSubcategoriesPartialUpdate(id: number, patchedServiceSubcategoryCreateUpdateRequest?: PatchedServiceSubcategoryCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceSubcategoryCreateUpdate>;

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Subcategory.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceSubcategoriesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<ServiceSubcategory>;

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Service Subcategory.
     * @param {ServiceSubcategoryCreateUpdateRequest} serviceSubcategoryCreateUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreServiceSubcategoriesUpdate(id: number, serviceSubcategoryCreateUpdateRequest: ServiceSubcategoryCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceSubcategoryCreateUpdate>;

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {SupportFAQCreateUpdateRequest} supportFAQCreateUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSupportFaqCreate(supportFAQCreateUpdateRequest: SupportFAQCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<SupportFAQCreateUpdate>;

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Support FAQ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSupportFaqDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist'} [category] * &#x60;general&#x60; - Основная информация * &#x60;specialist&#x60; - Specialist * &#x60;reviews&#x60; - Reviews * &#x60;account&#x60; - Аккаунт * &#x60;search&#x60; - Найти * &#x60;safety&#x60; - Safety
     * @param {boolean} [isActive] 
     * @param {number} [language] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSupportFaqList(category?: 'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist', isActive?: boolean, language?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedSupportFAQList>;

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Support FAQ.
     * @param {PatchedSupportFAQCreateUpdateRequest} [patchedSupportFAQCreateUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSupportFaqPartialUpdate(id: number, patchedSupportFAQCreateUpdateRequest?: PatchedSupportFAQCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<SupportFAQCreateUpdate>;

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Support FAQ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSupportFaqRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<SupportFAQ>;

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this Support FAQ.
     * @param {SupportFAQCreateUpdateRequest} supportFAQCreateUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSupportFaqUpdate(id: number, supportFAQCreateUpdateRequest: SupportFAQCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<SupportFAQCreateUpdate>;

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {SystemSettingsCreateUpdateRequest} systemSettingsCreateUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSystemSettingsCreate(systemSettingsCreateUpdateRequest: SystemSettingsCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<SystemSettingsCreateUpdate>;

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this System Setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSystemSettingsDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {string} [category] 
     * @param {boolean} [isActive] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSystemSettingsList(category?: string, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedSystemSettingsList>;

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this System Setting.
     * @param {PatchedSystemSettingsCreateUpdateRequest} [patchedSystemSettingsCreateUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSystemSettingsPartialUpdate(id: number, patchedSystemSettingsCreateUpdateRequest?: PatchedSystemSettingsCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<SystemSettingsCreateUpdate>;

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this System Setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSystemSettingsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<SystemSettings>;

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {number} id A unique integer value identifying this System Setting.
     * @param {SystemSettingsCreateUpdateRequest} systemSettingsCreateUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1CoreSystemSettingsUpdate(id: number, systemSettingsCreateUpdateRequest: SystemSettingsCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<SystemSettingsCreateUpdate>;

    /**
     * Returns featured categories, recommended masters, and statistics for the home page. Prioritizes top masters first, then fills with additional masters if needed.
     * @summary Get home page data with master recommendations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1HomeClientRetrieve(options?: AxiosRequestConfig): AxiosPromise<HomePageData>;

    /**
     * Get job recommendations for master based on skills, location, and preferences.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1HomeMasterNewJobsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedJobSearchList>;

    /**
     * Complete an assignment with optional rating and review
     * @param {string} id 
     * @param {JobAssignmentCompletionRequest} [jobAssignmentCompletionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobAssignmentsComplete(id: string, jobAssignmentCompletionRequest?: JobAssignmentCompletionRequest, options?: AxiosRequestConfig): AxiosPromise<JobAssignmentApiAction>;

    /**
     * Start an assignment
     * @param {string} id 
     * @param {JobAssignmentRequest} [jobAssignmentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobAssignmentsStart(id: string, jobAssignmentRequest?: JobAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<JobAssignmentApiAction>;

    /**
     * Apply to a job.
     * @param {number} id A unique integer value identifying this Job.
     * @param {JobApplyRequest} jobApplyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsApply(id: number, jobApplyRequest: JobApplyRequest, options?: AxiosRequestConfig): AxiosPromise<JobApiAction>;

    /**
     * 
     * @param {string} jobId 
     * @param {Array<any>} files 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsAttachmentsCreate(jobId: string, files: Array<any>, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} id 
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsAttachmentsDestroy(id: string, jobId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} jobId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsAttachmentsList(jobId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedAttachmentList>;

    /**
     * Toggle bookmark status for a job
     * @param {number} id A unique integer value identifying this Job.
     * @param {JobRequest} jobRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsBookmark(id: number, jobRequest: JobRequest, options?: AxiosRequestConfig): AxiosPromise<CResponse>;

    /**
     * Cancel a job. Only allowed if job is in PUBLISHED or ASSIGNED state.
     * @param {number} id A unique integer value identifying this Job.
     * @param {JobRequest} jobRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsCancel(id: number, jobRequest: JobRequest, options?: AxiosRequestConfig): AxiosPromise<JobApiAction>;

    /**
     * ViewSet for managing jobs.
     * @param {JobRequest} jobRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsCreate(jobRequest: JobRequest, options?: AxiosRequestConfig): AxiosPromise<Job>;

    /**
     * ViewSet for managing jobs.
     * @param {number} id A unique integer value identifying this Job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Toggle favorite status for a job
     * @param {number} id A unique integer value identifying this Job.
     * @param {JobRequest} jobRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsFavorite(id: number, jobRequest: JobRequest, options?: AxiosRequestConfig): AxiosPromise<CResponse>;

    /**
     * ViewSet for managing jobs.
     * @param {string} [city] 
     * @param {number} [maxPrice] 
     * @param {number} [minPrice] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {number} [serviceCategory] 
     * @param {string} [serviceDateFrom] 
     * @param {string} [serviceDateTo] 
     * @param {number} [serviceSubcategory] 
     * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsList(city?: string, maxPrice?: number, minPrice?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceCategory?: number, serviceDateFrom?: string, serviceDateTo?: string, serviceSubcategory?: number, urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: AxiosRequestConfig): AxiosPromise<PaginatedJobList>;

    /**
     * Get completed job history for master
     * @param {string} [city] 
     * @param {number} [maxPrice] 
     * @param {number} [minPrice] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {number} [serviceCategory] 
     * @param {string} [serviceDateFrom] 
     * @param {string} [serviceDateTo] 
     * @param {number} [serviceSubcategory] 
     * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsMasterHistory(city?: string, maxPrice?: number, minPrice?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceCategory?: number, serviceDateFrom?: string, serviceDateTo?: string, serviceSubcategory?: number, urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: AxiosRequestConfig): AxiosPromise<PaginatedJobList>;

    /**
     * Get jobs currently in progress for master
     * @param {string} [city] 
     * @param {number} [maxPrice] 
     * @param {number} [minPrice] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {number} [serviceCategory] 
     * @param {string} [serviceDateFrom] 
     * @param {string} [serviceDateTo] 
     * @param {number} [serviceSubcategory] 
     * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsMasterInProgress(city?: string, maxPrice?: number, minPrice?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceCategory?: number, serviceDateFrom?: string, serviceDateTo?: string, serviceSubcategory?: number, urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: AxiosRequestConfig): AxiosPromise<PaginatedJobList>;

    /**
     * ViewSet for managing jobs.
     * @param {number} id A unique integer value identifying this Job.
     * @param {PatchedJobRequest} [patchedJobRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsPartialUpdate(id: number, patchedJobRequest?: PatchedJobRequest, options?: AxiosRequestConfig): AxiosPromise<Job>;

    /**
     * Publish a draft job. Only allowed if job is in DRAFT state.
     * @param {number} id A unique integer value identifying this Job.
     * @param {JobRequest} jobRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsPublish(id: number, jobRequest: JobRequest, options?: AxiosRequestConfig): AxiosPromise<JobApiAction>;

    /**
     * ViewSet for managing jobs.
     * @param {number} id A unique integer value identifying this Job.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<Job>;

    /**
     * ViewSet for managing jobs.
     * @param {number} id A unique integer value identifying this Job.
     * @param {JobRequest} jobRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1JobsUpdate(id: number, jobRequest: JobRequest, options?: AxiosRequestConfig): AxiosPromise<Job>;

    /**
     * ViewSet for managing cities.
     * @param {CityRequest} cityRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCitiesCreate(cityRequest: CityRequest, options?: AxiosRequestConfig): AxiosPromise<City>;

    /**
     * ViewSet for managing cities.
     * @param {number} id A unique integer value identifying this City.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCitiesDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ViewSet for managing cities.
     * @param {number} [country] 
     * @param {boolean} [isDeleted] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCitiesList(country?: number, isDeleted?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedCityListList>;

    /**
     * ViewSet for managing cities.
     * @param {number} id A unique integer value identifying this City.
     * @param {PatchedCityRequest} [patchedCityRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCitiesPartialUpdate(id: number, patchedCityRequest?: PatchedCityRequest, options?: AxiosRequestConfig): AxiosPromise<City>;

    /**
     * ViewSet for managing cities.
     * @param {number} id A unique integer value identifying this City.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCitiesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<CityList>;

    /**
     * ViewSet for managing cities.
     * @param {number} id A unique integer value identifying this City.
     * @param {CityRequest} cityRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCitiesUpdate(id: number, cityRequest: CityRequest, options?: AxiosRequestConfig): AxiosPromise<City>;

    /**
     * ViewSet for managing countries.
     * @param {CountryRequest} countryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCountriesCreate(countryRequest: CountryRequest, options?: AxiosRequestConfig): AxiosPromise<Country>;

    /**
     * ViewSet for managing countries.
     * @param {number} id A unique integer value identifying this Country.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCountriesDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ViewSet for managing countries.
     * @param {boolean} [isDeleted] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCountriesList(isDeleted?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedCountryList>;

    /**
     * ViewSet for managing countries.
     * @param {number} id A unique integer value identifying this Country.
     * @param {PatchedCountryRequest} [patchedCountryRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCountriesPartialUpdate(id: number, patchedCountryRequest?: PatchedCountryRequest, options?: AxiosRequestConfig): AxiosPromise<Country>;

    /**
     * ViewSet for managing countries.
     * @param {number} id A unique integer value identifying this Country.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCountriesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<Country>;

    /**
     * ViewSet for managing countries.
     * @param {number} id A unique integer value identifying this Country.
     * @param {CountryRequest} countryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1LocationsCountriesUpdate(id: number, countryRequest: CountryRequest, options?: AxiosRequestConfig): AxiosPromise<Country>;

    /**
     * Get notification counts for current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsCount(options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {NotificationCreateRequest} notificationCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsCreate(notificationCreateRequest: NotificationCreateRequest, options?: AxiosRequestConfig): AxiosPromise<NotificationCreate>;

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsDestroy(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedNotificationList>;

    /**
     * Mark all notifications as read for current user
     * @param {NotificationRequest} notificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsMarkAllRead(notificationRequest: NotificationRequest, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * Mark specific notification as read
     * @param {string} id 
     * @param {NotificationRequest} notificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsMarkRead(id: string, notificationRequest: NotificationRequest, options?: AxiosRequestConfig): AxiosPromise<Notification>;

    /**
     * Mark specific notification as unread
     * @param {string} id 
     * @param {NotificationRequest} notificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsMarkUnread(id: string, notificationRequest: NotificationRequest, options?: AxiosRequestConfig): AxiosPromise<Notification>;

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {string} id 
     * @param {PatchedNotificationUpdateRequest} [patchedNotificationUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsPartialUpdate(id: string, patchedNotificationUpdateRequest?: PatchedNotificationUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<NotificationUpdate>;

    /**
     * Get recent notifications (last 7 days)
     * @param {number} [days] Number of days to look back
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsRecent(days?: number, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedNotificationList>;

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsRetrieve(id: string, options?: AxiosRequestConfig): AxiosPromise<Notification>;

    /**
     * Get unread notifications for current user
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsUnread(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedNotificationList>;

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {string} id 
     * @param {NotificationUpdateRequest} [notificationUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1NotificationsUpdate(id: string, notificationUpdateRequest?: NotificationUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<NotificationUpdate>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfileControlCreate(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {PatchedUserNotificationSettingsRequest} [patchedUserNotificationSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfileNotificationSettingsPartialUpdate(patchedUserNotificationSettingsRequest?: PatchedUserNotificationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<UserNotificationSettings>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfileNotificationSettingsRetrieve(options?: AxiosRequestConfig): AxiosPromise<UserNotificationSettings>;

    /**
     * 
     * @param {UserNotificationSettingsRequest} [userNotificationSettingsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfileNotificationSettingsUpdate(userNotificationSettingsRequest?: UserNotificationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<UserNotificationSettings>;

    /**
     * Retrieve or update authenticated user\'s profile, including profile image upload.
     * @param {PatchedUserUpdateRequest} [patchedUserUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfilePartialUpdate(patchedUserUpdateRequest?: PatchedUserUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<UserUpdate>;

    /**
     * Retrieve or update authenticated user\'s profile, including profile image upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfileRetrieve(options?: AxiosRequestConfig): AxiosPromise<UserDetail>;

    /**
     * Retrieve or update authenticated user\'s profile, including profile image upload.
     * @param {UserUpdateRequest} [userUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ProfileUpdate(userUpdateRequest?: UserUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<UserUpdate>;

    /**
     * Archive a published resume.
     * @param {number} id A unique integer value identifying this master resume.
     * @param {MasterResumeRequest} masterResumeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesArchive(id: number, masterResumeRequest: MasterResumeRequest, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {MasterResumeRequest} masterResumeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesCreate(masterResumeRequest: MasterResumeRequest, options?: AxiosRequestConfig): AxiosPromise<MasterResume>;

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {number} id A unique integer value identifying this master resume.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesDestroy(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedMasterResumeList>;

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {number} id A unique integer value identifying this master resume.
     * @param {PatchedMasterResumeRequest} [patchedMasterResumeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesPartialUpdate(id: number, patchedMasterResumeRequest?: PatchedMasterResumeRequest, options?: AxiosRequestConfig): AxiosPromise<MasterResume>;

    /**
     * Publish a draft resume. Only allowed if in DRAFT state.
     * @param {number} id A unique integer value identifying this master resume.
     * @param {MasterResumeRequest} masterResumeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesPublish(id: number, masterResumeRequest: MasterResumeRequest, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {number} id A unique integer value identifying this master resume.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<MasterResume>;

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {number} id A unique integer value identifying this master resume.
     * @param {MasterResumeRequest} masterResumeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ResumesUpdate(id: number, masterResumeRequest: MasterResumeRequest, options?: AxiosRequestConfig): AxiosPromise<MasterResume>;

    /**
     * Get review analytics for a specific master
     * @param {number} masterId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ReviewsAnalyticsRetrieve(masterId: number, options?: AxiosRequestConfig): AxiosPromise<ReviewAnalytics>;

    /**
     * Get review data from job assignments
     * @param {boolean} [isVerified] 
     * @param {number} [job] 
     * @param {number} [master] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {number} [rating] 
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ReviewsAssignmentsList(isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedJobAssignmentReviewList>;

    /**
     * Get all reviews for a specific job
     * @param {number} jobId 
     * @param {boolean} [isVerified] 
     * @param {number} [job] 
     * @param {number} [master] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {number} [rating] 
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ReviewsJobList(jobId: number, isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedReviewList>;

    /**
     * Comprehensive review management with additional actions.
     * @param {boolean} [isVerified] 
     * @param {number} [job] 
     * @param {number} [master] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {number} [rating] 
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ReviewsList(isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedReviewList>;

    /**
     * Get all reviews for a specific master
     * @param {number} masterId 
     * @param {boolean} [isVerified] 
     * @param {number} [job] 
     * @param {number} [master] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {number} [rating] 
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ReviewsMasterList(masterId: number, isVerified?: boolean, job?: number, master?: number, ordering?: string, page?: number, pageSize?: number, rating?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedReviewList>;

    /**
     * Comprehensive review management with additional actions.
     * @param {number} id A unique integer value identifying this Review.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1ReviewsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<Review>;

    /**
     * Search jobs with optimized search serializer.
     * @param {number} [budgetMaxLte] 
     * @param {number} [budgetMinGte] 
     * @param {number} [city] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {number} [serviceSubcategoryCategory] 
     * @param {'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published'} [status] * &#x60;draft&#x60; - Draft * &#x60;published&#x60; - Published * &#x60;assigned&#x60; - Assigned * &#x60;in_progress&#x60; - In Progress * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled
     * @param {'high' | 'low' | 'medium' | 'urgent'} [urgency] * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1SearchJobsList(budgetMaxLte?: number, budgetMinGte?: number, city?: number, ordering?: string, page?: number, pageSize?: number, search?: string, serviceSubcategoryCategory?: number, status?: 'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published', urgency?: 'high' | 'low' | 'medium' | 'urgent', options?: AxiosRequestConfig): AxiosPromise<PaginatedJobSearchList>;

    /**
     * Search masters by keywords, profession, location, and other criteria. Returns paginated list of master profiles with portfolio items and skills.
     * @summary Search for masters
     * @param {boolean} [isAvailable] 
     * @param {boolean} [isTopMaster] 
     * @param {boolean} [isVerifiedProvider] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {number} [profession] 
     * @param {string} [search] A search term.
     * @param {number} [servicesOfferedCategory] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1SearchMastersList(isAvailable?: boolean, isTopMaster?: boolean, isVerifiedProvider?: boolean, ordering?: string, page?: number, pageSize?: number, profession?: number, search?: string, servicesOfferedCategory?: number, options?: AxiosRequestConfig): AxiosPromise<PaginatedMasterSearchList>;

    /**
     * Master Profile Details
     * @param {number} id A unique integer value identifying this Master Profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMastersDetails(id: number, options?: AxiosRequestConfig): AxiosPromise<PublicMasterProfileDetail>;

    /**
     * 
     * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMastersList(idIn?: Array<number>, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedPublicMasterProfileList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Master Profile.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMastersRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<PublicMasterProfile>;

    /**
     * Update online status for master
     * @param {MasterOnlineStatusRequestRequest} [masterOnlineStatusRequestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMastersUpdateOnlineStatus(masterOnlineStatusRequestRequest?: MasterOnlineStatusRequestRequest, options?: AxiosRequestConfig): AxiosPromise<MasterOnlineStatusResponse>;

    /**
     * Crud for certificates.
     * @param {CertificateRequest} certificateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyCertificatesCreate(certificateRequest: CertificateRequest, options?: AxiosRequestConfig): AxiosPromise<Certificate>;

    /**
     * Crud for certificates.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyCertificatesDestroy(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Crud for certificates.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyCertificatesList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedCertificateList>;

    /**
     * Crud for certificates.
     * @param {string} id 
     * @param {PatchedCertificateRequest} [patchedCertificateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyCertificatesPartialUpdate(id: string, patchedCertificateRequest?: PatchedCertificateRequest, options?: AxiosRequestConfig): AxiosPromise<Certificate>;

    /**
     * Crud for certificates.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyCertificatesRetrieve(id: string, options?: AxiosRequestConfig): AxiosPromise<Certificate>;

    /**
     * Crud for certificates.
     * @param {string} id 
     * @param {CertificateRequest} certificateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyCertificatesUpdate(id: string, certificateRequest: CertificateRequest, options?: AxiosRequestConfig): AxiosPromise<Certificate>;

    /**
     * 
     * @param {EmployerProfileCreateUpdateRequest} [employerProfileCreateUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyEmployerCreateCreate(employerProfileCreateUpdateRequest?: EmployerProfileCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<EmployerProfileCreateUpdate>;

    /**
     * 
     * @param {PatchedEmployerProfileCreateUpdateRequest} [patchedEmployerProfileCreateUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyEmployerPartialUpdate(patchedEmployerProfileCreateUpdateRequest?: PatchedEmployerProfileCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<EmployerProfileCreateUpdate>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyEmployerRetrieve(options?: AxiosRequestConfig): AxiosPromise<EmployerProfileCreateUpdate>;

    /**
     * 
     * @param {EmployerProfileCreateUpdateRequest} [employerProfileCreateUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyEmployerUpdate(employerProfileCreateUpdateRequest?: EmployerProfileCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<EmployerProfileCreateUpdate>;

    /**
     * 
     * @param {MasterProfileCreateUpdateRequest} [masterProfileCreateUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyMasterCreateCreate(masterProfileCreateUpdateRequest?: MasterProfileCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<MasterProfileCreateUpdate>;

    /**
     * 
     * @param {PatchedMasterProfileCreateUpdateRequest} [patchedMasterProfileCreateUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyMasterPartialUpdate(patchedMasterProfileCreateUpdateRequest?: PatchedMasterProfileCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<MasterProfileCreateUpdate>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyMasterRetrieve(options?: AxiosRequestConfig): AxiosPromise<MasterProfileCreateUpdate>;

    /**
     * 
     * @param {MasterProfileCreateUpdateRequest} [masterProfileCreateUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyMasterUpdate(masterProfileCreateUpdateRequest?: MasterProfileCreateUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<MasterProfileCreateUpdate>;

    /**
     * 
     * @param {string} portfolioId 
     * @param {Array<any>} files 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioAttachmentsCreate(portfolioId: string, files: Array<any>, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} id 
     * @param {string} portfolioId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioAttachmentsDestroy(id: string, portfolioId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} portfolioId 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioAttachmentsList(portfolioId: string, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedAttachmentList>;

    /**
     * Crud for service master portfolio items.
     * @param {PortfolioItemRequest} portfolioItemRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioCreate(portfolioItemRequest: PortfolioItemRequest, options?: AxiosRequestConfig): AxiosPromise<PortfolioItem>;

    /**
     * Crud for service master portfolio items.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioDestroy(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Crud for service master portfolio items.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedPortfolioItemList>;

    /**
     * Crud for service master portfolio items.
     * @param {string} id 
     * @param {PatchedPortfolioItemRequest} [patchedPortfolioItemRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioPartialUpdate(id: string, patchedPortfolioItemRequest?: PatchedPortfolioItemRequest, options?: AxiosRequestConfig): AxiosPromise<PortfolioItem>;

    /**
     * Crud for service master portfolio items.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioRetrieve(id: string, options?: AxiosRequestConfig): AxiosPromise<PortfolioItem>;

    /**
     * Crud for service master portfolio items.
     * @param {string} id 
     * @param {PortfolioItemRequest} portfolioItemRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMyPortfolioUpdate(id: string, portfolioItemRequest: PortfolioItemRequest, options?: AxiosRequestConfig): AxiosPromise<PortfolioItem>;

    /**
     * Crud for service master skills.
     * @param {MasterSkillRequest} masterSkillRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMySkillsCreate(masterSkillRequest: MasterSkillRequest, options?: AxiosRequestConfig): AxiosPromise<MasterSkill>;

    /**
     * Crud for service master skills.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMySkillsDestroy(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Crud for service master skills.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMySkillsList(ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedMasterSkillList>;

    /**
     * Crud for service master skills.
     * @param {string} id 
     * @param {PatchedMasterSkillRequest} [patchedMasterSkillRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMySkillsPartialUpdate(id: string, patchedMasterSkillRequest?: PatchedMasterSkillRequest, options?: AxiosRequestConfig): AxiosPromise<MasterSkill>;

    /**
     * Crud for service master skills.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMySkillsRetrieve(id: string, options?: AxiosRequestConfig): AxiosPromise<MasterSkill>;

    /**
     * Crud for service master skills.
     * @param {string} id 
     * @param {MasterSkillRequest} masterSkillRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersMySkillsUpdate(id: string, masterSkillRequest: MasterSkillRequest, options?: AxiosRequestConfig): AxiosPromise<MasterSkill>;

    /**
     * 
     * @param {number} [category] 
     * @param {Array<number>} [idIn] Несколько значений могут быть разделены запятыми.
     * @param {boolean} [isActive] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersProfessionsList(category?: number, idIn?: Array<number>, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedProfessionList>;

    /**
     * 
     * @param {number} id A unique integer value identifying this Profession.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersProfessionsRetrieve(id: number, options?: AxiosRequestConfig): AxiosPromise<Profession>;

    /**
     * List all available skills.
     * @param {number} [category] 
     * @param {boolean} [isActive] 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] A search term.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1ApiInterface
     */
    v1UsersSkillsList(category?: number, isActive?: boolean, ordering?: string, page?: number, pageSize?: number, search?: string, options?: AxiosRequestConfig): AxiosPromise<PaginatedSkillDetailList>;

}

/**
 * Request parameters for v1ApplicationsAccept operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsAcceptRequest
 */
export interface V1ApiV1ApplicationsAcceptRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsAccept
     */
    readonly id: number

    /**
     * 
     * @type {JobApplicationRequest}
     * @memberof V1ApiV1ApplicationsAccept
     */
    readonly jobApplicationRequest: JobApplicationRequest
}

/**
 * Request parameters for v1ApplicationsAcceptReject operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsAcceptRejectRequest
 */
export interface V1ApiV1ApplicationsAcceptRejectRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsAcceptReject
     */
    readonly id: number

    /**
     * 
     * @type {JobApplicationRequest}
     * @memberof V1ApiV1ApplicationsAcceptReject
     */
    readonly jobApplicationRequest: JobApplicationRequest
}

/**
 * Request parameters for v1ApplicationsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsCreateRequest
 */
export interface V1ApiV1ApplicationsCreateRequest {
    /**
     * 
     * @type {JobApplicationRequest}
     * @memberof V1ApiV1ApplicationsCreate
     */
    readonly jobApplicationRequest: JobApplicationRequest
}

/**
 * Request parameters for v1ApplicationsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsDestroyRequest
 */
export interface V1ApiV1ApplicationsDestroyRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1ApplicationsList operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsListRequest
 */
export interface V1ApiV1ApplicationsListRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly amountMax?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly amountMin?: number

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly appliedAtAfter?: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly appliedAtBefore?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly jobServiceSubcategory?: number

    /**
     * * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @type {'high' | 'low' | 'medium' | 'urgent'}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly jobUrgency?: 'high' | 'low' | 'medium' | 'urgent'

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly jobId?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly search?: string

    /**
     * * &#x60;pending&#x60; - Pending * &#x60;accepted&#x60; - Accepted * &#x60;rejected&#x60; - Rejected * &#x60;withdrawn&#x60; - Withdrawn
     * @type {'accepted' | 'pending' | 'rejected' | 'withdrawn'}
     * @memberof V1ApiV1ApplicationsList
     */
    readonly status?: 'accepted' | 'pending' | 'rejected' | 'withdrawn'
}

/**
 * Request parameters for v1ApplicationsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsPartialUpdateRequest
 */
export interface V1ApiV1ApplicationsPartialUpdateRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedJobApplicationRequest}
     * @memberof V1ApiV1ApplicationsPartialUpdate
     */
    readonly patchedJobApplicationRequest?: PatchedJobApplicationRequest
}

/**
 * Request parameters for v1ApplicationsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsRetrieveRequest
 */
export interface V1ApiV1ApplicationsRetrieveRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1ApplicationsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsUpdateRequest
 */
export interface V1ApiV1ApplicationsUpdateRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {JobApplicationRequest}
     * @memberof V1ApiV1ApplicationsUpdate
     */
    readonly jobApplicationRequest: JobApplicationRequest
}

/**
 * Request parameters for v1ApplicationsWithdraw operation in V1Api.
 * @export
 * @interface V1ApiV1ApplicationsWithdrawRequest
 */
export interface V1ApiV1ApplicationsWithdrawRequest {
    /**
     * A unique integer value identifying this Job Application.
     * @type {number}
     * @memberof V1ApiV1ApplicationsWithdraw
     */
    readonly id: number

    /**
     * 
     * @type {JobApplicationRequest}
     * @memberof V1ApiV1ApplicationsWithdraw
     */
    readonly jobApplicationRequest: JobApplicationRequest
}

/**
 * Request parameters for v1AssignmentsAttachmentsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsAttachmentsCreateRequest
 */
export interface V1ApiV1AssignmentsAttachmentsCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1AssignmentsAttachmentsCreate
     */
    readonly assignmentId: string

    /**
     * 
     * @type {Array<any>}
     * @memberof V1ApiV1AssignmentsAttachmentsCreate
     */
    readonly files: Array<any>
}

/**
 * Request parameters for v1AssignmentsAttachmentsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsAttachmentsDestroyRequest
 */
export interface V1ApiV1AssignmentsAttachmentsDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1AssignmentsAttachmentsDestroy
     */
    readonly assignmentId: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1AssignmentsAttachmentsDestroy
     */
    readonly id: string
}

/**
 * Request parameters for v1AssignmentsAttachmentsList operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsAttachmentsListRequest
 */
export interface V1ApiV1AssignmentsAttachmentsListRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1AssignmentsAttachmentsList
     */
    readonly assignmentId: string

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1AssignmentsAttachmentsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1AssignmentsAttachmentsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1AssignmentsAttachmentsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1AssignmentsAttachmentsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1AssignmentsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsCreateRequest
 */
export interface V1ApiV1AssignmentsCreateRequest {
    /**
     * 
     * @type {JobAssignmentRequest}
     * @memberof V1ApiV1AssignmentsCreate
     */
    readonly jobAssignmentRequest?: JobAssignmentRequest
}

/**
 * Request parameters for v1AssignmentsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsDestroyRequest
 */
export interface V1ApiV1AssignmentsDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1AssignmentsDestroy
     */
    readonly id: string
}

/**
 * Request parameters for v1AssignmentsList operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsListRequest
 */
export interface V1ApiV1AssignmentsListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1AssignmentsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1AssignmentsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1AssignmentsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1AssignmentsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1AssignmentsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsPartialUpdateRequest
 */
export interface V1ApiV1AssignmentsPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1AssignmentsPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PatchedJobAssignmentRequest}
     * @memberof V1ApiV1AssignmentsPartialUpdate
     */
    readonly patchedJobAssignmentRequest?: PatchedJobAssignmentRequest
}

/**
 * Request parameters for v1AssignmentsRateCreate operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsRateCreateRequest
 */
export interface V1ApiV1AssignmentsRateCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1AssignmentsRateCreate
     */
    readonly id: string

    /**
     * 
     * @type {RatingRequest}
     * @memberof V1ApiV1AssignmentsRateCreate
     */
    readonly ratingRequest?: RatingRequest
}

/**
 * Request parameters for v1AssignmentsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsRetrieveRequest
 */
export interface V1ApiV1AssignmentsRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1AssignmentsRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for v1AssignmentsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsUpdateRequest
 */
export interface V1ApiV1AssignmentsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1AssignmentsUpdate
     */
    readonly id: string

    /**
     * 
     * @type {JobAssignmentRequest}
     * @memberof V1ApiV1AssignmentsUpdate
     */
    readonly jobAssignmentRequest?: JobAssignmentRequest
}

/**
 * Request parameters for v1AssignmentsUpdateProgressPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1AssignmentsUpdateProgressPartialUpdateRequest
 */
export interface V1ApiV1AssignmentsUpdateProgressPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1AssignmentsUpdateProgressPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PatchedProgressUpdateRequest}
     * @memberof V1ApiV1AssignmentsUpdateProgressPartialUpdate
     */
    readonly patchedProgressUpdateRequest?: PatchedProgressUpdateRequest
}

/**
 * Request parameters for v1AuthFirebaseCreate operation in V1Api.
 * @export
 * @interface V1ApiV1AuthFirebaseCreateRequest
 */
export interface V1ApiV1AuthFirebaseCreateRequest {
    /**
     * 
     * @type {FireBaseAuthRequest}
     * @memberof V1ApiV1AuthFirebaseCreate
     */
    readonly fireBaseAuthRequest: FireBaseAuthRequest
}

/**
 * Request parameters for v1ChatsRoomsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsCreateRequest
 */
export interface V1ApiV1ChatsRoomsCreateRequest {
    /**
     * 
     * @type {ChatRoomCreateRequest}
     * @memberof V1ApiV1ChatsRoomsCreate
     */
    readonly chatRoomCreateRequest: ChatRoomCreateRequest
}

/**
 * Request parameters for v1ChatsRoomsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsDestroyRequest
 */
export interface V1ApiV1ChatsRoomsDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsDestroy
     */
    readonly id: string
}

/**
 * Request parameters for v1ChatsRoomsForMaster operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsForMasterRequest
 */
export interface V1ApiV1ChatsRoomsForMasterRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ChatsRoomsForMaster
     */
    readonly masterId: number
}

/**
 * Request parameters for v1ChatsRoomsLeave operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsLeaveRequest
 */
export interface V1ApiV1ChatsRoomsLeaveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsLeave
     */
    readonly id: string

    /**
     * 
     * @type {ChatRoomRequest}
     * @memberof V1ApiV1ChatsRoomsLeave
     */
    readonly chatRoomRequest: ChatRoomRequest
}

/**
 * Request parameters for v1ChatsRoomsList operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsListRequest
 */
export interface V1ApiV1ChatsRoomsListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1ChatsRoomsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1ChatsRoomsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1ChatsRoomsMessagesCreate operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsMessagesCreateRequest
 */
export interface V1ApiV1ChatsRoomsMessagesCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessagesCreate
     */
    readonly chatRoomId: string

    /**
     * 
     * @type {MessageCreateRequest}
     * @memberof V1ApiV1ChatsRoomsMessagesCreate
     */
    readonly messageCreateRequest: MessageCreateRequest
}

/**
 * Request parameters for v1ChatsRoomsMessagesDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsMessagesDestroyRequest
 */
export interface V1ApiV1ChatsRoomsMessagesDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessagesDestroy
     */
    readonly chatRoomId: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessagesDestroy
     */
    readonly id: string
}

/**
 * Request parameters for v1ChatsRoomsMessagesList operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsMessagesListRequest
 */
export interface V1ApiV1ChatsRoomsMessagesListRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessagesList
     */
    readonly chatRoomId: string

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessagesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1ChatsRoomsMessagesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1ChatsRoomsMessagesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessagesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1ChatsRoomsMessagesPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsMessagesPartialUpdateRequest
 */
export interface V1ApiV1ChatsRoomsMessagesPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessagesPartialUpdate
     */
    readonly chatRoomId: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessagesPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PatchedMessageRequest}
     * @memberof V1ApiV1ChatsRoomsMessagesPartialUpdate
     */
    readonly patchedMessageRequest?: PatchedMessageRequest
}

/**
 * Request parameters for v1ChatsRoomsMessagesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsMessagesRetrieveRequest
 */
export interface V1ApiV1ChatsRoomsMessagesRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessagesRetrieve
     */
    readonly chatRoomId: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessagesRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for v1ChatsRoomsMessagesUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsMessagesUpdateRequest
 */
export interface V1ApiV1ChatsRoomsMessagesUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessagesUpdate
     */
    readonly chatRoomId: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsMessagesUpdate
     */
    readonly id: string

    /**
     * 
     * @type {MessageUpdateRequest}
     * @memberof V1ApiV1ChatsRoomsMessagesUpdate
     */
    readonly messageUpdateRequest: MessageUpdateRequest
}

/**
 * Request parameters for v1ChatsRoomsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsPartialUpdateRequest
 */
export interface V1ApiV1ChatsRoomsPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PatchedChatRoomRequest}
     * @memberof V1ApiV1ChatsRoomsPartialUpdate
     */
    readonly patchedChatRoomRequest?: PatchedChatRoomRequest
}

/**
 * Request parameters for v1ChatsRoomsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsRetrieveRequest
 */
export interface V1ApiV1ChatsRoomsRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for v1ChatsRoomsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ChatsRoomsUpdateRequest
 */
export interface V1ApiV1ChatsRoomsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1ChatsRoomsUpdate
     */
    readonly id: string

    /**
     * 
     * @type {ChatRoomRequest}
     * @memberof V1ApiV1ChatsRoomsUpdate
     */
    readonly chatRoomRequest: ChatRoomRequest
}

/**
 * Request parameters for v1ContactsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1ContactsCreateRequest
 */
export interface V1ApiV1ContactsCreateRequest {
    /**
     * 
     * @type {SimpleContactRequest}
     * @memberof V1ApiV1ContactsCreate
     */
    readonly simpleContactRequest: SimpleContactRequest
}

/**
 * Request parameters for v1ContactsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1ContactsDestroyRequest
 */
export interface V1ApiV1ContactsDestroyRequest {
    /**
     * A unique integer value identifying this simple contact.
     * @type {number}
     * @memberof V1ApiV1ContactsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1ContactsList operation in V1Api.
 * @export
 * @interface V1ApiV1ContactsListRequest
 */
export interface V1ApiV1ContactsListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1ContactsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1ContactsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1ContactsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1ContactsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1ContactsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ContactsPartialUpdateRequest
 */
export interface V1ApiV1ContactsPartialUpdateRequest {
    /**
     * A unique integer value identifying this simple contact.
     * @type {number}
     * @memberof V1ApiV1ContactsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedSimpleContactRequest}
     * @memberof V1ApiV1ContactsPartialUpdate
     */
    readonly patchedSimpleContactRequest?: PatchedSimpleContactRequest
}

/**
 * Request parameters for v1ContactsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1ContactsRetrieveRequest
 */
export interface V1ApiV1ContactsRetrieveRequest {
    /**
     * A unique integer value identifying this simple contact.
     * @type {number}
     * @memberof V1ApiV1ContactsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1ContactsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ContactsUpdateRequest
 */
export interface V1ApiV1ContactsUpdateRequest {
    /**
     * A unique integer value identifying this simple contact.
     * @type {number}
     * @memberof V1ApiV1ContactsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {SimpleContactRequest}
     * @memberof V1ApiV1ContactsUpdate
     */
    readonly simpleContactRequest: SimpleContactRequest
}

/**
 * Request parameters for v1CoreLanguagesList operation in V1Api.
 * @export
 * @interface V1ApiV1CoreLanguagesListRequest
 */
export interface V1ApiV1CoreLanguagesListRequest {
    /**
     * Несколько значений могут быть разделены запятыми.
     * @type {Array<number>}
     * @memberof V1ApiV1CoreLanguagesList
     */
    readonly idIn?: Array<number>

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreLanguagesList
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreLanguagesList
     */
    readonly isDefault?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1CoreLanguagesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1CoreLanguagesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1CoreLanguagesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1CoreLanguagesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1CoreLanguagesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1CoreLanguagesRetrieveRequest
 */
export interface V1ApiV1CoreLanguagesRetrieveRequest {
    /**
     * A unique integer value identifying this Language.
     * @type {number}
     * @memberof V1ApiV1CoreLanguagesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceAreasCreate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceAreasCreateRequest
 */
export interface V1ApiV1CoreServiceAreasCreateRequest {
    /**
     * 
     * @type {ServiceAreaCreateUpdateRequest}
     * @memberof V1ApiV1CoreServiceAreasCreate
     */
    readonly serviceAreaCreateUpdateRequest: ServiceAreaCreateUpdateRequest
}

/**
 * Request parameters for v1CoreServiceAreasDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceAreasDestroyRequest
 */
export interface V1ApiV1CoreServiceAreasDestroyRequest {
    /**
     * A unique integer value identifying this Service Area.
     * @type {number}
     * @memberof V1ApiV1CoreServiceAreasDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceAreasList operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceAreasListRequest
 */
export interface V1ApiV1CoreServiceAreasListRequest {
    /**
     * Несколько значений могут быть разделены запятыми.
     * @type {Array<number>}
     * @memberof V1ApiV1CoreServiceAreasList
     */
    readonly idIn?: Array<number>

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreServiceAreasList
     */
    readonly isActive?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1CoreServiceAreasList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1CoreServiceAreasList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1CoreServiceAreasList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1CoreServiceAreasList
     */
    readonly search?: string
}

/**
 * Request parameters for v1CoreServiceAreasPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceAreasPartialUpdateRequest
 */
export interface V1ApiV1CoreServiceAreasPartialUpdateRequest {
    /**
     * A unique integer value identifying this Service Area.
     * @type {number}
     * @memberof V1ApiV1CoreServiceAreasPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedServiceAreaCreateUpdateRequest}
     * @memberof V1ApiV1CoreServiceAreasPartialUpdate
     */
    readonly patchedServiceAreaCreateUpdateRequest?: PatchedServiceAreaCreateUpdateRequest
}

/**
 * Request parameters for v1CoreServiceAreasRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceAreasRetrieveRequest
 */
export interface V1ApiV1CoreServiceAreasRetrieveRequest {
    /**
     * A unique integer value identifying this Service Area.
     * @type {number}
     * @memberof V1ApiV1CoreServiceAreasRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceAreasUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceAreasUpdateRequest
 */
export interface V1ApiV1CoreServiceAreasUpdateRequest {
    /**
     * A unique integer value identifying this Service Area.
     * @type {number}
     * @memberof V1ApiV1CoreServiceAreasUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ServiceAreaCreateUpdateRequest}
     * @memberof V1ApiV1CoreServiceAreasUpdate
     */
    readonly serviceAreaCreateUpdateRequest: ServiceAreaCreateUpdateRequest
}

/**
 * Request parameters for v1CoreServiceCategoriesCreate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceCategoriesCreateRequest
 */
export interface V1ApiV1CoreServiceCategoriesCreateRequest {
    /**
     * 
     * @type {ServiceCategoryCreateUpdateRequest}
     * @memberof V1ApiV1CoreServiceCategoriesCreate
     */
    readonly serviceCategoryCreateUpdateRequest: ServiceCategoryCreateUpdateRequest
}

/**
 * Request parameters for v1CoreServiceCategoriesDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceCategoriesDestroyRequest
 */
export interface V1ApiV1CoreServiceCategoriesDestroyRequest {
    /**
     * A unique integer value identifying this Service Category.
     * @type {number}
     * @memberof V1ApiV1CoreServiceCategoriesDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceCategoriesList operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceCategoriesListRequest
 */
export interface V1ApiV1CoreServiceCategoriesListRequest {
    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreServiceCategoriesList
     */
    readonly featured?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreServiceCategoriesList
     */
    readonly isActive?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1CoreServiceCategoriesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1CoreServiceCategoriesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1CoreServiceCategoriesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1CoreServiceCategoriesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1CoreServiceCategoriesPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceCategoriesPartialUpdateRequest
 */
export interface V1ApiV1CoreServiceCategoriesPartialUpdateRequest {
    /**
     * A unique integer value identifying this Service Category.
     * @type {number}
     * @memberof V1ApiV1CoreServiceCategoriesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedServiceCategoryCreateUpdateRequest}
     * @memberof V1ApiV1CoreServiceCategoriesPartialUpdate
     */
    readonly patchedServiceCategoryCreateUpdateRequest?: PatchedServiceCategoryCreateUpdateRequest
}

/**
 * Request parameters for v1CoreServiceCategoriesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceCategoriesRetrieveRequest
 */
export interface V1ApiV1CoreServiceCategoriesRetrieveRequest {
    /**
     * A unique integer value identifying this Service Category.
     * @type {number}
     * @memberof V1ApiV1CoreServiceCategoriesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceCategoriesUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceCategoriesUpdateRequest
 */
export interface V1ApiV1CoreServiceCategoriesUpdateRequest {
    /**
     * A unique integer value identifying this Service Category.
     * @type {number}
     * @memberof V1ApiV1CoreServiceCategoriesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ServiceCategoryCreateUpdateRequest}
     * @memberof V1ApiV1CoreServiceCategoriesUpdate
     */
    readonly serviceCategoryCreateUpdateRequest: ServiceCategoryCreateUpdateRequest
}

/**
 * Request parameters for v1CoreServiceSubcategoriesCreate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceSubcategoriesCreateRequest
 */
export interface V1ApiV1CoreServiceSubcategoriesCreateRequest {
    /**
     * 
     * @type {ServiceSubcategoryCreateUpdateRequest}
     * @memberof V1ApiV1CoreServiceSubcategoriesCreate
     */
    readonly serviceSubcategoryCreateUpdateRequest: ServiceSubcategoryCreateUpdateRequest
}

/**
 * Request parameters for v1CoreServiceSubcategoriesDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceSubcategoriesDestroyRequest
 */
export interface V1ApiV1CoreServiceSubcategoriesDestroyRequest {
    /**
     * A unique integer value identifying this Service Subcategory.
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceSubcategoriesList operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceSubcategoriesListRequest
 */
export interface V1ApiV1CoreServiceSubcategoriesListRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly category?: number

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly featured?: boolean

    /**
     * Несколько значений могут быть разделены запятыми.
     * @type {Array<number>}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly idIn?: Array<number>

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly isActive?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1CoreServiceSubcategoriesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1CoreServiceSubcategoriesPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceSubcategoriesPartialUpdateRequest
 */
export interface V1ApiV1CoreServiceSubcategoriesPartialUpdateRequest {
    /**
     * A unique integer value identifying this Service Subcategory.
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedServiceSubcategoryCreateUpdateRequest}
     * @memberof V1ApiV1CoreServiceSubcategoriesPartialUpdate
     */
    readonly patchedServiceSubcategoryCreateUpdateRequest?: PatchedServiceSubcategoryCreateUpdateRequest
}

/**
 * Request parameters for v1CoreServiceSubcategoriesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceSubcategoriesRetrieveRequest
 */
export interface V1ApiV1CoreServiceSubcategoriesRetrieveRequest {
    /**
     * A unique integer value identifying this Service Subcategory.
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreServiceSubcategoriesUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreServiceSubcategoriesUpdateRequest
 */
export interface V1ApiV1CoreServiceSubcategoriesUpdateRequest {
    /**
     * A unique integer value identifying this Service Subcategory.
     * @type {number}
     * @memberof V1ApiV1CoreServiceSubcategoriesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {ServiceSubcategoryCreateUpdateRequest}
     * @memberof V1ApiV1CoreServiceSubcategoriesUpdate
     */
    readonly serviceSubcategoryCreateUpdateRequest: ServiceSubcategoryCreateUpdateRequest
}

/**
 * Request parameters for v1CoreSupportFaqCreate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSupportFaqCreateRequest
 */
export interface V1ApiV1CoreSupportFaqCreateRequest {
    /**
     * 
     * @type {SupportFAQCreateUpdateRequest}
     * @memberof V1ApiV1CoreSupportFaqCreate
     */
    readonly supportFAQCreateUpdateRequest: SupportFAQCreateUpdateRequest
}

/**
 * Request parameters for v1CoreSupportFaqDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSupportFaqDestroyRequest
 */
export interface V1ApiV1CoreSupportFaqDestroyRequest {
    /**
     * A unique integer value identifying this Support FAQ.
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreSupportFaqList operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSupportFaqListRequest
 */
export interface V1ApiV1CoreSupportFaqListRequest {
    /**
     * * &#x60;general&#x60; - Основная информация * &#x60;specialist&#x60; - Specialist * &#x60;reviews&#x60; - Reviews * &#x60;account&#x60; - Аккаунт * &#x60;search&#x60; - Найти * &#x60;safety&#x60; - Safety
     * @type {'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist'}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly category?: 'account' | 'general' | 'reviews' | 'safety' | 'search' | 'specialist'

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly isActive?: boolean

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly language?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1CoreSupportFaqList
     */
    readonly search?: string
}

/**
 * Request parameters for v1CoreSupportFaqPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSupportFaqPartialUpdateRequest
 */
export interface V1ApiV1CoreSupportFaqPartialUpdateRequest {
    /**
     * A unique integer value identifying this Support FAQ.
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedSupportFAQCreateUpdateRequest}
     * @memberof V1ApiV1CoreSupportFaqPartialUpdate
     */
    readonly patchedSupportFAQCreateUpdateRequest?: PatchedSupportFAQCreateUpdateRequest
}

/**
 * Request parameters for v1CoreSupportFaqRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSupportFaqRetrieveRequest
 */
export interface V1ApiV1CoreSupportFaqRetrieveRequest {
    /**
     * A unique integer value identifying this Support FAQ.
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreSupportFaqUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSupportFaqUpdateRequest
 */
export interface V1ApiV1CoreSupportFaqUpdateRequest {
    /**
     * A unique integer value identifying this Support FAQ.
     * @type {number}
     * @memberof V1ApiV1CoreSupportFaqUpdate
     */
    readonly id: number

    /**
     * 
     * @type {SupportFAQCreateUpdateRequest}
     * @memberof V1ApiV1CoreSupportFaqUpdate
     */
    readonly supportFAQCreateUpdateRequest: SupportFAQCreateUpdateRequest
}

/**
 * Request parameters for v1CoreSystemSettingsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSystemSettingsCreateRequest
 */
export interface V1ApiV1CoreSystemSettingsCreateRequest {
    /**
     * 
     * @type {SystemSettingsCreateUpdateRequest}
     * @memberof V1ApiV1CoreSystemSettingsCreate
     */
    readonly systemSettingsCreateUpdateRequest: SystemSettingsCreateUpdateRequest
}

/**
 * Request parameters for v1CoreSystemSettingsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSystemSettingsDestroyRequest
 */
export interface V1ApiV1CoreSystemSettingsDestroyRequest {
    /**
     * A unique integer value identifying this System Setting.
     * @type {number}
     * @memberof V1ApiV1CoreSystemSettingsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreSystemSettingsList operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSystemSettingsListRequest
 */
export interface V1ApiV1CoreSystemSettingsListRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1CoreSystemSettingsList
     */
    readonly category?: string

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1CoreSystemSettingsList
     */
    readonly isActive?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1CoreSystemSettingsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1CoreSystemSettingsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1CoreSystemSettingsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1CoreSystemSettingsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1CoreSystemSettingsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSystemSettingsPartialUpdateRequest
 */
export interface V1ApiV1CoreSystemSettingsPartialUpdateRequest {
    /**
     * A unique integer value identifying this System Setting.
     * @type {number}
     * @memberof V1ApiV1CoreSystemSettingsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedSystemSettingsCreateUpdateRequest}
     * @memberof V1ApiV1CoreSystemSettingsPartialUpdate
     */
    readonly patchedSystemSettingsCreateUpdateRequest?: PatchedSystemSettingsCreateUpdateRequest
}

/**
 * Request parameters for v1CoreSystemSettingsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSystemSettingsRetrieveRequest
 */
export interface V1ApiV1CoreSystemSettingsRetrieveRequest {
    /**
     * A unique integer value identifying this System Setting.
     * @type {number}
     * @memberof V1ApiV1CoreSystemSettingsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1CoreSystemSettingsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1CoreSystemSettingsUpdateRequest
 */
export interface V1ApiV1CoreSystemSettingsUpdateRequest {
    /**
     * A unique integer value identifying this System Setting.
     * @type {number}
     * @memberof V1ApiV1CoreSystemSettingsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {SystemSettingsCreateUpdateRequest}
     * @memberof V1ApiV1CoreSystemSettingsUpdate
     */
    readonly systemSettingsCreateUpdateRequest: SystemSettingsCreateUpdateRequest
}

/**
 * Request parameters for v1HomeMasterNewJobsList operation in V1Api.
 * @export
 * @interface V1ApiV1HomeMasterNewJobsListRequest
 */
export interface V1ApiV1HomeMasterNewJobsListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1HomeMasterNewJobsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1HomeMasterNewJobsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1HomeMasterNewJobsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1HomeMasterNewJobsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1JobAssignmentsComplete operation in V1Api.
 * @export
 * @interface V1ApiV1JobAssignmentsCompleteRequest
 */
export interface V1ApiV1JobAssignmentsCompleteRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobAssignmentsComplete
     */
    readonly id: string

    /**
     * 
     * @type {JobAssignmentCompletionRequest}
     * @memberof V1ApiV1JobAssignmentsComplete
     */
    readonly jobAssignmentCompletionRequest?: JobAssignmentCompletionRequest
}

/**
 * Request parameters for v1JobAssignmentsStart operation in V1Api.
 * @export
 * @interface V1ApiV1JobAssignmentsStartRequest
 */
export interface V1ApiV1JobAssignmentsStartRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobAssignmentsStart
     */
    readonly id: string

    /**
     * 
     * @type {JobAssignmentRequest}
     * @memberof V1ApiV1JobAssignmentsStart
     */
    readonly jobAssignmentRequest?: JobAssignmentRequest
}

/**
 * Request parameters for v1JobsApply operation in V1Api.
 * @export
 * @interface V1ApiV1JobsApplyRequest
 */
export interface V1ApiV1JobsApplyRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsApply
     */
    readonly id: number

    /**
     * 
     * @type {JobApplyRequest}
     * @memberof V1ApiV1JobsApply
     */
    readonly jobApplyRequest: JobApplyRequest
}

/**
 * Request parameters for v1JobsAttachmentsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1JobsAttachmentsCreateRequest
 */
export interface V1ApiV1JobsAttachmentsCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobsAttachmentsCreate
     */
    readonly jobId: string

    /**
     * 
     * @type {Array<any>}
     * @memberof V1ApiV1JobsAttachmentsCreate
     */
    readonly files: Array<any>
}

/**
 * Request parameters for v1JobsAttachmentsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1JobsAttachmentsDestroyRequest
 */
export interface V1ApiV1JobsAttachmentsDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobsAttachmentsDestroy
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobsAttachmentsDestroy
     */
    readonly jobId: string
}

/**
 * Request parameters for v1JobsAttachmentsList operation in V1Api.
 * @export
 * @interface V1ApiV1JobsAttachmentsListRequest
 */
export interface V1ApiV1JobsAttachmentsListRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobsAttachmentsList
     */
    readonly jobId: string

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1JobsAttachmentsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1JobsAttachmentsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1JobsAttachmentsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1JobsAttachmentsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1JobsBookmark operation in V1Api.
 * @export
 * @interface V1ApiV1JobsBookmarkRequest
 */
export interface V1ApiV1JobsBookmarkRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsBookmark
     */
    readonly id: number

    /**
     * 
     * @type {JobRequest}
     * @memberof V1ApiV1JobsBookmark
     */
    readonly jobRequest: JobRequest
}

/**
 * Request parameters for v1JobsCancel operation in V1Api.
 * @export
 * @interface V1ApiV1JobsCancelRequest
 */
export interface V1ApiV1JobsCancelRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsCancel
     */
    readonly id: number

    /**
     * 
     * @type {JobRequest}
     * @memberof V1ApiV1JobsCancel
     */
    readonly jobRequest: JobRequest
}

/**
 * Request parameters for v1JobsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1JobsCreateRequest
 */
export interface V1ApiV1JobsCreateRequest {
    /**
     * 
     * @type {JobRequest}
     * @memberof V1ApiV1JobsCreate
     */
    readonly jobRequest: JobRequest
}

/**
 * Request parameters for v1JobsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1JobsDestroyRequest
 */
export interface V1ApiV1JobsDestroyRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1JobsFavorite operation in V1Api.
 * @export
 * @interface V1ApiV1JobsFavoriteRequest
 */
export interface V1ApiV1JobsFavoriteRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsFavorite
     */
    readonly id: number

    /**
     * 
     * @type {JobRequest}
     * @memberof V1ApiV1JobsFavorite
     */
    readonly jobRequest: JobRequest
}

/**
 * Request parameters for v1JobsList operation in V1Api.
 * @export
 * @interface V1ApiV1JobsListRequest
 */
export interface V1ApiV1JobsListRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobsList
     */
    readonly city?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1JobsList
     */
    readonly maxPrice?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1JobsList
     */
    readonly minPrice?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1JobsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1JobsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1JobsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1JobsList
     */
    readonly search?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1JobsList
     */
    readonly serviceCategory?: number

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobsList
     */
    readonly serviceDateFrom?: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobsList
     */
    readonly serviceDateTo?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1JobsList
     */
    readonly serviceSubcategory?: number

    /**
     * * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @type {'high' | 'low' | 'medium' | 'urgent'}
     * @memberof V1ApiV1JobsList
     */
    readonly urgency?: 'high' | 'low' | 'medium' | 'urgent'
}

/**
 * Request parameters for v1JobsMasterHistory operation in V1Api.
 * @export
 * @interface V1ApiV1JobsMasterHistoryRequest
 */
export interface V1ApiV1JobsMasterHistoryRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobsMasterHistory
     */
    readonly city?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1JobsMasterHistory
     */
    readonly maxPrice?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1JobsMasterHistory
     */
    readonly minPrice?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1JobsMasterHistory
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1JobsMasterHistory
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1JobsMasterHistory
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1JobsMasterHistory
     */
    readonly search?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1JobsMasterHistory
     */
    readonly serviceCategory?: number

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobsMasterHistory
     */
    readonly serviceDateFrom?: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobsMasterHistory
     */
    readonly serviceDateTo?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1JobsMasterHistory
     */
    readonly serviceSubcategory?: number

    /**
     * * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @type {'high' | 'low' | 'medium' | 'urgent'}
     * @memberof V1ApiV1JobsMasterHistory
     */
    readonly urgency?: 'high' | 'low' | 'medium' | 'urgent'
}

/**
 * Request parameters for v1JobsMasterInProgress operation in V1Api.
 * @export
 * @interface V1ApiV1JobsMasterInProgressRequest
 */
export interface V1ApiV1JobsMasterInProgressRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobsMasterInProgress
     */
    readonly city?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1JobsMasterInProgress
     */
    readonly maxPrice?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1JobsMasterInProgress
     */
    readonly minPrice?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1JobsMasterInProgress
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1JobsMasterInProgress
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1JobsMasterInProgress
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1JobsMasterInProgress
     */
    readonly search?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1JobsMasterInProgress
     */
    readonly serviceCategory?: number

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobsMasterInProgress
     */
    readonly serviceDateFrom?: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1JobsMasterInProgress
     */
    readonly serviceDateTo?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1JobsMasterInProgress
     */
    readonly serviceSubcategory?: number

    /**
     * * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @type {'high' | 'low' | 'medium' | 'urgent'}
     * @memberof V1ApiV1JobsMasterInProgress
     */
    readonly urgency?: 'high' | 'low' | 'medium' | 'urgent'
}

/**
 * Request parameters for v1JobsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1JobsPartialUpdateRequest
 */
export interface V1ApiV1JobsPartialUpdateRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedJobRequest}
     * @memberof V1ApiV1JobsPartialUpdate
     */
    readonly patchedJobRequest?: PatchedJobRequest
}

/**
 * Request parameters for v1JobsPublish operation in V1Api.
 * @export
 * @interface V1ApiV1JobsPublishRequest
 */
export interface V1ApiV1JobsPublishRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsPublish
     */
    readonly id: number

    /**
     * 
     * @type {JobRequest}
     * @memberof V1ApiV1JobsPublish
     */
    readonly jobRequest: JobRequest
}

/**
 * Request parameters for v1JobsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1JobsRetrieveRequest
 */
export interface V1ApiV1JobsRetrieveRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1JobsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1JobsUpdateRequest
 */
export interface V1ApiV1JobsUpdateRequest {
    /**
     * A unique integer value identifying this Job.
     * @type {number}
     * @memberof V1ApiV1JobsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {JobRequest}
     * @memberof V1ApiV1JobsUpdate
     */
    readonly jobRequest: JobRequest
}

/**
 * Request parameters for v1LocationsCitiesCreate operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCitiesCreateRequest
 */
export interface V1ApiV1LocationsCitiesCreateRequest {
    /**
     * 
     * @type {CityRequest}
     * @memberof V1ApiV1LocationsCitiesCreate
     */
    readonly cityRequest: CityRequest
}

/**
 * Request parameters for v1LocationsCitiesDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCitiesDestroyRequest
 */
export interface V1ApiV1LocationsCitiesDestroyRequest {
    /**
     * A unique integer value identifying this City.
     * @type {number}
     * @memberof V1ApiV1LocationsCitiesDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1LocationsCitiesList operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCitiesListRequest
 */
export interface V1ApiV1LocationsCitiesListRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1LocationsCitiesList
     */
    readonly country?: number

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1LocationsCitiesList
     */
    readonly isDeleted?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1LocationsCitiesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1LocationsCitiesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1LocationsCitiesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1LocationsCitiesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1LocationsCitiesPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCitiesPartialUpdateRequest
 */
export interface V1ApiV1LocationsCitiesPartialUpdateRequest {
    /**
     * A unique integer value identifying this City.
     * @type {number}
     * @memberof V1ApiV1LocationsCitiesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedCityRequest}
     * @memberof V1ApiV1LocationsCitiesPartialUpdate
     */
    readonly patchedCityRequest?: PatchedCityRequest
}

/**
 * Request parameters for v1LocationsCitiesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCitiesRetrieveRequest
 */
export interface V1ApiV1LocationsCitiesRetrieveRequest {
    /**
     * A unique integer value identifying this City.
     * @type {number}
     * @memberof V1ApiV1LocationsCitiesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1LocationsCitiesUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCitiesUpdateRequest
 */
export interface V1ApiV1LocationsCitiesUpdateRequest {
    /**
     * A unique integer value identifying this City.
     * @type {number}
     * @memberof V1ApiV1LocationsCitiesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {CityRequest}
     * @memberof V1ApiV1LocationsCitiesUpdate
     */
    readonly cityRequest: CityRequest
}

/**
 * Request parameters for v1LocationsCountriesCreate operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCountriesCreateRequest
 */
export interface V1ApiV1LocationsCountriesCreateRequest {
    /**
     * 
     * @type {CountryRequest}
     * @memberof V1ApiV1LocationsCountriesCreate
     */
    readonly countryRequest: CountryRequest
}

/**
 * Request parameters for v1LocationsCountriesDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCountriesDestroyRequest
 */
export interface V1ApiV1LocationsCountriesDestroyRequest {
    /**
     * A unique integer value identifying this Country.
     * @type {number}
     * @memberof V1ApiV1LocationsCountriesDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1LocationsCountriesList operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCountriesListRequest
 */
export interface V1ApiV1LocationsCountriesListRequest {
    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1LocationsCountriesList
     */
    readonly isDeleted?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1LocationsCountriesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1LocationsCountriesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1LocationsCountriesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1LocationsCountriesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1LocationsCountriesPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCountriesPartialUpdateRequest
 */
export interface V1ApiV1LocationsCountriesPartialUpdateRequest {
    /**
     * A unique integer value identifying this Country.
     * @type {number}
     * @memberof V1ApiV1LocationsCountriesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedCountryRequest}
     * @memberof V1ApiV1LocationsCountriesPartialUpdate
     */
    readonly patchedCountryRequest?: PatchedCountryRequest
}

/**
 * Request parameters for v1LocationsCountriesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCountriesRetrieveRequest
 */
export interface V1ApiV1LocationsCountriesRetrieveRequest {
    /**
     * A unique integer value identifying this Country.
     * @type {number}
     * @memberof V1ApiV1LocationsCountriesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1LocationsCountriesUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1LocationsCountriesUpdateRequest
 */
export interface V1ApiV1LocationsCountriesUpdateRequest {
    /**
     * A unique integer value identifying this Country.
     * @type {number}
     * @memberof V1ApiV1LocationsCountriesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {CountryRequest}
     * @memberof V1ApiV1LocationsCountriesUpdate
     */
    readonly countryRequest: CountryRequest
}

/**
 * Request parameters for v1NotificationsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsCreateRequest
 */
export interface V1ApiV1NotificationsCreateRequest {
    /**
     * 
     * @type {NotificationCreateRequest}
     * @memberof V1ApiV1NotificationsCreate
     */
    readonly notificationCreateRequest: NotificationCreateRequest
}

/**
 * Request parameters for v1NotificationsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsDestroyRequest
 */
export interface V1ApiV1NotificationsDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1NotificationsDestroy
     */
    readonly id: string
}

/**
 * Request parameters for v1NotificationsList operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsListRequest
 */
export interface V1ApiV1NotificationsListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1NotificationsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1NotificationsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1NotificationsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1NotificationsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1NotificationsMarkAllRead operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsMarkAllReadRequest
 */
export interface V1ApiV1NotificationsMarkAllReadRequest {
    /**
     * 
     * @type {NotificationRequest}
     * @memberof V1ApiV1NotificationsMarkAllRead
     */
    readonly notificationRequest: NotificationRequest
}

/**
 * Request parameters for v1NotificationsMarkRead operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsMarkReadRequest
 */
export interface V1ApiV1NotificationsMarkReadRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1NotificationsMarkRead
     */
    readonly id: string

    /**
     * 
     * @type {NotificationRequest}
     * @memberof V1ApiV1NotificationsMarkRead
     */
    readonly notificationRequest: NotificationRequest
}

/**
 * Request parameters for v1NotificationsMarkUnread operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsMarkUnreadRequest
 */
export interface V1ApiV1NotificationsMarkUnreadRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1NotificationsMarkUnread
     */
    readonly id: string

    /**
     * 
     * @type {NotificationRequest}
     * @memberof V1ApiV1NotificationsMarkUnread
     */
    readonly notificationRequest: NotificationRequest
}

/**
 * Request parameters for v1NotificationsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsPartialUpdateRequest
 */
export interface V1ApiV1NotificationsPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1NotificationsPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PatchedNotificationUpdateRequest}
     * @memberof V1ApiV1NotificationsPartialUpdate
     */
    readonly patchedNotificationUpdateRequest?: PatchedNotificationUpdateRequest
}

/**
 * Request parameters for v1NotificationsRecent operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsRecentRequest
 */
export interface V1ApiV1NotificationsRecentRequest {
    /**
     * Number of days to look back
     * @type {number}
     * @memberof V1ApiV1NotificationsRecent
     */
    readonly days?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1NotificationsRecent
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1NotificationsRecent
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1NotificationsRecent
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1NotificationsRecent
     */
    readonly search?: string
}

/**
 * Request parameters for v1NotificationsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsRetrieveRequest
 */
export interface V1ApiV1NotificationsRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1NotificationsRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for v1NotificationsUnread operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsUnreadRequest
 */
export interface V1ApiV1NotificationsUnreadRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1NotificationsUnread
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1NotificationsUnread
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1NotificationsUnread
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1NotificationsUnread
     */
    readonly search?: string
}

/**
 * Request parameters for v1NotificationsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1NotificationsUpdateRequest
 */
export interface V1ApiV1NotificationsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1NotificationsUpdate
     */
    readonly id: string

    /**
     * 
     * @type {NotificationUpdateRequest}
     * @memberof V1ApiV1NotificationsUpdate
     */
    readonly notificationUpdateRequest?: NotificationUpdateRequest
}

/**
 * Request parameters for v1ProfileNotificationSettingsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ProfileNotificationSettingsPartialUpdateRequest
 */
export interface V1ApiV1ProfileNotificationSettingsPartialUpdateRequest {
    /**
     * 
     * @type {PatchedUserNotificationSettingsRequest}
     * @memberof V1ApiV1ProfileNotificationSettingsPartialUpdate
     */
    readonly patchedUserNotificationSettingsRequest?: PatchedUserNotificationSettingsRequest
}

/**
 * Request parameters for v1ProfileNotificationSettingsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ProfileNotificationSettingsUpdateRequest
 */
export interface V1ApiV1ProfileNotificationSettingsUpdateRequest {
    /**
     * 
     * @type {UserNotificationSettingsRequest}
     * @memberof V1ApiV1ProfileNotificationSettingsUpdate
     */
    readonly userNotificationSettingsRequest?: UserNotificationSettingsRequest
}

/**
 * Request parameters for v1ProfilePartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ProfilePartialUpdateRequest
 */
export interface V1ApiV1ProfilePartialUpdateRequest {
    /**
     * 
     * @type {PatchedUserUpdateRequest}
     * @memberof V1ApiV1ProfilePartialUpdate
     */
    readonly patchedUserUpdateRequest?: PatchedUserUpdateRequest
}

/**
 * Request parameters for v1ProfileUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ProfileUpdateRequest
 */
export interface V1ApiV1ProfileUpdateRequest {
    /**
     * 
     * @type {UserUpdateRequest}
     * @memberof V1ApiV1ProfileUpdate
     */
    readonly userUpdateRequest?: UserUpdateRequest
}

/**
 * Request parameters for v1ResumesArchive operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesArchiveRequest
 */
export interface V1ApiV1ResumesArchiveRequest {
    /**
     * A unique integer value identifying this master resume.
     * @type {number}
     * @memberof V1ApiV1ResumesArchive
     */
    readonly id: number

    /**
     * 
     * @type {MasterResumeRequest}
     * @memberof V1ApiV1ResumesArchive
     */
    readonly masterResumeRequest: MasterResumeRequest
}

/**
 * Request parameters for v1ResumesCreate operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesCreateRequest
 */
export interface V1ApiV1ResumesCreateRequest {
    /**
     * 
     * @type {MasterResumeRequest}
     * @memberof V1ApiV1ResumesCreate
     */
    readonly masterResumeRequest: MasterResumeRequest
}

/**
 * Request parameters for v1ResumesDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesDestroyRequest
 */
export interface V1ApiV1ResumesDestroyRequest {
    /**
     * A unique integer value identifying this master resume.
     * @type {number}
     * @memberof V1ApiV1ResumesDestroy
     */
    readonly id: number
}

/**
 * Request parameters for v1ResumesList operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesListRequest
 */
export interface V1ApiV1ResumesListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1ResumesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1ResumesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1ResumesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1ResumesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1ResumesPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesPartialUpdateRequest
 */
export interface V1ApiV1ResumesPartialUpdateRequest {
    /**
     * A unique integer value identifying this master resume.
     * @type {number}
     * @memberof V1ApiV1ResumesPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedMasterResumeRequest}
     * @memberof V1ApiV1ResumesPartialUpdate
     */
    readonly patchedMasterResumeRequest?: PatchedMasterResumeRequest
}

/**
 * Request parameters for v1ResumesPublish operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesPublishRequest
 */
export interface V1ApiV1ResumesPublishRequest {
    /**
     * A unique integer value identifying this master resume.
     * @type {number}
     * @memberof V1ApiV1ResumesPublish
     */
    readonly id: number

    /**
     * 
     * @type {MasterResumeRequest}
     * @memberof V1ApiV1ResumesPublish
     */
    readonly masterResumeRequest: MasterResumeRequest
}

/**
 * Request parameters for v1ResumesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesRetrieveRequest
 */
export interface V1ApiV1ResumesRetrieveRequest {
    /**
     * A unique integer value identifying this master resume.
     * @type {number}
     * @memberof V1ApiV1ResumesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1ResumesUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1ResumesUpdateRequest
 */
export interface V1ApiV1ResumesUpdateRequest {
    /**
     * A unique integer value identifying this master resume.
     * @type {number}
     * @memberof V1ApiV1ResumesUpdate
     */
    readonly id: number

    /**
     * 
     * @type {MasterResumeRequest}
     * @memberof V1ApiV1ResumesUpdate
     */
    readonly masterResumeRequest: MasterResumeRequest
}

/**
 * Request parameters for v1ReviewsAnalyticsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1ReviewsAnalyticsRetrieveRequest
 */
export interface V1ApiV1ReviewsAnalyticsRetrieveRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsAnalyticsRetrieve
     */
    readonly masterId: number
}

/**
 * Request parameters for v1ReviewsAssignmentsList operation in V1Api.
 * @export
 * @interface V1ApiV1ReviewsAssignmentsListRequest
 */
export interface V1ApiV1ReviewsAssignmentsListRequest {
    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1ReviewsAssignmentsList
     */
    readonly isVerified?: boolean

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsAssignmentsList
     */
    readonly job?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsAssignmentsList
     */
    readonly master?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1ReviewsAssignmentsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1ReviewsAssignmentsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1ReviewsAssignmentsList
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsAssignmentsList
     */
    readonly rating?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1ReviewsAssignmentsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1ReviewsJobList operation in V1Api.
 * @export
 * @interface V1ApiV1ReviewsJobListRequest
 */
export interface V1ApiV1ReviewsJobListRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsJobList
     */
    readonly jobId: number

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1ReviewsJobList
     */
    readonly isVerified?: boolean

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsJobList
     */
    readonly job?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsJobList
     */
    readonly master?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1ReviewsJobList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1ReviewsJobList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1ReviewsJobList
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsJobList
     */
    readonly rating?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1ReviewsJobList
     */
    readonly search?: string
}

/**
 * Request parameters for v1ReviewsList operation in V1Api.
 * @export
 * @interface V1ApiV1ReviewsListRequest
 */
export interface V1ApiV1ReviewsListRequest {
    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1ReviewsList
     */
    readonly isVerified?: boolean

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsList
     */
    readonly job?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsList
     */
    readonly master?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1ReviewsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1ReviewsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1ReviewsList
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsList
     */
    readonly rating?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1ReviewsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1ReviewsMasterList operation in V1Api.
 * @export
 * @interface V1ApiV1ReviewsMasterListRequest
 */
export interface V1ApiV1ReviewsMasterListRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsMasterList
     */
    readonly masterId: number

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1ReviewsMasterList
     */
    readonly isVerified?: boolean

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsMasterList
     */
    readonly job?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsMasterList
     */
    readonly master?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1ReviewsMasterList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1ReviewsMasterList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1ReviewsMasterList
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1ReviewsMasterList
     */
    readonly rating?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1ReviewsMasterList
     */
    readonly search?: string
}

/**
 * Request parameters for v1ReviewsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1ReviewsRetrieveRequest
 */
export interface V1ApiV1ReviewsRetrieveRequest {
    /**
     * A unique integer value identifying this Review.
     * @type {number}
     * @memberof V1ApiV1ReviewsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1SearchJobsList operation in V1Api.
 * @export
 * @interface V1ApiV1SearchJobsListRequest
 */
export interface V1ApiV1SearchJobsListRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1SearchJobsList
     */
    readonly budgetMaxLte?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1SearchJobsList
     */
    readonly budgetMinGte?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1SearchJobsList
     */
    readonly city?: number

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1SearchJobsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1SearchJobsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1SearchJobsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1SearchJobsList
     */
    readonly search?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1SearchJobsList
     */
    readonly serviceSubcategoryCategory?: number

    /**
     * * &#x60;draft&#x60; - Draft * &#x60;published&#x60; - Published * &#x60;assigned&#x60; - Assigned * &#x60;in_progress&#x60; - In Progress * &#x60;completed&#x60; - Completed * &#x60;cancelled&#x60; - Cancelled
     * @type {'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published'}
     * @memberof V1ApiV1SearchJobsList
     */
    readonly status?: 'assigned' | 'cancelled' | 'completed' | 'draft' | 'in_progress' | 'published'

    /**
     * * &#x60;low&#x60; - Low * &#x60;medium&#x60; - Medium * &#x60;high&#x60; - High * &#x60;urgent&#x60; - Urgent
     * @type {'high' | 'low' | 'medium' | 'urgent'}
     * @memberof V1ApiV1SearchJobsList
     */
    readonly urgency?: 'high' | 'low' | 'medium' | 'urgent'
}

/**
 * Request parameters for v1SearchMastersList operation in V1Api.
 * @export
 * @interface V1ApiV1SearchMastersListRequest
 */
export interface V1ApiV1SearchMastersListRequest {
    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1SearchMastersList
     */
    readonly isAvailable?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1SearchMastersList
     */
    readonly isTopMaster?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1SearchMastersList
     */
    readonly isVerifiedProvider?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1SearchMastersList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1SearchMastersList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1SearchMastersList
     */
    readonly pageSize?: number

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1SearchMastersList
     */
    readonly profession?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1SearchMastersList
     */
    readonly search?: string

    /**
     * 
     * @type {number}
     * @memberof V1ApiV1SearchMastersList
     */
    readonly servicesOfferedCategory?: number
}

/**
 * Request parameters for v1UsersMastersDetails operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMastersDetailsRequest
 */
export interface V1ApiV1UsersMastersDetailsRequest {
    /**
     * A unique integer value identifying this Master Profile.
     * @type {number}
     * @memberof V1ApiV1UsersMastersDetails
     */
    readonly id: number
}

/**
 * Request parameters for v1UsersMastersList operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMastersListRequest
 */
export interface V1ApiV1UsersMastersListRequest {
    /**
     * Несколько значений могут быть разделены запятыми.
     * @type {Array<number>}
     * @memberof V1ApiV1UsersMastersList
     */
    readonly idIn?: Array<number>

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1UsersMastersList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1UsersMastersList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1UsersMastersList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1UsersMastersList
     */
    readonly search?: string
}

/**
 * Request parameters for v1UsersMastersRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMastersRetrieveRequest
 */
export interface V1ApiV1UsersMastersRetrieveRequest {
    /**
     * A unique integer value identifying this Master Profile.
     * @type {number}
     * @memberof V1ApiV1UsersMastersRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1UsersMastersUpdateOnlineStatus operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMastersUpdateOnlineStatusRequest
 */
export interface V1ApiV1UsersMastersUpdateOnlineStatusRequest {
    /**
     * 
     * @type {MasterOnlineStatusRequestRequest}
     * @memberof V1ApiV1UsersMastersUpdateOnlineStatus
     */
    readonly masterOnlineStatusRequestRequest?: MasterOnlineStatusRequestRequest
}

/**
 * Request parameters for v1UsersMyCertificatesCreate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyCertificatesCreateRequest
 */
export interface V1ApiV1UsersMyCertificatesCreateRequest {
    /**
     * 
     * @type {CertificateRequest}
     * @memberof V1ApiV1UsersMyCertificatesCreate
     */
    readonly certificateRequest: CertificateRequest
}

/**
 * Request parameters for v1UsersMyCertificatesDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyCertificatesDestroyRequest
 */
export interface V1ApiV1UsersMyCertificatesDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyCertificatesDestroy
     */
    readonly id: string
}

/**
 * Request parameters for v1UsersMyCertificatesList operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyCertificatesListRequest
 */
export interface V1ApiV1UsersMyCertificatesListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1UsersMyCertificatesList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1UsersMyCertificatesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1UsersMyCertificatesList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1UsersMyCertificatesList
     */
    readonly search?: string
}

/**
 * Request parameters for v1UsersMyCertificatesPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyCertificatesPartialUpdateRequest
 */
export interface V1ApiV1UsersMyCertificatesPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyCertificatesPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PatchedCertificateRequest}
     * @memberof V1ApiV1UsersMyCertificatesPartialUpdate
     */
    readonly patchedCertificateRequest?: PatchedCertificateRequest
}

/**
 * Request parameters for v1UsersMyCertificatesRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyCertificatesRetrieveRequest
 */
export interface V1ApiV1UsersMyCertificatesRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyCertificatesRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for v1UsersMyCertificatesUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyCertificatesUpdateRequest
 */
export interface V1ApiV1UsersMyCertificatesUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyCertificatesUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CertificateRequest}
     * @memberof V1ApiV1UsersMyCertificatesUpdate
     */
    readonly certificateRequest: CertificateRequest
}

/**
 * Request parameters for v1UsersMyEmployerCreateCreate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyEmployerCreateCreateRequest
 */
export interface V1ApiV1UsersMyEmployerCreateCreateRequest {
    /**
     * 
     * @type {EmployerProfileCreateUpdateRequest}
     * @memberof V1ApiV1UsersMyEmployerCreateCreate
     */
    readonly employerProfileCreateUpdateRequest?: EmployerProfileCreateUpdateRequest
}

/**
 * Request parameters for v1UsersMyEmployerPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyEmployerPartialUpdateRequest
 */
export interface V1ApiV1UsersMyEmployerPartialUpdateRequest {
    /**
     * 
     * @type {PatchedEmployerProfileCreateUpdateRequest}
     * @memberof V1ApiV1UsersMyEmployerPartialUpdate
     */
    readonly patchedEmployerProfileCreateUpdateRequest?: PatchedEmployerProfileCreateUpdateRequest
}

/**
 * Request parameters for v1UsersMyEmployerUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyEmployerUpdateRequest
 */
export interface V1ApiV1UsersMyEmployerUpdateRequest {
    /**
     * 
     * @type {EmployerProfileCreateUpdateRequest}
     * @memberof V1ApiV1UsersMyEmployerUpdate
     */
    readonly employerProfileCreateUpdateRequest?: EmployerProfileCreateUpdateRequest
}

/**
 * Request parameters for v1UsersMyMasterCreateCreate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyMasterCreateCreateRequest
 */
export interface V1ApiV1UsersMyMasterCreateCreateRequest {
    /**
     * 
     * @type {MasterProfileCreateUpdateRequest}
     * @memberof V1ApiV1UsersMyMasterCreateCreate
     */
    readonly masterProfileCreateUpdateRequest?: MasterProfileCreateUpdateRequest
}

/**
 * Request parameters for v1UsersMyMasterPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyMasterPartialUpdateRequest
 */
export interface V1ApiV1UsersMyMasterPartialUpdateRequest {
    /**
     * 
     * @type {PatchedMasterProfileCreateUpdateRequest}
     * @memberof V1ApiV1UsersMyMasterPartialUpdate
     */
    readonly patchedMasterProfileCreateUpdateRequest?: PatchedMasterProfileCreateUpdateRequest
}

/**
 * Request parameters for v1UsersMyMasterUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyMasterUpdateRequest
 */
export interface V1ApiV1UsersMyMasterUpdateRequest {
    /**
     * 
     * @type {MasterProfileCreateUpdateRequest}
     * @memberof V1ApiV1UsersMyMasterUpdate
     */
    readonly masterProfileCreateUpdateRequest?: MasterProfileCreateUpdateRequest
}

/**
 * Request parameters for v1UsersMyPortfolioAttachmentsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioAttachmentsCreateRequest
 */
export interface V1ApiV1UsersMyPortfolioAttachmentsCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioAttachmentsCreate
     */
    readonly portfolioId: string

    /**
     * 
     * @type {Array<any>}
     * @memberof V1ApiV1UsersMyPortfolioAttachmentsCreate
     */
    readonly files: Array<any>
}

/**
 * Request parameters for v1UsersMyPortfolioAttachmentsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioAttachmentsDestroyRequest
 */
export interface V1ApiV1UsersMyPortfolioAttachmentsDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioAttachmentsDestroy
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioAttachmentsDestroy
     */
    readonly portfolioId: string
}

/**
 * Request parameters for v1UsersMyPortfolioAttachmentsList operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioAttachmentsListRequest
 */
export interface V1ApiV1UsersMyPortfolioAttachmentsListRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioAttachmentsList
     */
    readonly portfolioId: string

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioAttachmentsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1UsersMyPortfolioAttachmentsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1UsersMyPortfolioAttachmentsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioAttachmentsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1UsersMyPortfolioCreate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioCreateRequest
 */
export interface V1ApiV1UsersMyPortfolioCreateRequest {
    /**
     * 
     * @type {PortfolioItemRequest}
     * @memberof V1ApiV1UsersMyPortfolioCreate
     */
    readonly portfolioItemRequest: PortfolioItemRequest
}

/**
 * Request parameters for v1UsersMyPortfolioDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioDestroyRequest
 */
export interface V1ApiV1UsersMyPortfolioDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioDestroy
     */
    readonly id: string
}

/**
 * Request parameters for v1UsersMyPortfolioList operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioListRequest
 */
export interface V1ApiV1UsersMyPortfolioListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1UsersMyPortfolioList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1UsersMyPortfolioList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioList
     */
    readonly search?: string
}

/**
 * Request parameters for v1UsersMyPortfolioPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioPartialUpdateRequest
 */
export interface V1ApiV1UsersMyPortfolioPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PatchedPortfolioItemRequest}
     * @memberof V1ApiV1UsersMyPortfolioPartialUpdate
     */
    readonly patchedPortfolioItemRequest?: PatchedPortfolioItemRequest
}

/**
 * Request parameters for v1UsersMyPortfolioRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioRetrieveRequest
 */
export interface V1ApiV1UsersMyPortfolioRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for v1UsersMyPortfolioUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMyPortfolioUpdateRequest
 */
export interface V1ApiV1UsersMyPortfolioUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMyPortfolioUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PortfolioItemRequest}
     * @memberof V1ApiV1UsersMyPortfolioUpdate
     */
    readonly portfolioItemRequest: PortfolioItemRequest
}

/**
 * Request parameters for v1UsersMySkillsCreate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMySkillsCreateRequest
 */
export interface V1ApiV1UsersMySkillsCreateRequest {
    /**
     * 
     * @type {MasterSkillRequest}
     * @memberof V1ApiV1UsersMySkillsCreate
     */
    readonly masterSkillRequest: MasterSkillRequest
}

/**
 * Request parameters for v1UsersMySkillsDestroy operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMySkillsDestroyRequest
 */
export interface V1ApiV1UsersMySkillsDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMySkillsDestroy
     */
    readonly id: string
}

/**
 * Request parameters for v1UsersMySkillsList operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMySkillsListRequest
 */
export interface V1ApiV1UsersMySkillsListRequest {
    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1UsersMySkillsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1UsersMySkillsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1UsersMySkillsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1UsersMySkillsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1UsersMySkillsPartialUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMySkillsPartialUpdateRequest
 */
export interface V1ApiV1UsersMySkillsPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMySkillsPartialUpdate
     */
    readonly id: string

    /**
     * 
     * @type {PatchedMasterSkillRequest}
     * @memberof V1ApiV1UsersMySkillsPartialUpdate
     */
    readonly patchedMasterSkillRequest?: PatchedMasterSkillRequest
}

/**
 * Request parameters for v1UsersMySkillsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMySkillsRetrieveRequest
 */
export interface V1ApiV1UsersMySkillsRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMySkillsRetrieve
     */
    readonly id: string
}

/**
 * Request parameters for v1UsersMySkillsUpdate operation in V1Api.
 * @export
 * @interface V1ApiV1UsersMySkillsUpdateRequest
 */
export interface V1ApiV1UsersMySkillsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ApiV1UsersMySkillsUpdate
     */
    readonly id: string

    /**
     * 
     * @type {MasterSkillRequest}
     * @memberof V1ApiV1UsersMySkillsUpdate
     */
    readonly masterSkillRequest: MasterSkillRequest
}

/**
 * Request parameters for v1UsersProfessionsList operation in V1Api.
 * @export
 * @interface V1ApiV1UsersProfessionsListRequest
 */
export interface V1ApiV1UsersProfessionsListRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1UsersProfessionsList
     */
    readonly category?: number

    /**
     * Несколько значений могут быть разделены запятыми.
     * @type {Array<number>}
     * @memberof V1ApiV1UsersProfessionsList
     */
    readonly idIn?: Array<number>

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1UsersProfessionsList
     */
    readonly isActive?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1UsersProfessionsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1UsersProfessionsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1UsersProfessionsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1UsersProfessionsList
     */
    readonly search?: string
}

/**
 * Request parameters for v1UsersProfessionsRetrieve operation in V1Api.
 * @export
 * @interface V1ApiV1UsersProfessionsRetrieveRequest
 */
export interface V1ApiV1UsersProfessionsRetrieveRequest {
    /**
     * A unique integer value identifying this Profession.
     * @type {number}
     * @memberof V1ApiV1UsersProfessionsRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for v1UsersSkillsList operation in V1Api.
 * @export
 * @interface V1ApiV1UsersSkillsListRequest
 */
export interface V1ApiV1UsersSkillsListRequest {
    /**
     * 
     * @type {number}
     * @memberof V1ApiV1UsersSkillsList
     */
    readonly category?: number

    /**
     * 
     * @type {boolean}
     * @memberof V1ApiV1UsersSkillsList
     */
    readonly isActive?: boolean

    /**
     * Which field to use when ordering the results.
     * @type {string}
     * @memberof V1ApiV1UsersSkillsList
     */
    readonly ordering?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof V1ApiV1UsersSkillsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof V1ApiV1UsersSkillsList
     */
    readonly pageSize?: number

    /**
     * A search term.
     * @type {string}
     * @memberof V1ApiV1UsersSkillsList
     */
    readonly search?: string
}

/**
 * V1Api - object-oriented interface
 * @export
 * @class V1Api
 * @extends {BaseAPI}
 */
export class V1Api extends BaseAPI implements V1ApiInterface {
    /**
     * Accept a job application
     * @param {V1ApiV1ApplicationsAcceptRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsAccept(requestParameters: V1ApiV1ApplicationsAcceptRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsAccept(requestParameters.id, requestParameters.jobApplicationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reject a job application
     * @param {V1ApiV1ApplicationsAcceptRejectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsAcceptReject(requestParameters: V1ApiV1ApplicationsAcceptRejectRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsAcceptReject(requestParameters.id, requestParameters.jobApplicationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing job applications.
     * @param {V1ApiV1ApplicationsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsCreate(requestParameters: V1ApiV1ApplicationsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsCreate(requestParameters.jobApplicationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing job applications.
     * @param {V1ApiV1ApplicationsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsDestroy(requestParameters: V1ApiV1ApplicationsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing job applications.
     * @param {V1ApiV1ApplicationsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsList(requestParameters: V1ApiV1ApplicationsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsList(requestParameters.amountMax, requestParameters.amountMin, requestParameters.appliedAtAfter, requestParameters.appliedAtBefore, requestParameters.jobServiceSubcategory, requestParameters.jobUrgency, requestParameters.jobId, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing job applications.
     * @param {V1ApiV1ApplicationsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsPartialUpdate(requestParameters: V1ApiV1ApplicationsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsPartialUpdate(requestParameters.id, requestParameters.patchedJobApplicationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing job applications.
     * @param {V1ApiV1ApplicationsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsRetrieve(requestParameters: V1ApiV1ApplicationsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing job applications.
     * @param {V1ApiV1ApplicationsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsUpdate(requestParameters: V1ApiV1ApplicationsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsUpdate(requestParameters.id, requestParameters.jobApplicationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Withdraw a job by master
     * @param {V1ApiV1ApplicationsWithdrawRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ApplicationsWithdraw(requestParameters: V1ApiV1ApplicationsWithdrawRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ApplicationsWithdraw(requestParameters.id, requestParameters.jobApplicationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsAttachmentsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsAttachmentsCreate(requestParameters: V1ApiV1AssignmentsAttachmentsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsAttachmentsCreate(requestParameters.assignmentId, requestParameters.files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsAttachmentsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsAttachmentsDestroy(requestParameters: V1ApiV1AssignmentsAttachmentsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsAttachmentsDestroy(requestParameters.assignmentId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsAttachmentsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsAttachmentsList(requestParameters: V1ApiV1AssignmentsAttachmentsListRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsAttachmentsList(requestParameters.assignmentId, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsCreate(requestParameters: V1ApiV1AssignmentsCreateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsCreate(requestParameters.jobAssignmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsDestroy(requestParameters: V1ApiV1AssignmentsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsList(requestParameters: V1ApiV1AssignmentsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsPartialUpdate(requestParameters: V1ApiV1AssignmentsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsPartialUpdate(requestParameters.id, requestParameters.patchedJobAssignmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rate a completed job assignment
     * @param {V1ApiV1AssignmentsRateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsRateCreate(requestParameters: V1ApiV1AssignmentsRateCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsRateCreate(requestParameters.id, requestParameters.ratingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsRetrieve(requestParameters: V1ApiV1AssignmentsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1AssignmentsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsUpdate(requestParameters: V1ApiV1AssignmentsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsUpdate(requestParameters.id, requestParameters.jobAssignmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update progress notes for an assignment
     * @param {V1ApiV1AssignmentsUpdateProgressPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AssignmentsUpdateProgressPartialUpdate(requestParameters: V1ApiV1AssignmentsUpdateProgressPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AssignmentsUpdateProgressPartialUpdate(requestParameters.id, requestParameters.patchedProgressUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authenticate or register a user using Firebase ID token.
     * @param {V1ApiV1AuthFirebaseCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AuthFirebaseCreate(requestParameters: V1ApiV1AuthFirebaseCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AuthFirebaseCreate(requestParameters.fireBaseAuthRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * User logout view - enhanced version of api_users LogOutView
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1AuthLogoutCreate(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1AuthLogoutCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing chat rooms
     * @param {V1ApiV1ChatsRoomsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsCreate(requestParameters: V1ApiV1ChatsRoomsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsCreate(requestParameters.chatRoomCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing chat rooms
     * @param {V1ApiV1ChatsRoomsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsDestroy(requestParameters: V1ApiV1ChatsRoomsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get chats for master
     * @param {V1ApiV1ChatsRoomsForMasterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsForMaster(requestParameters: V1ApiV1ChatsRoomsForMasterRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsForMaster(requestParameters.masterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Leave a chat room
     * @param {V1ApiV1ChatsRoomsLeaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsLeave(requestParameters: V1ApiV1ChatsRoomsLeaveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsLeave(requestParameters.id, requestParameters.chatRoomRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing chat rooms
     * @param {V1ApiV1ChatsRoomsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsList(requestParameters: V1ApiV1ChatsRoomsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1ChatsRoomsMessagesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsMessagesCreate(requestParameters: V1ApiV1ChatsRoomsMessagesCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsMessagesCreate(requestParameters.chatRoomId, requestParameters.messageCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1ChatsRoomsMessagesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsMessagesDestroy(requestParameters: V1ApiV1ChatsRoomsMessagesDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsMessagesDestroy(requestParameters.chatRoomId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1ChatsRoomsMessagesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsMessagesList(requestParameters: V1ApiV1ChatsRoomsMessagesListRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsMessagesList(requestParameters.chatRoomId, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1ChatsRoomsMessagesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsMessagesPartialUpdate(requestParameters: V1ApiV1ChatsRoomsMessagesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsMessagesPartialUpdate(requestParameters.chatRoomId, requestParameters.id, requestParameters.patchedMessageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1ChatsRoomsMessagesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsMessagesRetrieve(requestParameters: V1ApiV1ChatsRoomsMessagesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsMessagesRetrieve(requestParameters.chatRoomId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1ChatsRoomsMessagesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsMessagesUpdate(requestParameters: V1ApiV1ChatsRoomsMessagesUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsMessagesUpdate(requestParameters.chatRoomId, requestParameters.id, requestParameters.messageUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing chat rooms
     * @param {V1ApiV1ChatsRoomsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsPartialUpdate(requestParameters: V1ApiV1ChatsRoomsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsPartialUpdate(requestParameters.id, requestParameters.patchedChatRoomRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing chat rooms
     * @param {V1ApiV1ChatsRoomsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsRetrieve(requestParameters: V1ApiV1ChatsRoomsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing chat rooms
     * @param {V1ApiV1ChatsRoomsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ChatsRoomsUpdate(requestParameters: V1ApiV1ChatsRoomsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ChatsRoomsUpdate(requestParameters.id, requestParameters.chatRoomRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create contact with throttling.
     * @param {V1ApiV1ContactsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ContactsCreate(requestParameters: V1ApiV1ContactsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ContactsCreate(requestParameters.simpleContactRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Contact enquiries API with minimal code.
     * @param {V1ApiV1ContactsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ContactsDestroy(requestParameters: V1ApiV1ContactsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ContactsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get available enquiry types.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ContactsEnquiryTypesRetrieve(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ContactsEnquiryTypesRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Contact enquiries API with minimal code.
     * @param {V1ApiV1ContactsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ContactsList(requestParameters: V1ApiV1ContactsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ContactsList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Contact enquiries API with minimal code.
     * @param {V1ApiV1ContactsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ContactsPartialUpdate(requestParameters: V1ApiV1ContactsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ContactsPartialUpdate(requestParameters.id, requestParameters.patchedSimpleContactRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Contact enquiries API with minimal code.
     * @param {V1ApiV1ContactsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ContactsRetrieve(requestParameters: V1ApiV1ContactsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ContactsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Contact enquiries API with minimal code.
     * @param {V1ApiV1ContactsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ContactsUpdate(requestParameters: V1ApiV1ContactsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ContactsUpdate(requestParameters.id, requestParameters.simpleContactRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Languages - Read-only (managed via admin/fixtures).
     * @param {V1ApiV1CoreLanguagesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreLanguagesList(requestParameters: V1ApiV1CoreLanguagesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreLanguagesList(requestParameters.idIn, requestParameters.isActive, requestParameters.isDefault, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Languages - Read-only (managed via admin/fixtures).
     * @param {V1ApiV1CoreLanguagesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreLanguagesRetrieve(requestParameters: V1ApiV1CoreLanguagesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreLanguagesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceAreasCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceAreasCreate(requestParameters: V1ApiV1CoreServiceAreasCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceAreasCreate(requestParameters.serviceAreaCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceAreasDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceAreasDestroy(requestParameters: V1ApiV1CoreServiceAreasDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceAreasDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceAreasListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceAreasList(requestParameters: V1ApiV1CoreServiceAreasListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceAreasList(requestParameters.idIn, requestParameters.isActive, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceAreasPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceAreasPartialUpdate(requestParameters: V1ApiV1CoreServiceAreasPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceAreasPartialUpdate(requestParameters.id, requestParameters.patchedServiceAreaCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceAreasRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceAreasRetrieve(requestParameters: V1ApiV1CoreServiceAreasRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceAreasRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Areas - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceAreasUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceAreasUpdate(requestParameters: V1ApiV1CoreServiceAreasUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceAreasUpdate(requestParameters.id, requestParameters.serviceAreaCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceCategoriesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceCategoriesCreate(requestParameters: V1ApiV1CoreServiceCategoriesCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceCategoriesCreate(requestParameters.serviceCategoryCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceCategoriesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceCategoriesDestroy(requestParameters: V1ApiV1CoreServiceCategoriesDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceCategoriesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceCategoriesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceCategoriesList(requestParameters: V1ApiV1CoreServiceCategoriesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceCategoriesList(requestParameters.featured, requestParameters.isActive, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceCategoriesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceCategoriesPartialUpdate(requestParameters: V1ApiV1CoreServiceCategoriesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceCategoriesPartialUpdate(requestParameters.id, requestParameters.patchedServiceCategoryCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceCategoriesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceCategoriesRetrieve(requestParameters: V1ApiV1CoreServiceCategoriesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceCategoriesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Categories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceCategoriesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceCategoriesUpdate(requestParameters: V1ApiV1CoreServiceCategoriesUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceCategoriesUpdate(requestParameters.id, requestParameters.serviceCategoryCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceSubcategoriesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceSubcategoriesCreate(requestParameters: V1ApiV1CoreServiceSubcategoriesCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceSubcategoriesCreate(requestParameters.serviceSubcategoryCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceSubcategoriesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceSubcategoriesDestroy(requestParameters: V1ApiV1CoreServiceSubcategoriesDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceSubcategoriesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceSubcategoriesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceSubcategoriesList(requestParameters: V1ApiV1CoreServiceSubcategoriesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceSubcategoriesList(requestParameters.category, requestParameters.featured, requestParameters.idIn, requestParameters.isActive, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceSubcategoriesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceSubcategoriesPartialUpdate(requestParameters: V1ApiV1CoreServiceSubcategoriesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceSubcategoriesPartialUpdate(requestParameters.id, requestParameters.patchedServiceSubcategoryCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceSubcategoriesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceSubcategoriesRetrieve(requestParameters: V1ApiV1CoreServiceSubcategoriesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceSubcategoriesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Service Subcategories - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreServiceSubcategoriesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreServiceSubcategoriesUpdate(requestParameters: V1ApiV1CoreServiceSubcategoriesUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreServiceSubcategoriesUpdate(requestParameters.id, requestParameters.serviceSubcategoryCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSupportFaqCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSupportFaqCreate(requestParameters: V1ApiV1CoreSupportFaqCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSupportFaqCreate(requestParameters.supportFAQCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSupportFaqDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSupportFaqDestroy(requestParameters: V1ApiV1CoreSupportFaqDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSupportFaqDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSupportFaqListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSupportFaqList(requestParameters: V1ApiV1CoreSupportFaqListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSupportFaqList(requestParameters.category, requestParameters.isActive, requestParameters.language, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSupportFaqPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSupportFaqPartialUpdate(requestParameters: V1ApiV1CoreSupportFaqPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSupportFaqPartialUpdate(requestParameters.id, requestParameters.patchedSupportFAQCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSupportFaqRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSupportFaqRetrieve(requestParameters: V1ApiV1CoreSupportFaqRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSupportFaqRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Support FAQs - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSupportFaqUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSupportFaqUpdate(requestParameters: V1ApiV1CoreSupportFaqUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSupportFaqUpdate(requestParameters.id, requestParameters.supportFAQCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSystemSettingsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSystemSettingsCreate(requestParameters: V1ApiV1CoreSystemSettingsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSystemSettingsCreate(requestParameters.systemSettingsCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSystemSettingsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSystemSettingsDestroy(requestParameters: V1ApiV1CoreSystemSettingsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSystemSettingsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSystemSettingsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSystemSettingsList(requestParameters: V1ApiV1CoreSystemSettingsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSystemSettingsList(requestParameters.category, requestParameters.isActive, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSystemSettingsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSystemSettingsPartialUpdate(requestParameters: V1ApiV1CoreSystemSettingsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSystemSettingsPartialUpdate(requestParameters.id, requestParameters.patchedSystemSettingsCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSystemSettingsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSystemSettingsRetrieve(requestParameters: V1ApiV1CoreSystemSettingsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSystemSettingsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * System Settings - Full CRUD with authenticated access.
     * @param {V1ApiV1CoreSystemSettingsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1CoreSystemSettingsUpdate(requestParameters: V1ApiV1CoreSystemSettingsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1CoreSystemSettingsUpdate(requestParameters.id, requestParameters.systemSettingsCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns featured categories, recommended masters, and statistics for the home page. Prioritizes top masters first, then fills with additional masters if needed.
     * @summary Get home page data with master recommendations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1HomeClientRetrieve(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1HomeClientRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get job recommendations for master based on skills, location, and preferences.
     * @param {V1ApiV1HomeMasterNewJobsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1HomeMasterNewJobsList(requestParameters: V1ApiV1HomeMasterNewJobsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1HomeMasterNewJobsList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Complete an assignment with optional rating and review
     * @param {V1ApiV1JobAssignmentsCompleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobAssignmentsComplete(requestParameters: V1ApiV1JobAssignmentsCompleteRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobAssignmentsComplete(requestParameters.id, requestParameters.jobAssignmentCompletionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start an assignment
     * @param {V1ApiV1JobAssignmentsStartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobAssignmentsStart(requestParameters: V1ApiV1JobAssignmentsStartRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobAssignmentsStart(requestParameters.id, requestParameters.jobAssignmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Apply to a job.
     * @param {V1ApiV1JobsApplyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsApply(requestParameters: V1ApiV1JobsApplyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsApply(requestParameters.id, requestParameters.jobApplyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1JobsAttachmentsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsAttachmentsCreate(requestParameters: V1ApiV1JobsAttachmentsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsAttachmentsCreate(requestParameters.jobId, requestParameters.files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1JobsAttachmentsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsAttachmentsDestroy(requestParameters: V1ApiV1JobsAttachmentsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsAttachmentsDestroy(requestParameters.id, requestParameters.jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1JobsAttachmentsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsAttachmentsList(requestParameters: V1ApiV1JobsAttachmentsListRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsAttachmentsList(requestParameters.jobId, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Toggle bookmark status for a job
     * @param {V1ApiV1JobsBookmarkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsBookmark(requestParameters: V1ApiV1JobsBookmarkRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsBookmark(requestParameters.id, requestParameters.jobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel a job. Only allowed if job is in PUBLISHED or ASSIGNED state.
     * @param {V1ApiV1JobsCancelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsCancel(requestParameters: V1ApiV1JobsCancelRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsCancel(requestParameters.id, requestParameters.jobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing jobs.
     * @param {V1ApiV1JobsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsCreate(requestParameters: V1ApiV1JobsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsCreate(requestParameters.jobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing jobs.
     * @param {V1ApiV1JobsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsDestroy(requestParameters: V1ApiV1JobsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Toggle favorite status for a job
     * @param {V1ApiV1JobsFavoriteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsFavorite(requestParameters: V1ApiV1JobsFavoriteRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsFavorite(requestParameters.id, requestParameters.jobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing jobs.
     * @param {V1ApiV1JobsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsList(requestParameters: V1ApiV1JobsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsList(requestParameters.city, requestParameters.maxPrice, requestParameters.minPrice, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.serviceCategory, requestParameters.serviceDateFrom, requestParameters.serviceDateTo, requestParameters.serviceSubcategory, requestParameters.urgency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get completed job history for master
     * @param {V1ApiV1JobsMasterHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsMasterHistory(requestParameters: V1ApiV1JobsMasterHistoryRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsMasterHistory(requestParameters.city, requestParameters.maxPrice, requestParameters.minPrice, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.serviceCategory, requestParameters.serviceDateFrom, requestParameters.serviceDateTo, requestParameters.serviceSubcategory, requestParameters.urgency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get jobs currently in progress for master
     * @param {V1ApiV1JobsMasterInProgressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsMasterInProgress(requestParameters: V1ApiV1JobsMasterInProgressRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsMasterInProgress(requestParameters.city, requestParameters.maxPrice, requestParameters.minPrice, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.serviceCategory, requestParameters.serviceDateFrom, requestParameters.serviceDateTo, requestParameters.serviceSubcategory, requestParameters.urgency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing jobs.
     * @param {V1ApiV1JobsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsPartialUpdate(requestParameters: V1ApiV1JobsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsPartialUpdate(requestParameters.id, requestParameters.patchedJobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish a draft job. Only allowed if job is in DRAFT state.
     * @param {V1ApiV1JobsPublishRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsPublish(requestParameters: V1ApiV1JobsPublishRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsPublish(requestParameters.id, requestParameters.jobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing jobs.
     * @param {V1ApiV1JobsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsRetrieve(requestParameters: V1ApiV1JobsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing jobs.
     * @param {V1ApiV1JobsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1JobsUpdate(requestParameters: V1ApiV1JobsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1JobsUpdate(requestParameters.id, requestParameters.jobRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing cities.
     * @param {V1ApiV1LocationsCitiesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCitiesCreate(requestParameters: V1ApiV1LocationsCitiesCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCitiesCreate(requestParameters.cityRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing cities.
     * @param {V1ApiV1LocationsCitiesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCitiesDestroy(requestParameters: V1ApiV1LocationsCitiesDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCitiesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing cities.
     * @param {V1ApiV1LocationsCitiesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCitiesList(requestParameters: V1ApiV1LocationsCitiesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCitiesList(requestParameters.country, requestParameters.isDeleted, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing cities.
     * @param {V1ApiV1LocationsCitiesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCitiesPartialUpdate(requestParameters: V1ApiV1LocationsCitiesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCitiesPartialUpdate(requestParameters.id, requestParameters.patchedCityRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing cities.
     * @param {V1ApiV1LocationsCitiesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCitiesRetrieve(requestParameters: V1ApiV1LocationsCitiesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCitiesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing cities.
     * @param {V1ApiV1LocationsCitiesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCitiesUpdate(requestParameters: V1ApiV1LocationsCitiesUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCitiesUpdate(requestParameters.id, requestParameters.cityRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing countries.
     * @param {V1ApiV1LocationsCountriesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCountriesCreate(requestParameters: V1ApiV1LocationsCountriesCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCountriesCreate(requestParameters.countryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing countries.
     * @param {V1ApiV1LocationsCountriesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCountriesDestroy(requestParameters: V1ApiV1LocationsCountriesDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCountriesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing countries.
     * @param {V1ApiV1LocationsCountriesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCountriesList(requestParameters: V1ApiV1LocationsCountriesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCountriesList(requestParameters.isDeleted, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing countries.
     * @param {V1ApiV1LocationsCountriesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCountriesPartialUpdate(requestParameters: V1ApiV1LocationsCountriesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCountriesPartialUpdate(requestParameters.id, requestParameters.patchedCountryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing countries.
     * @param {V1ApiV1LocationsCountriesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCountriesRetrieve(requestParameters: V1ApiV1LocationsCountriesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCountriesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing countries.
     * @param {V1ApiV1LocationsCountriesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1LocationsCountriesUpdate(requestParameters: V1ApiV1LocationsCountriesUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1LocationsCountriesUpdate(requestParameters.id, requestParameters.countryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get notification counts for current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsCount(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {V1ApiV1NotificationsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsCreate(requestParameters: V1ApiV1NotificationsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsCreate(requestParameters.notificationCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {V1ApiV1NotificationsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsDestroy(requestParameters: V1ApiV1NotificationsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {V1ApiV1NotificationsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsList(requestParameters: V1ApiV1NotificationsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark all notifications as read for current user
     * @param {V1ApiV1NotificationsMarkAllReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsMarkAllRead(requestParameters: V1ApiV1NotificationsMarkAllReadRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsMarkAllRead(requestParameters.notificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark specific notification as read
     * @param {V1ApiV1NotificationsMarkReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsMarkRead(requestParameters: V1ApiV1NotificationsMarkReadRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsMarkRead(requestParameters.id, requestParameters.notificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark specific notification as unread
     * @param {V1ApiV1NotificationsMarkUnreadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsMarkUnread(requestParameters: V1ApiV1NotificationsMarkUnreadRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsMarkUnread(requestParameters.id, requestParameters.notificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {V1ApiV1NotificationsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsPartialUpdate(requestParameters: V1ApiV1NotificationsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsPartialUpdate(requestParameters.id, requestParameters.patchedNotificationUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get recent notifications (last 7 days)
     * @param {V1ApiV1NotificationsRecentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsRecent(requestParameters: V1ApiV1NotificationsRecentRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsRecent(requestParameters.days, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {V1ApiV1NotificationsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsRetrieve(requestParameters: V1ApiV1NotificationsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get unread notifications for current user
     * @param {V1ApiV1NotificationsUnreadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsUnread(requestParameters: V1ApiV1NotificationsUnreadRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsUnread(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ViewSet for managing notifications with clean actions.
     * @param {V1ApiV1NotificationsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1NotificationsUpdate(requestParameters: V1ApiV1NotificationsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1NotificationsUpdate(requestParameters.id, requestParameters.notificationUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfileControlCreate(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfileControlCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1ProfileNotificationSettingsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfileNotificationSettingsPartialUpdate(requestParameters: V1ApiV1ProfileNotificationSettingsPartialUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfileNotificationSettingsPartialUpdate(requestParameters.patchedUserNotificationSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfileNotificationSettingsRetrieve(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfileNotificationSettingsRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1ProfileNotificationSettingsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfileNotificationSettingsUpdate(requestParameters: V1ApiV1ProfileNotificationSettingsUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfileNotificationSettingsUpdate(requestParameters.userNotificationSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve or update authenticated user\'s profile, including profile image upload.
     * @param {V1ApiV1ProfilePartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfilePartialUpdate(requestParameters: V1ApiV1ProfilePartialUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfilePartialUpdate(requestParameters.patchedUserUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve or update authenticated user\'s profile, including profile image upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfileRetrieve(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfileRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve or update authenticated user\'s profile, including profile image upload.
     * @param {V1ApiV1ProfileUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ProfileUpdate(requestParameters: V1ApiV1ProfileUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ProfileUpdate(requestParameters.userUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Archive a published resume.
     * @param {V1ApiV1ResumesArchiveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesArchive(requestParameters: V1ApiV1ResumesArchiveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesArchive(requestParameters.id, requestParameters.masterResumeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {V1ApiV1ResumesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesCreate(requestParameters: V1ApiV1ResumesCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesCreate(requestParameters.masterResumeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {V1ApiV1ResumesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesDestroy(requestParameters: V1ApiV1ResumesDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {V1ApiV1ResumesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesList(requestParameters: V1ApiV1ResumesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {V1ApiV1ResumesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesPartialUpdate(requestParameters: V1ApiV1ResumesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesPartialUpdate(requestParameters.id, requestParameters.patchedMasterResumeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publish a draft resume. Only allowed if in DRAFT state.
     * @param {V1ApiV1ResumesPublishRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesPublish(requestParameters: V1ApiV1ResumesPublishRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesPublish(requestParameters.id, requestParameters.masterResumeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {V1ApiV1ResumesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesRetrieve(requestParameters: V1ApiV1ResumesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * CRUD for Master resumes. Masters manage their own resumes, public sees published.
     * @param {V1ApiV1ResumesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ResumesUpdate(requestParameters: V1ApiV1ResumesUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ResumesUpdate(requestParameters.id, requestParameters.masterResumeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get review analytics for a specific master
     * @param {V1ApiV1ReviewsAnalyticsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ReviewsAnalyticsRetrieve(requestParameters: V1ApiV1ReviewsAnalyticsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ReviewsAnalyticsRetrieve(requestParameters.masterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get review data from job assignments
     * @param {V1ApiV1ReviewsAssignmentsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ReviewsAssignmentsList(requestParameters: V1ApiV1ReviewsAssignmentsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ReviewsAssignmentsList(requestParameters.isVerified, requestParameters.job, requestParameters.master, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.rating, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all reviews for a specific job
     * @param {V1ApiV1ReviewsJobListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ReviewsJobList(requestParameters: V1ApiV1ReviewsJobListRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ReviewsJobList(requestParameters.jobId, requestParameters.isVerified, requestParameters.job, requestParameters.master, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.rating, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Comprehensive review management with additional actions.
     * @param {V1ApiV1ReviewsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ReviewsList(requestParameters: V1ApiV1ReviewsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ReviewsList(requestParameters.isVerified, requestParameters.job, requestParameters.master, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.rating, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all reviews for a specific master
     * @param {V1ApiV1ReviewsMasterListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ReviewsMasterList(requestParameters: V1ApiV1ReviewsMasterListRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ReviewsMasterList(requestParameters.masterId, requestParameters.isVerified, requestParameters.job, requestParameters.master, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.rating, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Comprehensive review management with additional actions.
     * @param {V1ApiV1ReviewsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1ReviewsRetrieve(requestParameters: V1ApiV1ReviewsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1ReviewsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search jobs with optimized search serializer.
     * @param {V1ApiV1SearchJobsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1SearchJobsList(requestParameters: V1ApiV1SearchJobsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1SearchJobsList(requestParameters.budgetMaxLte, requestParameters.budgetMinGte, requestParameters.city, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.serviceSubcategoryCategory, requestParameters.status, requestParameters.urgency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search masters by keywords, profession, location, and other criteria. Returns paginated list of master profiles with portfolio items and skills.
     * @summary Search for masters
     * @param {V1ApiV1SearchMastersListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1SearchMastersList(requestParameters: V1ApiV1SearchMastersListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1SearchMastersList(requestParameters.isAvailable, requestParameters.isTopMaster, requestParameters.isVerifiedProvider, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.profession, requestParameters.search, requestParameters.servicesOfferedCategory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Master Profile Details
     * @param {V1ApiV1UsersMastersDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMastersDetails(requestParameters: V1ApiV1UsersMastersDetailsRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMastersDetails(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMastersListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMastersList(requestParameters: V1ApiV1UsersMastersListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMastersList(requestParameters.idIn, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMastersRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMastersRetrieve(requestParameters: V1ApiV1UsersMastersRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMastersRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update online status for master
     * @param {V1ApiV1UsersMastersUpdateOnlineStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMastersUpdateOnlineStatus(requestParameters: V1ApiV1UsersMastersUpdateOnlineStatusRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMastersUpdateOnlineStatus(requestParameters.masterOnlineStatusRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for certificates.
     * @param {V1ApiV1UsersMyCertificatesCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyCertificatesCreate(requestParameters: V1ApiV1UsersMyCertificatesCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyCertificatesCreate(requestParameters.certificateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for certificates.
     * @param {V1ApiV1UsersMyCertificatesDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyCertificatesDestroy(requestParameters: V1ApiV1UsersMyCertificatesDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyCertificatesDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for certificates.
     * @param {V1ApiV1UsersMyCertificatesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyCertificatesList(requestParameters: V1ApiV1UsersMyCertificatesListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyCertificatesList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for certificates.
     * @param {V1ApiV1UsersMyCertificatesPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyCertificatesPartialUpdate(requestParameters: V1ApiV1UsersMyCertificatesPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyCertificatesPartialUpdate(requestParameters.id, requestParameters.patchedCertificateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for certificates.
     * @param {V1ApiV1UsersMyCertificatesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyCertificatesRetrieve(requestParameters: V1ApiV1UsersMyCertificatesRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyCertificatesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for certificates.
     * @param {V1ApiV1UsersMyCertificatesUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyCertificatesUpdate(requestParameters: V1ApiV1UsersMyCertificatesUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyCertificatesUpdate(requestParameters.id, requestParameters.certificateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyEmployerCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyEmployerCreateCreate(requestParameters: V1ApiV1UsersMyEmployerCreateCreateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyEmployerCreateCreate(requestParameters.employerProfileCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyEmployerPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyEmployerPartialUpdate(requestParameters: V1ApiV1UsersMyEmployerPartialUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyEmployerPartialUpdate(requestParameters.patchedEmployerProfileCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyEmployerRetrieve(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyEmployerRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyEmployerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyEmployerUpdate(requestParameters: V1ApiV1UsersMyEmployerUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyEmployerUpdate(requestParameters.employerProfileCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyMasterCreateCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyMasterCreateCreate(requestParameters: V1ApiV1UsersMyMasterCreateCreateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyMasterCreateCreate(requestParameters.masterProfileCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyMasterPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyMasterPartialUpdate(requestParameters: V1ApiV1UsersMyMasterPartialUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyMasterPartialUpdate(requestParameters.patchedMasterProfileCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyMasterRetrieve(options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyMasterRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyMasterUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyMasterUpdate(requestParameters: V1ApiV1UsersMyMasterUpdateRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyMasterUpdate(requestParameters.masterProfileCreateUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyPortfolioAttachmentsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioAttachmentsCreate(requestParameters: V1ApiV1UsersMyPortfolioAttachmentsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioAttachmentsCreate(requestParameters.portfolioId, requestParameters.files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyPortfolioAttachmentsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioAttachmentsDestroy(requestParameters: V1ApiV1UsersMyPortfolioAttachmentsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioAttachmentsDestroy(requestParameters.id, requestParameters.portfolioId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersMyPortfolioAttachmentsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioAttachmentsList(requestParameters: V1ApiV1UsersMyPortfolioAttachmentsListRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioAttachmentsList(requestParameters.portfolioId, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master portfolio items.
     * @param {V1ApiV1UsersMyPortfolioCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioCreate(requestParameters: V1ApiV1UsersMyPortfolioCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioCreate(requestParameters.portfolioItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master portfolio items.
     * @param {V1ApiV1UsersMyPortfolioDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioDestroy(requestParameters: V1ApiV1UsersMyPortfolioDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master portfolio items.
     * @param {V1ApiV1UsersMyPortfolioListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioList(requestParameters: V1ApiV1UsersMyPortfolioListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master portfolio items.
     * @param {V1ApiV1UsersMyPortfolioPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioPartialUpdate(requestParameters: V1ApiV1UsersMyPortfolioPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioPartialUpdate(requestParameters.id, requestParameters.patchedPortfolioItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master portfolio items.
     * @param {V1ApiV1UsersMyPortfolioRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioRetrieve(requestParameters: V1ApiV1UsersMyPortfolioRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master portfolio items.
     * @param {V1ApiV1UsersMyPortfolioUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMyPortfolioUpdate(requestParameters: V1ApiV1UsersMyPortfolioUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMyPortfolioUpdate(requestParameters.id, requestParameters.portfolioItemRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master skills.
     * @param {V1ApiV1UsersMySkillsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMySkillsCreate(requestParameters: V1ApiV1UsersMySkillsCreateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMySkillsCreate(requestParameters.masterSkillRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master skills.
     * @param {V1ApiV1UsersMySkillsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMySkillsDestroy(requestParameters: V1ApiV1UsersMySkillsDestroyRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMySkillsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master skills.
     * @param {V1ApiV1UsersMySkillsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMySkillsList(requestParameters: V1ApiV1UsersMySkillsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMySkillsList(requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master skills.
     * @param {V1ApiV1UsersMySkillsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMySkillsPartialUpdate(requestParameters: V1ApiV1UsersMySkillsPartialUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMySkillsPartialUpdate(requestParameters.id, requestParameters.patchedMasterSkillRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master skills.
     * @param {V1ApiV1UsersMySkillsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMySkillsRetrieve(requestParameters: V1ApiV1UsersMySkillsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMySkillsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Crud for service master skills.
     * @param {V1ApiV1UsersMySkillsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersMySkillsUpdate(requestParameters: V1ApiV1UsersMySkillsUpdateRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersMySkillsUpdate(requestParameters.id, requestParameters.masterSkillRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersProfessionsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersProfessionsList(requestParameters: V1ApiV1UsersProfessionsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersProfessionsList(requestParameters.category, requestParameters.idIn, requestParameters.isActive, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {V1ApiV1UsersProfessionsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersProfessionsRetrieve(requestParameters: V1ApiV1UsersProfessionsRetrieveRequest, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersProfessionsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all available skills.
     * @param {V1ApiV1UsersSkillsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public v1UsersSkillsList(requestParameters: V1ApiV1UsersSkillsListRequest = {}, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).v1UsersSkillsList(requestParameters.category, requestParameters.isActive, requestParameters.ordering, requestParameters.page, requestParameters.pageSize, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }
}


