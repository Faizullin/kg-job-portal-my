# Generated by Django 5.0.2 on 2025-09-11 07:21

import datetime
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted at')),
                ('restored_at', models.DateTimeField(blank=True, null=True, verbose_name='Restored at')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='Is deleted')),
                ('user_type', models.CharField(choices=[('free', 'Бесплатный'), ('paid', 'Оплаченный'), ('premium_paid', 'Премиум оплаченный')], default='free', max_length=20)),
                ('blocked', models.BooleanField(default=False)),
                ('firebase_user_id', models.CharField(blank=True, max_length=200, null=True)),
                ('fcm_token', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(max_length=255, verbose_name='Имя')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер телефона')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='user_photos/', verbose_name='Фото')),
                ('photo_url', models.URLField(blank=True, null=True, verbose_name='Ссылка на фото (Firebase)')),
                ('user_role', models.CharField(blank=True, choices=[('job_seeker', 'Ищу работу'), ('service_provider', 'Предлагаю услуги')], max_length=20, null=True, verbose_name='Роль пользователя')),
                ('timezone_difference', models.IntegerField(default=0, verbose_name='Разница во времени')),
                ('points', models.IntegerField(default=0, verbose_name='Баллы')),
                ('day_streak', models.IntegerField(default=0, verbose_name='Дневная серия')),
                ('max_day_streak', models.IntegerField(default=0, verbose_name='Максимальная дневная серия')),
                ('friends', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='Друзья')),
                ('friendship_requests', models.ManyToManyField(blank=True, related_name='pending_friend_requests', to=settings.AUTH_USER_MODEL, verbose_name='Запросы в друзья')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LoginSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True, verbose_name='Session Key')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('login_at', models.DateTimeField(auto_now_add=True, verbose_name='Login At')),
                ('logout_at', models.DateTimeField(blank=True, null=True, verbose_name='Logout At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='login_sessions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Login Session',
                'verbose_name_plural': 'Login Sessions',
                'ordering': ['-login_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('periodic_lesson_reminder', models.BooleanField(default=True)),
                ('friend_request_notification', models.BooleanField(default=True)),
                ('streak_notification', models.BooleanField(default=True)),
                ('global_event_notification', models.BooleanField(default=True)),
                ('last_streak_notification', models.DateTimeField(default=datetime.datetime(2021, 1, 1, 0, 0))),
                ('last_lesson_reminder', models.DateTimeField(default=datetime.datetime(2021, 1, 1, 0, 0))),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Настройки уведомлений',
                'verbose_name_plural': 'Настройки уведомлений',
            },
        ),
        migrations.CreateModel(
            name='UserActivityDateModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата активности')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_dates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Активность пользователя',
                'verbose_name_plural': 'Активности пользователей',
                'ordering': ['-datetime'],
            },
        ),
        migrations.CreateModel(
            name='UserPointAddHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField()),
                ('description', models.TextField()),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата добавления')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='point_add_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'История добавления баллов',
                'verbose_name_plural': 'Истории добавления баллов',
            },
        ),
    ]
